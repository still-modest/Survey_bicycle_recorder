<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\X-Track.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\X-Track.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Thu Nov 18 15:20:31 2021
<BR><P>
<H3>Maximum Stack Usage =       2736 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; [local to DP_Storage_cpp]::onLoad(Account*) &rArr; StorageService::LoadFile() &rArr; ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[215]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[272]">pinMode</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[272]">pinMode</a><BR>
 <LI><a href="#[271]">PWM_Init</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[272]">pinMode</a><BR>
 <LI><a href="#[26]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">NMI_Handler</a><BR>
 <LI><a href="#[28]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">MemManage_Handler</a><BR>
 <LI><a href="#[29]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">BusFault_Handler</a><BR>
 <LI><a href="#[2a]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2a]">UsageFault_Handler</a><BR>
 <LI><a href="#[2b]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2b]">SVC_Handler</a><BR>
 <LI><a href="#[2c]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2c]">DebugMon_Handler</a><BR>
 <LI><a href="#[2d]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d]">PendSV_Handler</a><BR>
 <LI><a href="#[71]">ACC_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[71]">ACC_IRQHandler</a><BR>
 <LI><a href="#[416]">lv_obj_get_style_prop</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[416]">lv_obj_get_style_prop</a><BR>
 <LI><a href="#[703]">event_send_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[703]">event_send_core</a><BR>
 <LI><a href="#[7de]">refresh_children_style</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7de]">refresh_children_style</a><BR>
 <LI><a href="#[629]">_lv_area_is_point_on</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[629]">_lv_area_is_point_on</a><BR>
 <LI><a href="#[67e]">apply_theme</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[67e]">apply_theme</a><BR>
 <LI><a href="#[7ab]">lv_obj_is_group_def</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7ab]">lv_obj_is_group_def</a><BR>
 <LI><a href="#[7aa]">lv_obj_construct</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7aa]">lv_obj_construct</a><BR>
 <LI><a href="#[82f]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55b]">__rw::__rw_throw(int, ...)</a><BR>
 <LI><a href="#[82d]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[55e]">__rw::__rw_allocate(unsigned, int)</a><BR>
 <LI><a href="#[20b]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20b]">_sys_exit</a><BR>
 <LI><a href="#[6ab]">lv_obj_move_children_by</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6ab]">lv_obj_move_children_by</a><BR>
 <LI><a href="#[732]">layout_update_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[732]">layout_update_core</a><BR>
 <LI><a href="#[620]">_etoa</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[621]">_ftoa</a><BR>
 <LI><a href="#[7ad]">obj_del_core</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7ad]">obj_del_core</a><BR>
 <LI><a href="#[74e]">show_error</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e6]">lv_draw_rect</a><BR>
 <LI><a href="#[6c8]">lv_draw_label</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e6]">lv_draw_rect</a><BR>
 <LI><a href="#[755]">lv_draw_line</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[6e6]">lv_draw_rect</a><BR>
 <LI><a href="#[7f2]">lv_refr_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7f2]">lv_refr_obj</a><BR>
 <LI><a href="#[7ee]">lv_refr_get_top_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7ee]">lv_refr_get_top_obj</a><BR>
 <LI><a href="#[730]">lv_indev_search_obj</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[730]">lv_indev_search_obj</a><BR>
 <LI><a href="#[727]">lv_obj_is_editable</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[727]">lv_obj_is_editable</a><BR>
 <LI><a href="#[84e]">void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[84e]">void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)</a><BR>
 <LI><a href="#[3b4]">T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b4]">T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const</a><BR>
 <LI><a href="#[822]">ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3b4]">T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const</a><BR>
 <LI><a href="#[826]">T1 ArduinoJson6184_11::VariantData::asIntegral&lang;int&rang;() const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ab]">ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)</a><BR>
 <LI><a href="#[3ac]">ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ac]">ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)</a><BR>
 <LI><a href="#[825]">T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3ad]">ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)</a><BR>
 <LI><a href="#[818]">bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[807]">bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)</a><BR>
 <LI><a href="#[814]">bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[807]">bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)</a><BR>
 <LI><a href="#[1bb]">exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[1bb]">exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[cd]">&lang;Func5&rang;</a> from locale.o(i.<Func5>) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[71]">ACC_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[41]">ADC1_2_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[5e]">ADC3_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[29]">BusFault_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[44]">CAN1_RX1_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[45]">CAN1_SCE_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[6e]">CAN2_RX0_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[6f]">CAN2_RX1_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[70]">CAN2_SCE_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[6d]">CAN2_TX_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[3a]">DMA1_Channel1_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[3b]">DMA1_Channel2_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[3c]">DMA1_Channel3_IRQHandler</a> from hal_display.o(i.DMA1_Channel3_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[3d]">DMA1_Channel4_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[3e]">DMA1_Channel5_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[3f]">DMA1_Channel6_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[40]">DMA1_Channel7_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[65]">DMA2_Channel1_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[66]">DMA2_Channel2_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[67]">DMA2_Channel3_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[68]">DMA2_Channel4_5_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[74]">DMA2_Channel6_7_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[2c]">DebugMon_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[35]">EXTI0_IRQHandler</a> from exti.o(i.EXTI0_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[57]">EXTI15_10_IRQHandler</a> from exti.o(i.EXTI15_10_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[36]">EXTI1_IRQHandler</a> from exti.o(i.EXTI1_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[37]">EXTI2_IRQHandler</a> from exti.o(i.EXTI2_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[38]">EXTI3_IRQHandler</a> from exti.o(i.EXTI3_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[39]">EXTI4_IRQHandler</a> from exti.o(i.EXTI4_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[46]">EXTI9_5_IRQHandler</a> from exti.o(i.EXTI9_5_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[33]">FLASH_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[27]">HardFault_Handler</a> from hal_faulthandle.o(.emb_text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[4f]">I2C1_ER_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[4e]">I2C1_EV_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[51]">I2C2_ER_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[50]">I2C2_EV_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[6b]">I2C3_ER_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[6a]">I2C3_EV_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[28]">MemManage_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[26]">NMI_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[30]">PVD_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[2d]">PendSV_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[34]">RCC_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[58]">RTCAlarm_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[32]">RTC_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[25]">Reset_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[69]">SDIO2_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[52]">SPI1_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[53]">SPI2_I2S2EXT_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[60]">SPI3_I2S3EXT_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[6c]">SPI4_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[2b]">SVC_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[2e]">SysTick_Handler</a> from delay.o(i.SysTick_Handler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[78]">SystemInit</a> from system_at32f4xx.o(i.SystemInit) referenced from startup_at32f403acgu7.o(.text)
 <LI><a href="#[31]">TAMPER_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[47]">TMR1_BRK_TMR9_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[4a]">TMR1_CC_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[48]">TMR1_OV_TMR10_IRQHandler</a> from timer.o(i.TMR1_OV_TMR10_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[49]">TMR1_TRG_COM_TMR11_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[4b]">TMR2_GLOBAL_IRQHandler</a> from timer.o(i.TMR2_GLOBAL_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[4c]">TMR3_GLOBAL_IRQHandler</a> from timer.o(i.TMR3_GLOBAL_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[4d]">TMR4_GLOBAL_IRQHandler</a> from timer.o(i.TMR4_GLOBAL_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[5f]">TMR5_GLOBAL_IRQHandler</a> from timer.o(i.TMR5_GLOBAL_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[63]">TMR6_GLOBAL_IRQHandler</a> from timer.o(i.TMR6_GLOBAL_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[64]">TMR7_GLOBAL_IRQHandler</a> from timer.o(i.TMR7_GLOBAL_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[5a]">TMR8_BRK_TMR12_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[5d]">TMR8_CC_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[5b]">TMR8_OV_TMR13_IRQHandler</a> from timer.o(i.TMR8_OV_TMR13_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[5c]">TMR8_TRG_COM_TMR14_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[61]">UART4_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[62]">UART5_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[76]">UART7_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[54]">USART1_IRQHandler</a> from hardwareserial.o(i.USART1_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[55]">USART2_IRQHandler</a> from hardwareserial.o(i.USART2_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[56]">USART3_IRQHandler</a> from hardwareserial.o(i.USART3_IRQHandler) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[75]">USART6_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[59]">USBWakeUp_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[42]">USB_HP_CAN1_TX_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[72]">USB_HP_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[43]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[73]">USB_LP_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[2a]">UsageFault_Handler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[2f]">WWDG_IRQHandler</a> from startup_at32f403acgu7.o(.text) referenced from startup_at32f403acgu7.o(RESET)
 <LI><a href="#[108]">App_Uninit()</a> from app.o(i._Z10App_Uninitv) referenced from main.o(i.main)
 <LI><a href="#[1d]">first_alloc(unsigned)</a> from new.o(i._Z11first_allocj) referenced 2 times from new.o(.data)
 <LI><a href="#[93]">fs_dir_open(_lv_fs_drv_t*, const char*)</a> from lv_port_fs_sdfat.o(i._Z11fs_dir_openP12_lv_fs_drv_tPKc) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[94]">fs_dir_read(_lv_fs_drv_t*, void*, char*)</a> from lv_port_fs_sdfat.o(i._Z11fs_dir_readP12_lv_fs_drv_tPvPc) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[9b]">disp_wait_cb(_lv_disp_drv_t*)</a> from lv_port_disp.o(i._Z12disp_wait_cbP14_lv_disp_drv_t) referenced from lv_port_disp.o(i._Z17lv_port_disp_initv)
 <LI><a href="#[9e]">encoder_read(_lv_indev_drv_t*, lv_indev_data_t*)</a> from lv_port_indev.o(i._Z12encoder_readP15_lv_indev_drv_tP15lv_indev_data_t) referenced from lv_port_indev.o(i._Z18lv_port_indev_initv)
 <LI><a href="#[92]">fs_dir_close(_lv_fs_drv_t*, void*)</a> from lv_port_fs_sdfat.o(i._Z12fs_dir_closeP12_lv_fs_drv_tPv) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[9a]">disp_flush_cb(_lv_disp_drv_t*, const lv_area_t*, lv_color16_t*)</a> from lv_port_disp.o(i._Z13disp_flush_cbP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t) referenced from lv_port_disp.o(i._Z17lv_port_disp_initv)
 <LI><a href="#[a2]">tone_TimerHandler()</a> from tone.o(i._Z17tone_TimerHandlerv) referenced from tone.o(i._Z4tonehj)
 <LI><a href="#[10d]">lv_obj_set_opa_scale(_lv_obj_t*, short)</a> from lv_obj_ext_func.o(i._Z20lv_obj_set_opa_scaleP9_lv_obj_ts) referenced from dialplateview.o(.constdata)
 <LI><a href="#[99]">disp_send_finish_callback()</a> from lv_port_disp.o(i._Z25disp_send_finish_callbackv) referenced from lv_port_disp.o(i._Z17lv_port_disp_initv)
 <LI><a href="#[8c]">fs_open(_lv_fs_drv_t*, const char*, unsigned char)</a> from lv_port_fs_sdfat.o(i._Z7fs_openP12_lv_fs_drv_tPKch) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[8e]">fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*)</a> from lv_port_fs_sdfat.o(i._Z7fs_readP12_lv_fs_drv_tPvS1_jPj) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[90]">fs_seek(_lv_fs_drv_t*, void*, unsigned, lv_fs_whence_t)</a> from lv_port_fs_sdfat.o(i._Z7fs_seekP12_lv_fs_drv_tPvj14lv_fs_whence_t) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[91]">fs_tell(_lv_fs_drv_t*, void*, unsigned*)</a> from lv_port_fs_sdfat.o(i._Z7fs_tellP12_lv_fs_drv_tPvPj) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[8d]">fs_close(_lv_fs_drv_t*, void*)</a> from lv_port_fs_sdfat.o(i._Z8fs_closeP12_lv_fs_drv_tPv) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[8b]">fs_ready(_lv_fs_drv_t*)</a> from lv_port_fs_sdfat.o(i._Z8fs_readyP12_lv_fs_drv_t) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[8f]">fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*)</a> from lv_port_fs_sdfat.o(i._Z8fs_writeP12_lv_fs_drv_tPvPKvjPj) referenced from lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
 <LI><a href="#[122]">AppFactory::CreatePage(const char*)</a> from appfactory.o(i._ZN10AppFactory10CreatePageEPKc) referenced from appfactory.o(.constdata__ZTV10AppFactory)
 <LI><a href="#[d4]">DataCenter::~DataCenter()</a> from datacenter.o(i._ZN10DataCenterD1Ev) referenced from dataproc.o(i.__sti___12_DataProc_cpp_e3929772)
 <LI><a href="#[97]">Recorder_t::~Recorder_t()</a> from dp_recorder.o(i._ZN10Recorder_tD1Ev) referenced from dp_recorder.o(i._Z17_DP_Recorder_InitP7Account)
 <LI><a href="#[a5]">PageManager::onRootDragEvent(_lv_event_t*)</a> from pm_drag.o(i._ZN11PageManager15onRootDragEventEP11_lv_event_t) referenced from pm_drag.o(i._ZN11PageManager14RootEnableDragEP9_lv_obj_t)
 <LI><a href="#[ad]">PageManager::onRootAnimFinish(_lv_anim_t*)</a> from pm_drag.o(i._ZN11PageManager16onRootAnimFinishEP10_lv_anim_t) referenced from pm_drag.o(i._ZN11PageManager15onRootDragEventEP11_lv_event_t)
 <LI><a href="#[ac]">PageManager::onRootAsyncLeave(void*)</a> from pm_drag.o(i._ZN11PageManager16onRootAsyncLeaveEPv) referenced from pm_drag.o(i._ZN11PageManager15onRootDragEventEP11_lv_event_t)
 <LI><a href="#[ae]">PageManager::onSwitchAnimFinish(_lv_anim_t*)</a> from pm_router.o(i._ZN11PageManager18onSwitchAnimFinishEP10_lv_anim_t) referenced from pm_router.o(i._ZN11PageManager16SwitchAnimCreateEP8PageBase)
 <LI><a href="#[a3]">PageManager::~PageManager()</a> from pm_base.o(i._ZN11PageManagerD1Ev) referenced from app.o(i._Z8App_Initv)
 <LI><a href="#[127]">Adafruit_GFX::startWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[127]">Adafruit_GFX::startWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[128]">Adafruit_GFX::writePixel(short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[128]">Adafruit_GFX::writePixel(short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[12d]">Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[129]">Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[129]">Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[12a]">Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[12a]">Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[123]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[123]">Adafruit_GFX::write(unsigned char)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[12c]">Adafruit_GFX::endWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[12c]">Adafruit_GFX::endWrite()</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[12e]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[12e]">Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[12b]">Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[12b]">Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</a> from adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[d7]">TrackFilter_t::~TrackFilter_t()</a> from dp_trackfilter.o(i._ZN13TrackFilter_tD1Ev) referenced from dp_trackfilter.o(i.__sti___18_DP_TrackFilter_cpp_a5ac639c)
 <LI><a href="#[131]">HardwareSerial::read()</a> from hardwareserial.o(i._ZN14HardwareSerial4readEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[12f]">HardwareSerial::write(unsigned char)</a> from hardwareserial.o(i._ZN14HardwareSerial5writeEh) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[130]">HardwareSerial::available()</a> from hardwareserial.o(i._ZN14HardwareSerial9availableEv) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[d5]">StorageService::~StorageService()</a> from storageservice.o(i._ZN14StorageServiceD1Ev) referenced from dp_storage.o(i.__sti___14_DP_Storage_cpp_d0a046f3)
 <LI><a href="#[135]">Adafruit_ST7789::fillScreen(unsigned short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778910fillScreenEt) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[133]">Adafruit_ST7789::setRotation(unsigned char)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778911setRotationEh) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[134]">Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778913drawFastVLineEssst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[136]">Adafruit_ST7789::setAddrWindow(short, short, short, short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST778913setAddrWindowEssss) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[132]">Adafruit_ST7789::drawPixel(short, short, unsigned short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST77899drawPixelEsst) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[137]">Adafruit_ST7789::setCursor(short, short)</a> from adafruit_st7789.o(i._ZN15Adafruit_ST77899setCursorEss) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[d6]">ResourceManager::~ResourceManager()</a> from resourcemanager.o(i._ZN15ResourceManagerD1Ev) referenced from resourcepool.o(i.__sti___16_ResourcePool_cpp_3959e929)
 <LI><a href="#[ba]">[local to HAL_cpp]::HAL_InterrputUpdate()</a> from hal.o(i._ZN28_INTERNAL_7_HAL_cpp_dbacc59d19HAL_InterrputUpdateEv) referenced from hal.o(i._ZN3HAL8HAL_InitEv)
 <LI><a href="#[85]">[local to DP_GPS_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_gps.o(i._ZN32_INTERNAL_10_DP_GPS_cpp_3fe63fd77onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_gps.o(i._Z12_DP_GPS_InitP7Account)
 <LI><a href="#[88]">[local to DP_Clock_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_clock.o(i._ZN34_INTERNAL_12_DP_Clock_cpp_484d96a67onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_clock.o(i._Z14_DP_Clock_InitP7Account)
 <LI><a href="#[89]">[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_power.o(i._ZN34_INTERNAL_12_DP_Power_cpp_e593e1547onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_power.o(i._Z14_DP_Power_InitP7Account)
 <LI><a href="#[8a]">[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_tzconv.o(i._ZN35_INTERNAL_13_DP_TzConv_cpp_8dd0f0727onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_tzconv.o(i._Z15_DP_TzConv_InitP7Account)
 <LI><a href="#[af]">[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)</a> from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c216StatusBar_UpdateEP11_lv_timer_t) referenced from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c216StatusBar_CreateEP9_lv_obj_t)
 <LI><a href="#[b2]">[local to StatusBar_cpp]::StatusBar_ConBattSetOpa(_lv_obj_t*, int)</a> from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c223StatusBar_ConBattSetOpaEP9_lv_obj_ti) referenced from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c228StatusBar_onAnimHeightFinishEP10_lv_anim_t)
 <LI><a href="#[b3]">[local to StatusBar_cpp]::StatusBar_onAnimOpaFinish(_lv_anim_t*)</a> from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c225StatusBar_onAnimOpaFinishEP10_lv_anim_t) referenced from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c228StatusBar_onAnimHeightFinishEP10_lv_anim_t)
 <LI><a href="#[b1]">[local to StatusBar_cpp]::StatusBar_onAnimHeightFinish(_lv_anim_t*)</a> from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c228StatusBar_onAnimHeightFinishEP10_lv_anim_t) referenced from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c220StatusBar_AnimCreateEP9_lv_obj_t)
 <LI><a href="#[9c]">[local to StatusBar_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c27onEventEP7AccountPNS0_12EventParam_tE) referenced from statusbar.o(i._Z18_DP_StatusBar_InitP7Account)
 <LI><a href="#[95]">[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_storage.o(i._ZN36_INTERNAL_14_DP_Storage_cpp_d0a046f37onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_storage.o(i._Z16_DP_Storage_InitP7Account)
 <LI><a href="#[96]">[local to DP_Storage_cpp]::onSDEvent(bool)</a> from dp_storage.o(i._ZN36_INTERNAL_14_DP_Storage_cpp_d0a046f39onSDEventEb) referenced from dp_storage.o(i._Z16_DP_Storage_InitP7Account)
 <LI><a href="#[98]">[local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_recorder.o(i._ZN37_INTERNAL_15_DP_Recorder_cpp_4f9bfee87onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_recorder.o(i._Z17_DP_Recorder_InitP7Account)
 <LI><a href="#[b7]">[local to HAL_Encoder_cpp]::Encoder_PushHandler(ButtonEvent*, int)</a> from hal_encoder.o(i._ZN37_INTERNAL_15_HAL_Encoder_cpp_1362964a19Encoder_PushHandlerEP11ButtonEventi) referenced from hal_encoder.o(i._ZN3HAL12Encoder_InitEv)
 <LI><a href="#[b5]">[local to HAL_Encoder_cpp]::Encoder_EventHandler_A()</a> from hal_encoder.o(i._ZN37_INTERNAL_15_HAL_Encoder_cpp_1362964a22Encoder_EventHandler_AEv) referenced from hal_encoder.o(i._ZN3HAL12Encoder_InitEv)
 <LI><a href="#[b6]">[local to HAL_Encoder_cpp]::Encoder_EventHandler_B()</a> from hal_encoder.o(i._ZN37_INTERNAL_15_HAL_Encoder_cpp_1362964a22Encoder_EventHandler_BEv) referenced from hal_encoder.o(i._ZN3HAL12Encoder_InitEv)
 <LI><a href="#[b9]">[local to HAL_SD_CARD_cpp]::SD_GetDateTime(unsigned short*, unsigned short*)</a> from hal_sd_card.o(i._ZN37_INTERNAL_15_HAL_SD_CARD_cpp_8fe448c014SD_GetDateTimeEPtS0_) referenced from hal_sd_card.o(i._ZN3HAL7SD_InitEv)
 <LI><a href="#[9d]">[local to DP_SysConfig_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_sysconfig.o(i._ZN38_INTERNAL_16_DP_SysConfig_cpp_fa9ade947onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_sysconfig.o(i._Z18_DP_SysConfig_InitP7Account)
 <LI><a href="#[82]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[b8]">[local to HAL_Backlight_cpp]::Backlight_AnimCallback(void*, int)</a> from hal_backlight.o(i._ZN39_INTERNAL_17_HAL_Backlight_cpp_fb36bc6522Backlight_AnimCallbackEPvi) referenced from hal_backlight.o(i._ZN3HAL20Backlight_SetGradualEtt)
 <LI><a href="#[9f]">[local to DP_MusicPlayer_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_musicplayer.o(i._ZN40_INTERNAL_18_DP_MusicPlayer_cpp_a05c14dc7onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_musicplayer.o(i._Z20_DP_MusicPlayer_InitP7Account)
 <LI><a href="#[a0]">[local to DP_SportStatus_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_sportstatus.o(i._ZN40_INTERNAL_18_DP_SportStatus_cpp_a5c82bb67onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_sportstatus.o(i._Z20_DP_SportStatus_InitP7Account)
 <LI><a href="#[a1]">[local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*)</a> from dp_trackfilter.o(i._ZN40_INTERNAL_18_DP_TrackFilter_cpp_a5ac639c7onEventEP7AccountPNS0_12EventParam_tE) referenced from dp_trackfilter.o(i._Z20_DP_TrackFilter_InitP7Account)
 <LI><a href="#[13c]">Page::SystemInfos::onViewLoad()</a> from systeminfos.o(i._ZN4Page11SystemInfos10onViewLoadEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[bc]">Page::SystemInfos::onTimerUpdate(_lv_timer_t*)</a> from systeminfos.o(i._ZN4Page11SystemInfos13onTimerUpdateEP11_lv_timer_t) referenced from systeminfos.o(i._ZN4Page11SystemInfos16onViewWillAppearEv)
 <LI><a href="#[13d]">Page::SystemInfos::onViewDidLoad()</a> from systeminfos.o(i._ZN4Page11SystemInfos13onViewDidLoadEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[13f]">Page::SystemInfos::onViewDidAppear()</a> from systeminfos.o(i._ZN4Page11SystemInfos15onViewDidAppearEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[142]">Page::SystemInfos::onViewDidUnload()</a> from systeminfos.o(i._ZN4Page11SystemInfos15onViewDidUnloadEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[13e]">Page::SystemInfos::onViewWillAppear()</a> from systeminfos.o(i._ZN4Page11SystemInfos16onViewWillAppearEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[13b]">Page::SystemInfos::onCustomAttrConfig()</a> from systeminfos.o(i._ZN4Page11SystemInfos18onCustomAttrConfigEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[141]">Page::SystemInfos::onViewDidDisappear()</a> from systeminfos.o(i._ZN4Page11SystemInfos18onViewDidDisappearEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[140]">Page::SystemInfos::onViewWillDisappear()</a> from systeminfos.o(i._ZN4Page11SystemInfos19onViewWillDisappearEv) referenced from systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
 <LI><a href="#[bb]">Page::SystemInfos::onEvent(_lv_event_t*)</a> from systeminfos.o(i._ZN4Page11SystemInfos7onEventEP11_lv_event_t) referenced from systeminfos.o(i._ZN4Page11SystemInfos11AttachEventEP9_lv_obj_t)
 <LI><a href="#[bd]">Page::LiveMapModel::onEvent(Account*, Account::EventParam_t*)</a> from livemapmodel.o(i._ZN4Page12LiveMapModel7onEventEP7AccountPNS1_12EventParam_tE) referenced from livemapmodel.o(i._ZN4Page12LiveMapModel4InitEv)
 <LI><a href="#[be]">Page::DialplateModel::onEvent(Account*, Account::EventParam_t*)</a> from dialplatemodel.o(i._ZN4Page14DialplateModel7onEventEP7AccountPNS1_12EventParam_tE) referenced from dialplatemodel.o(i._ZN4Page14DialplateModel4InitEv)
 <LI><a href="#[bf]">Page::SystemInfosView::onFocus(_lv_group_t*)</a> from systeminfosview.o(i._ZN4Page15SystemInfosView7onFocusEP11_lv_group_t) referenced from systeminfosview.o(i._ZN4Page15SystemInfosView10Group_InitEv)
 <LI><a href="#[144]">Page::LiveMap::onViewLoad()</a> from livemap.o(i._ZN4Page7LiveMap10onViewLoadEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[145]">Page::LiveMap::onViewDidLoad()</a> from livemap.o(i._ZN4Page7LiveMap13onViewDidLoadEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[147]">Page::LiveMap::onViewDidAppear()</a> from livemap.o(i._ZN4Page7LiveMap15onViewDidAppearEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[14a]">Page::LiveMap::onViewDidUnload()</a> from livemap.o(i._ZN4Page7LiveMap15onViewDidUnloadEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[c2]">Page::LiveMap::onTrackLineEvent(TrackLineFilter*, TrackLineFilter::Event_t*)</a> from livemap.o(i._ZN4Page7LiveMap16onTrackLineEventEP15TrackLineFilterPNS1_7Event_tE) referenced from livemap.o(i._ZN4Page7LiveMap10onViewLoadEv)
 <LI><a href="#[146]">Page::LiveMap::onViewWillAppear()</a> from livemap.o(i._ZN4Page7LiveMap16onViewWillAppearEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[143]">Page::LiveMap::onCustomAttrConfig()</a> from livemap.o(i._ZN4Page7LiveMap18onCustomAttrConfigEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[149]">Page::LiveMap::onViewDidDisappear()</a> from livemap.o(i._ZN4Page7LiveMap18onViewDidDisappearEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[148]">Page::LiveMap::onViewWillDisappear()</a> from livemap.o(i._ZN4Page7LiveMap19onViewWillDisappearEv) referenced from livemap.o(.constdata__ZTVN4Page7LiveMapE)
 <LI><a href="#[c3]">Page::LiveMap::onEvent(_lv_event_t*)</a> from livemap.o(i._ZN4Page7LiveMap7onEventEP11_lv_event_t) referenced from livemap.o(i._ZN4Page7LiveMap11AttachEventEP9_lv_obj_t)
 <LI><a href="#[14c]">Page::Startup::onViewLoad()</a> from startup.o(i._ZN4Page7Startup10onViewLoadEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[14d]">Page::Startup::onViewDidLoad()</a> from startup.o(i._ZN4Page7Startup13onViewDidLoadEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[14f]">Page::Startup::onViewDidAppear()</a> from startup.o(i._ZN4Page7Startup15onViewDidAppearEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[152]">Page::Startup::onViewDidUnload()</a> from startup.o(i._ZN4Page7Startup15onViewDidUnloadEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[14e]">Page::Startup::onViewWillAppear()</a> from startup.o(i._ZN4Page7Startup16onViewWillAppearEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[14b]">Page::Startup::onCustomAttrConfig()</a> from startup.o(i._ZN4Page7Startup18onCustomAttrConfigEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[151]">Page::Startup::onViewDidDisappear()</a> from startup.o(i._ZN4Page7Startup18onViewDidDisappearEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[150]">Page::Startup::onViewWillDisappear()</a> from startup.o(i._ZN4Page7Startup19onViewWillDisappearEv) referenced from startup.o(.constdata__ZTVN4Page7StartupE)
 <LI><a href="#[c6]">Page::Startup::onTimer(_lv_timer_t*)</a> from startup.o(i._ZN4Page7Startup7onTimerEP11_lv_timer_t) referenced from startup.o(i._ZN4Page7Startup10onViewLoadEv)
 <LI><a href="#[154]">Page::Template::onViewLoad()</a> from template.o(i._ZN4Page8Template10onViewLoadEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[c8]">Page::Template::onTimerUpdate(_lv_timer_t*)</a> from template.o(i._ZN4Page8Template13onTimerUpdateEP11_lv_timer_t) referenced from template.o(i._ZN4Page8Template16onViewWillAppearEv)
 <LI><a href="#[155]">Page::Template::onViewDidLoad()</a> from template.o(i._ZN4Page8Template13onViewDidLoadEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[157]">Page::Template::onViewDidAppear()</a> from template.o(i._ZN4Page8Template15onViewDidAppearEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[15a]">Page::Template::onViewDidUnload()</a> from template.o(i._ZN4Page8Template15onViewDidUnloadEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[156]">Page::Template::onViewWillAppear()</a> from template.o(i._ZN4Page8Template16onViewWillAppearEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[153]">Page::Template::onCustomAttrConfig()</a> from template.o(i._ZN4Page8Template18onCustomAttrConfigEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[159]">Page::Template::onViewDidDisappear()</a> from template.o(i._ZN4Page8Template18onViewDidDisappearEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[158]">Page::Template::onViewWillDisappear()</a> from template.o(i._ZN4Page8Template19onViewWillDisappearEv) referenced from template.o(.constdata__ZTVN4Page8TemplateE)
 <LI><a href="#[c7]">Page::Template::onEvent(_lv_event_t*)</a> from template.o(i._ZN4Page8Template7onEventEP11_lv_event_t) referenced from template.o(i._ZN4Page8Template11AttachEventEP9_lv_obj_t)
 <LI><a href="#[15c]">Page::Dialplate::onViewLoad()</a> from dialplate.o(i._ZN4Page9Dialplate10onViewLoadEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[cb]">Page::Dialplate::onTimerUpdate(_lv_timer_t*)</a> from dialplate.o(i._ZN4Page9Dialplate13onTimerUpdateEP11_lv_timer_t) referenced from dialplate.o(i._ZN4Page9Dialplate15onViewDidAppearEv)
 <LI><a href="#[15d]">Page::Dialplate::onViewDidLoad()</a> from dialplate.o(i._ZN4Page9Dialplate13onViewDidLoadEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[15f]">Page::Dialplate::onViewDidAppear()</a> from dialplate.o(i._ZN4Page9Dialplate15onViewDidAppearEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[162]">Page::Dialplate::onViewDidUnload()</a> from dialplate.o(i._ZN4Page9Dialplate15onViewDidUnloadEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[15e]">Page::Dialplate::onViewWillAppear()</a> from dialplate.o(i._ZN4Page9Dialplate16onViewWillAppearEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[15b]">Page::Dialplate::onCustomAttrConfig()</a> from dialplate.o(i._ZN4Page9Dialplate18onCustomAttrConfigEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[161]">Page::Dialplate::onViewDidDisappear()</a> from dialplate.o(i._ZN4Page9Dialplate18onViewDidDisappearEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[160]">Page::Dialplate::onViewWillDisappear()</a> from dialplate.o(i._ZN4Page9Dialplate19onViewWillDisappearEv) referenced from dialplate.o(.constdata__ZTVN4Page9DialplateE)
 <LI><a href="#[ca]">Page::Dialplate::onEvent(_lv_event_t*)</a> from dialplate.o(i._ZN4Page9Dialplate7onEventEP11_lv_event_t) referenced from dialplate.o(i._ZN4Page9Dialplate11AttachEventEP9_lv_obj_t)
 <LI><a href="#[166]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[166]">__rw::__rw_facet_base::_C_initfacet(const std::locale&)</a> from char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[10b]">__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</a> from rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj) referenced from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
 <LI><a href="#[d3]">__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</a> from rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev) referenced from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
 <LI><a href="#[d1]">__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</a> from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev) referenced from messages.o(i._ZSt13__rw_get_catsv)
 <LI><a href="#[24]">__rw::__rw_throw_exception_noex(int, char*)</a> from rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc) referenced 2 times from rwthrowproc_noex.o(.data)
 <LI><a href="#[124]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[124]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[124]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[124]">Print::write(const char*)</a> from print.o(i._ZN5Print5writeEPKc) referenced from rt_sys.o(.constdata__ZTV6SdFile)
 <LI><a href="#[125]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[125]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from hardwareserial.o(.constdata__ZTV14HardwareSerial)
 <LI><a href="#[125]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
 <LI><a href="#[125]">Print::write(const void*, unsigned)</a> from print.o(i._ZN5Print5writeEPKvj) referenced from rt_sys.o(.constdata__ZTV6SdFile)
 <LI><a href="#[163]">Filter::Hysteresis&lang;short&rang;::GetNext(short)</a> from dp_power.o(t._ZN6Filter10HysteresisIsE7GetNextEs) referenced from dp_power.o(.constdata__ZTVN6Filter10HysteresisIsEE)
 <LI><a href="#[164]">Filter::MedianQueue&lang;short, (unsigned)10&rang;::GetNext(short)</a> from dp_power.o(t._ZN6Filter11MedianQueueIsLj10EE7GetNextEs) referenced from dp_power.o(.constdata__ZTVN6Filter11MedianQueueIsLj10EEE)
 <LI><a href="#[ce]">Account::TimerCallbackHandler(_lv_timer_t*)</a> from account.o(i._ZN7Account20TimerCallbackHandlerEP11_lv_timer_t) referenced from account.o(i._ZN7Account14SetTimerPeriodEj)
 <LI><a href="#[13a]">TwoWire::begin(unsigned char)</a> from wire.o(i._ZN7TwoWire5beginEh) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[139]">TwoWire::process()</a> from wire.o(i._ZN7TwoWire7processEv) referenced from wire.o(.constdata__ZTV7TwoWire)
 <LI><a href="#[d8]">TwoWire::~TwoWire()</a> from wire.o(i._ZN7TwoWireD1Ev) referenced from wire.o(i.__sti___8_Wire_cpp_928ee5ff)
 <LI><a href="#[138]">PrintFile::write(unsigned char)</a> from rt_sys.o(i._ZN9PrintFile5writeEh) referenced from rt_sys.o(.constdata__ZTV6SdFile)
 <LI><a href="#[111]">ArduinoJson6184_11::DeserializationError::safeBoolHelper() const</a> from storageservice.o(i._ZNK18ArduinoJson6184_1120DeserializationError14safeBoolHelperEv) referenced from storageservice.o(.constdata)
 <LI><a href="#[16b]">std::__rw_exception::what() const</a> from rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[171]">std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[170]">std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</a> from rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[cc]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
 <LI><a href="#[cc]">std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</a> from char.o(t._ZNSsD1Ev) referenced from locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
 <LI><a href="#[168]">std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</a> from char.o(i._ZNSt12ctype_bynameIcED0Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[167]">std::ctype_byname&lang;char&rang;::~ctype_byname()</a> from char.o(i._ZNSt12ctype_bynameIcED1Ev) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[16a]">std::__rw_exception::~__rw_exception()</a> from rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
 <LI><a href="#[10a]">std::__rw_open_cat_data::__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataC1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[109]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
 <LI><a href="#[109]">std::__rw_open_cat_data::~__rw_open_cat_data()</a> from messages.o(i._ZNSt18__rw_open_cat_dataD1Ev) referenced from messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
 <LI><a href="#[169]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt12ctype_bynameIcE)
 <LI><a href="#[169]">std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</a> from char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[16d]">std::ctype&lang;char&rang;::~ctype__deallocating()</a> from char.o(i._ZNSt5ctypeIcED0Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[16c]">std::ctype&lang;char&rang;::~ctype()</a> from char.o(i._ZNSt5ctypeIcED1Ev) referenced from char.o(.constdata__ZTVSt5ctypeIcE)
 <LI><a href="#[165]">std::locale::facet::~facet__deallocating()</a> from rwstdexcept.o(i._ZNSt6locale5facetD0Ev) referenced from rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
 <LI><a href="#[d0]">std::locale::~locale()</a> from locale.o(i._ZNSt6localeD1Ev) referenced from locale.o(i._ZNSt6locale7classicEv)
 <LI><a href="#[16f]">std::messages&lang;char&rang;::~messages__deallocating()</a> from rwstdexcept.o(i._ZNSt8messagesIcED0Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[16e]">std::messages&lang;char&rang;::~messages()</a> from rwstdexcept.o(i._ZNSt8messagesIcED1Ev) referenced from rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
 <LI><a href="#[86]">_DP_IMU_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*)</a> from dp_imu.o(i._ZZ12_DP_IMU_InitP7AccountENUlPvS1_E_4_FUNES1_S1_) referenced from dp_imu.o(i._Z12_DP_IMU_InitP7Account)
 <LI><a href="#[87]">_DP_MAG_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*)</a> from dp_mag.o(i._ZZ12_DP_MAG_InitP7AccountENUlPvS1_E_4_FUNES1_S1_) referenced from dp_mag.o(i._Z12_DP_MAG_InitP7Account)
 <LI><a href="#[a9]">PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 2)]::_FUN(void*)</a> from pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPvE0_4_FUNES2_) referenced from pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
 <LI><a href="#[ab]">PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 3)]::_FUN(void*)</a> from pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPvE1_4_FUNES2_) referenced from pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
 <LI><a href="#[a7]">PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 1)]::_FUN(void*)</a> from pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPvE_4_FUNES2_) referenced from pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
 <LI><a href="#[a8]">PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 2)]::_FUN(void*, int)</a> from pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPviE0_4_FUNES2_i) referenced from pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
 <LI><a href="#[aa]">PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 3)]::_FUN(void*, int)</a> from pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPviE1_4_FUNES2_i) referenced from pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
 <LI><a href="#[a6]">PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int)</a> from pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPviE_4_FUNES2_i) referenced from pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
 <LI><a href="#[b0]">[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int)</a> from statusbar.o(i._ZZN35_INTERNAL_13_StatusBar_cpp_381581c220StatusBar_AnimCreateEP9_lv_obj_tENUlPviE_4_FUNES2_i) referenced from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c220StatusBar_AnimCreateEP9_lv_obj_t)
 <LI><a href="#[b4]">HAL::Audio_Init()::[lambda(unsigned, unsigned short) (instance 1)]::_FUN(unsigned, unsigned short)</a> from hal_audio.o(i._ZZN3HAL10Audio_InitEvENUljtE_4_FUNEjt) referenced from hal_audio.o(i._ZN3HAL10Audio_InitEv)
 <LI><a href="#[c1]">Page::LiveMap::onViewLoad()::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)</a> from livemap.o(i._ZZN4Page7LiveMap10onViewLoadEvENUlP16TrackPointFilterPKNS1_7Point_tEE_4_FUNES2_S5_) referenced from livemap.o(i._ZN4Page7LiveMap10onViewLoadEv)
 <LI><a href="#[c4]">Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)</a> from livemap.o(i._ZZN4Page7LiveMap15TrackLineReloadEPKN15TrackLineFilter6Area_tEiiENUlP16TrackPointFilterPKNS5_7Point_tEE_4_FUNES6_S9_) referenced from livemap.o(i._ZN4Page7LiveMap15TrackLineReloadEPKN15TrackLineFilter6Area_tEii)
 <LI><a href="#[c5]">Page::LiveMap::onViewDidAppear()::[lambda(_lv_timer_t*) (instance 1)]::_FUN(_lv_timer_t*)</a> from livemap.o(i._ZZN4Page7LiveMap15onViewDidAppearEvENUlP11_lv_timer_tE_4_FUNES2_) referenced from livemap.o(i._ZN4Page7LiveMap15onViewDidAppearEv)
 <LI><a href="#[d2]">operator delete[] (void*)</a> from new.o(i._ZdaPv) referenced from cxa_vec_new.o(i.__cxa_vec_new)
 <LI><a href="#[126]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
 <LI><a href="#[182]">__main</a> from __main.o(!!!main) referenced from startup_at32f403acgu7.o(.text)
 <LI><a href="#[180]">__sti___10_locale_cpp_ff99fc7b</a> from locale.o(i.__sti___10_locale_cpp_ff99fc7b) referenced from locale.o(.init_array)
 <LI><a href="#[181]">__sti___10_rwcats_cpp_64e8068e</a> from rwcats.o(i.__sti___10_rwcats_cpp_64e8068e) referenced from rwcats.o(.init_array)
 <LI><a href="#[179]">__sti___11_HAL_GPS_cpp_3487eba5</a> from hal_gps.o(i.__sti___11_HAL_GPS_cpp_3487eba5) referenced from hal_gps.o(.init_array)
 <LI><a href="#[17a]">__sti___11_HAL_MAG_cpp_60ef128f</a> from hal_mag.o(i.__sti___11_HAL_MAG_cpp_60ef128f) referenced from hal_mag.o(.init_array)
 <LI><a href="#[172]">__sti___12_DataProc_cpp_e3929772</a> from dataproc.o(i.__sti___12_DataProc_cpp_e3929772) referenced from dataproc.o(.init_array)
 <LI><a href="#[176]">__sti___13_HAL_Audio_cpp_0a059262</a> from hal_audio.o(i.__sti___13_HAL_Audio_cpp_0a059262) referenced from hal_audio.o(.init_array)
 <LI><a href="#[173]">__sti___14_DP_Storage_cpp_d0a046f3</a> from dp_storage.o(i.__sti___14_DP_Storage_cpp_d0a046f3) referenced from dp_storage.o(.init_array)
 <LI><a href="#[177]">__sti___15_HAL_Display_cpp_6b788b14</a> from hal_display.o(i.__sti___15_HAL_Display_cpp_6b788b14) referenced from hal_display.o(.init_array)
 <LI><a href="#[178]">__sti___15_HAL_Encoder_cpp_1362964a</a> from hal_encoder.o(i.__sti___15_HAL_Encoder_cpp_1362964a) referenced from hal_encoder.o(.init_array)
 <LI><a href="#[17b]">__sti___15_HAL_SD_CARD_cpp_8fe448c0</a> from hal_sd_card.o(i.__sti___15_HAL_SD_CARD_cpp_8fe448c0) referenced from hal_sd_card.o(.init_array)
 <LI><a href="#[175]">__sti___16_ResourcePool_cpp_3959e929</a> from resourcepool.o(i.__sti___16_ResourcePool_cpp_3959e929) referenced from resourcepool.o(.init_array)
 <LI><a href="#[174]">__sti___18_DP_TrackFilter_cpp_a5ac639c</a> from dp_trackfilter.o(i.__sti___18_DP_TrackFilter_cpp_a5ac639c) referenced from dp_trackfilter.o(.init_array)
 <LI><a href="#[17c]">__sti___18_HardwareSerial_cpp_5d0e368d</a> from hardwareserial.o(i.__sti___18_HardwareSerial_cpp_5d0e368d) referenced from hardwareserial.o(.init_array)
 <LI><a href="#[17d]">__sti___7_SPI_cpp_8bca9eee</a> from spi.o(i.__sti___7_SPI_cpp_8bca9eee) referenced from spi.o(.init_array)
 <LI><a href="#[17e]">__sti___8_Wire_cpp_928ee5ff</a> from wire.o(i.__sti___8_Wire_cpp_928ee5ff) referenced from wire.o(.init_array)
 <LI><a href="#[17f]">__sti___8_char_cpp_a3dc957a</a> from char.o(i.__sti___8_char_cpp_a3dc957a) referenced from char.o(.init_array)
 <LI><a href="#[7a]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[f3]">_lv_disp_refr_timer</a> from lv_refr.o(i._lv_disp_refr_timer) referenced from lv_hal_disp.o(i.lv_disp_drv_register)
 <LI><a href="#[f9]">_lv_ll_get_head</a> from lv_ll.o(i._lv_ll_get_head) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[f8]">_lv_ll_get_next</a> from lv_ll.o(i._lv_ll_get_next) referenced from lv_group.o(i.lv_group_focus_next)
 <LI><a href="#[fa]">_lv_ll_get_prev</a> from lv_ll.o(i._lv_ll_get_prev) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[fb]">_lv_ll_get_tail</a> from lv_ll.o(i._lv_ll_get_tail) referenced from lv_group.o(i.lv_group_focus_prev)
 <LI><a href="#[106]">_out_buffer</a> from lv_printf.o(i._out_buffer) referenced from lv_printf.o(i.lv_snprintf)
 <LI><a href="#[106]">_out_buffer</a> from lv_printf.o(i._out_buffer) referenced from lv_printf.o(i.lv_vsnprintf)
 <LI><a href="#[e1]">_out_null</a> from lv_printf.o(i._out_null) referenced from lv_printf.o(i._vsnprintf)
 <LI><a href="#[7d]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[81]">_sbackspace</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[7e]">_scanf_char_input</a> from scanf_char.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[80]">_sgetc</a> from _sgetc.o(.text) referenced from sscanf.o(.text)
 <LI><a href="#[7b]">_snputc</a> from _snputc.o(.text) referenced 3 times from c89vsnprintf.o(.text)
 <LI><a href="#[7c]">_sputc</a> from _sputc.o(.text) referenced from __2sprintf.o(.text)
 <LI><a href="#[d9]">anim_timer</a> from lv_anim.o(i.anim_timer) referenced from lv_anim.o(i._lv_anim_core_init)
 <LI><a href="#[e9]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[e9]">color_blend_true_color_additive</a> from lv_draw_blend.o(i.color_blend_true_color_additive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[e8]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.fill_blended)
 <LI><a href="#[e8]">color_blend_true_color_subtractive</a> from lv_draw_blend.o(i.color_blend_true_color_subtractive) referenced from lv_draw_blend.o(i.map_blended)
 <LI><a href="#[107]">default_walker</a> from lv_tlsf.o(i.default_walker) referenced from lv_tlsf.o(i.lv_tlsf_walk_pool)
 <LI><a href="#[77]">extend_SRAM</a> from extend_sram.o(i.extend_SRAM) referenced from startup_at32f403acgu7.o(.text)
 <LI><a href="#[101]">fade_anim_cb</a> from lv_obj_style.o(i.fade_anim_cb) referenced from lv_obj_style.o(i.lv_obj_fade_in)
 <LI><a href="#[101]">fade_anim_cb</a> from lv_obj_style.o(i.fade_anim_cb) referenced from lv_obj_style.o(i.lv_obj_fade_out)
 <LI><a href="#[102]">fade_in_anim_ready</a> from lv_obj_style.o(i.fade_in_anim_ready) referenced from lv_obj_style.o(i.lv_obj_fade_in)
 <LI><a href="#[f6]">flex_update</a> from lv_flex.o(i.flex_update) referenced from lv_flex.o(i.lv_flex_init)
 <LI><a href="#[83]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[f7]">grid_update</a> from lv_grid.o(i.grid_update) referenced from lv_grid.o(i.lv_grid_init)
 <LI><a href="#[7f]">isspace</a> from isspace.o(.text) referenced from scanf_char.o(.text)
 <LI><a href="#[ed]">kern_pair_16_compare</a> from lv_font_fmt_txt.o(i.kern_pair_16_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[ee]">kern_pair_8_compare</a> from lv_font_fmt_txt.o(i.kern_pair_8_compare) referenced from lv_font_fmt_txt.o(i.get_kern_value)
 <LI><a href="#[c9]">lv_anim_path_bounce</a> from lv_anim.o(i.lv_anim_path_bounce) referenced from template.o(i._ZN4Page8Template18onCustomAttrConfigEv)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced 8 times from startupview.o(.constdata)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from app.o(i._Z8App_Initv)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from pm_base.o(i._ZN11PageManagerC1EP11PageFactory)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c216StatusBar_CreateEP9_lv_obj_t)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from hal_backlight.o(i._ZN3HAL20Backlight_SetGradualEtt)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from livemapview.o(i._ZN4Page11LiveMapView15ZoomCtrl_CreateEP9_lv_obj_t)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from dialplateview.o(i._ZN4Page13DialplateView10Btn_CreateEP9_lv_obj_tPKvs)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from startup.o(i._ZN4Page7Startup18onCustomAttrConfigEv)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from dialplate.o(i._ZN4Page9Dialplate18onCustomAttrConfigEv)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from statusbar.o(i._ZN9StatusBar6AppearEb)
 <LI><a href="#[a4]">lv_anim_path_ease_out</a> from lv_anim.o(i.lv_anim_path_ease_out) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[ef]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_anim.o(i.lv_anim_init)
 <LI><a href="#[ef]">lv_anim_path_linear</a> from lv_anim.o(i.lv_anim_path_linear) referenced from lv_style.o(i.lv_style_transition_dsc_init)
 <LI><a href="#[c0]">lv_anim_path_overshoot</a> from lv_anim.o(i.lv_anim_path_overshoot) referenced from systeminfosview.o(i._ZN4Page15SystemInfosView10Style_InitEv)
 <LI><a href="#[e5]">lv_area_get_height</a> from lv_flex.o(i.lv_area_get_height) referenced from lv_flex.o(i.children_repos)
 <LI><a href="#[e7]">lv_area_get_height</a> from lv_bar.o(i.lv_area_get_height) referenced from lv_bar.o(i.draw_indic)
 <LI><a href="#[e4]">lv_area_get_width</a> from lv_flex.o(i.lv_area_get_width) referenced from lv_flex.o(i.children_repos)
 <LI><a href="#[e6]">lv_area_get_width</a> from lv_bar.o(i.lv_area_get_width) referenced from lv_bar.o(i.draw_indic)
 <LI><a href="#[e3]">lv_area_set_height</a> from lv_area.o(i.lv_area_set_height) referenced from lv_flex.o(i.children_repos)
 <LI><a href="#[e2]">lv_area_set_width</a> from lv_area.o(i.lv_area_set_width) referenced from lv_flex.o(i.children_repos)
 <LI><a href="#[f0]">lv_async_timer_cb</a> from lv_async.o(i.lv_async_timer_cb) referenced from lv_async.o(i.lv_async_call)
 <LI><a href="#[f1]">lv_bar_anim</a> from lv_bar.o(i.lv_bar_anim) referenced from lv_bar.o(i.lv_bar_set_value_with_anim)
 <LI><a href="#[f2]">lv_bar_anim_ready</a> from lv_bar.o(i.lv_bar_anim_ready) referenced from lv_bar.o(i.lv_bar_set_value_with_anim)
 <LI><a href="#[115]">lv_bar_constructor</a> from lv_bar.o(i.lv_bar_constructor) referenced from lv_bar.o(.constdata)
 <LI><a href="#[116]">lv_bar_destructor</a> from lv_bar.o(i.lv_bar_destructor) referenced from lv_bar.o(.constdata)
 <LI><a href="#[117]">lv_bar_event</a> from lv_bar.o(i.lv_bar_event) referenced from lv_bar.o(.constdata)
 <LI><a href="#[f4]">lv_draw_mask_line</a> from lv_draw_mask.o(i.lv_draw_mask_line) referenced from lv_draw_mask.o(i.lv_draw_mask_line_points_init)
 <LI><a href="#[f5]">lv_draw_mask_radius</a> from lv_draw_mask.o(i.lv_draw_mask_radius) referenced from lv_draw_mask.o(i.lv_draw_mask_radius_init)
 <LI><a href="#[110]">lv_font_get_bitmap_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt) referenced 7 times from font_bahnschrift_13.o(.constdata)
 <LI><a href="#[10f]">lv_font_get_glyph_dsc_fmt_txt</a> from lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt) referenced 7 times from font_bahnschrift_13.o(.constdata)
 <LI><a href="#[118]">lv_img_constructor</a> from lv_img.o(i.lv_img_constructor) referenced from lv_img.o(.constdata)
 <LI><a href="#[dd]">lv_img_decoder_built_in_close</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_close) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[da]">lv_img_decoder_built_in_info</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_info) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[db]">lv_img_decoder_built_in_open</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_open) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[dc]">lv_img_decoder_built_in_read_line</a> from lv_img_decoder.o(i.lv_img_decoder_built_in_read_line) referenced from lv_img_decoder.o(i._lv_img_decoder_init)
 <LI><a href="#[119]">lv_img_destructor</a> from lv_img.o(i.lv_img_destructor) referenced from lv_img.o(.constdata)
 <LI><a href="#[11a]">lv_img_event</a> from lv_img.o(i.lv_img_event) referenced from lv_img.o(.constdata)
 <LI><a href="#[fc]">lv_indev_read_timer_cb</a> from lv_indev.o(i.lv_indev_read_timer_cb) referenced from lv_hal_indev.o(i.lv_indev_drv_register)
 <LI><a href="#[11b]">lv_label_constructor</a> from lv_label.o(i.lv_label_constructor) referenced from lv_label.o(.constdata)
 <LI><a href="#[11c]">lv_label_destructor</a> from lv_label.o(i.lv_label_destructor) referenced from lv_label.o(.constdata)
 <LI><a href="#[11d]">lv_label_event</a> from lv_label.o(i.lv_label_event) referenced from lv_label.o(.constdata)
 <LI><a href="#[11e]">lv_line_constructor</a> from lv_line.o(i.lv_line_constructor) referenced from lv_line.o(.constdata)
 <LI><a href="#[11f]">lv_line_event</a> from lv_line.o(i.lv_line_event) referenced from lv_line.o(.constdata)
 <LI><a href="#[84]">lv_mem_alloc</a> from lv_mem.o(i.lv_mem_alloc) referenced from new.o(i._Z11first_allocj)
 <LI><a href="#[ff]">lv_mem_walker</a> from lv_mem.o(i.lv_mem_walker) referenced from lv_mem.o(i.lv_mem_monitor)
 <LI><a href="#[112]">lv_obj_constructor</a> from lv_obj.o(i.lv_obj_constructor) referenced from lv_obj.o(.constdata)
 <LI><a href="#[100]">lv_obj_del_async_cb</a> from lv_obj_tree.o(i.lv_obj_del_async_cb) referenced from lv_obj_tree.o(i.lv_obj_del_async)
 <LI><a href="#[113]">lv_obj_destructor</a> from lv_obj.o(i.lv_obj_destructor) referenced from lv_obj.o(.constdata)
 <LI><a href="#[114]">lv_obj_event</a> from lv_obj.o(i.lv_obj_event) referenced from lv_obj.o(.constdata)
 <LI><a href="#[eb]">lv_obj_get_height</a> from lv_obj_pos.o(i.lv_obj_get_height) referenced from lv_flex.o(i.find_track_end)
 <LI><a href="#[ea]">lv_obj_get_width</a> from lv_obj_pos.o(i.lv_obj_get_width) referenced from lv_flex.o(i.find_track_end)
 <LI><a href="#[10e]">lv_obj_set_height</a> from lv_obj_pos.o(i.lv_obj_set_height) referenced 3 times from dialplateview.o(.constdata)
 <LI><a href="#[10c]">lv_obj_set_width</a> from lv_obj_pos.o(i.lv_obj_set_width) referenced from startupview.o(.constdata)
 <LI><a href="#[cf]">lv_obj_set_y</a> from lv_obj_pos.o(i.lv_obj_set_y) referenced 3 times from startupview.o(.constdata)
 <LI><a href="#[cf]">lv_obj_set_y</a> from lv_obj_pos.o(i.lv_obj_set_y) referenced from statusbar.o(i._ZN9StatusBar6AppearEb)
 <LI><a href="#[120]">lv_slider_constructor</a> from lv_slider.o(i.lv_slider_constructor) referenced from lv_slider.o(.constdata)
 <LI><a href="#[121]">lv_slider_event</a> from lv_slider.o(i.lv_slider_event) referenced from lv_slider.o(.constdata)
 <LI><a href="#[20]">lv_txt_utf8_get_byte_id</a> from lv_txt.o(i.lv_txt_utf8_get_byte_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[22]">lv_txt_utf8_get_char_id</a> from lv_txt.o(i.lv_txt_utf8_get_char_id) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[23]">lv_txt_utf8_get_length</a> from lv_txt.o(i.lv_txt_utf8_get_length) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1f]">lv_txt_utf8_next</a> from lv_txt.o(i.lv_txt_utf8_next) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[21]">lv_txt_utf8_prev</a> from lv_txt.o(i.lv_txt_utf8_prev) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[1e]">lv_txt_utf8_size</a> from lv_txt.o(i.lv_txt_utf8_size) referenced 2 times from lv_txt.o(.data)
 <LI><a href="#[105]">scroll_anim_ready_cb</a> from lv_obj_scroll.o(i.scroll_anim_ready_cb) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[104]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[104]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_to_x)
 <LI><a href="#[104]">scroll_x_anim</a> from lv_obj_scroll.o(i.scroll_x_anim) referenced from lv_obj_scroll.o(i.scroll_area_into_view)
 <LI><a href="#[103]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_by)
 <LI><a href="#[103]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.lv_obj_scroll_to_y)
 <LI><a href="#[103]">scroll_y_anim</a> from lv_obj_scroll.o(i.scroll_y_anim) referenced from lv_obj_scroll.o(i.scroll_area_into_view)
 <LI><a href="#[fd]">set_ofs_x_anim</a> from lv_label.o(i.set_ofs_x_anim) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[fd]">set_ofs_x_anim</a> from lv_label.o(i.set_ofs_x_anim) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[fe]">set_ofs_y_anim</a> from lv_label.o(i.set_ofs_y_anim) referenced from lv_label.o(i.lv_label_refr_text)
 <LI><a href="#[fe]">set_ofs_y_anim</a> from lv_label.o(i.set_ofs_y_anim) referenced from lv_label.o(i.lv_label_set_long_mode)
 <LI><a href="#[de]">trans_anim_cb</a> from lv_obj_style.o(i.trans_anim_cb) referenced from lv_obj_style.o(i._lv_obj_style_create_transition)
 <LI><a href="#[e0]">trans_anim_ready_cb</a> from lv_obj_style.o(i.trans_anim_ready_cb) referenced from lv_obj_style.o(i._lv_obj_style_create_transition)
 <LI><a href="#[df]">trans_anim_start_cb</a> from lv_obj_style.o(i.trans_anim_start_cb) referenced from lv_obj_style.o(i._lv_obj_style_create_transition)
 <LI><a href="#[ec]">unicode_list_compare</a> from lv_font_fmt_txt.o(i.unicode_list_compare) referenced from lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[182]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[184]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[186]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[868]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[869]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[86a]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[86b]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[86c]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[187]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[189]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[18b]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[18d]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[18e]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[18f]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[86d]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[191]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[193]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[194]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[195]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[197]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[199]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[19b]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[19c]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[19d]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[19f]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[86e]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[1a1]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1a3]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1a5]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1a7]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[86f]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[1b8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[1a9]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[1ab]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[870]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[871]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1ad]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[872]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[873]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[874]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1af]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[875]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[876]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1b0]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[877]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[878]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[879]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[87a]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[87b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[87c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[87d]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[1b2]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 588 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _sys_open &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[87e]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[87f]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1b4]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[880]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[881]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[882]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[883]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[185]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[884]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[1b5]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[885]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[886]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[1b7]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[887]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[1b9]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; App_Init() &rArr; PageManager::Push(const char*, const PageBase::Stash_t*) &rArr; PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[888]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[889]"></a>__asm___19_HAL_FaultHandle_cpp_968f5a26___ZN41_INTERNAL_19_HAL_FaultHandle_cpp_968f5a2611cmb_get_mspEv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_faulthandle.o(.emb_text), UNUSED)

<P><STRONG><a name="[88a]"></a>__asm___19_HAL_FaultHandle_cpp_968f5a26___ZN41_INTERNAL_19_HAL_FaultHandle_cpp_968f5a2611cmb_get_pspEv</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_faulthandle.o(.emb_text), UNUSED)

<P><STRONG><a name="[88b]"></a>__asm___19_HAL_FaultHandle_cpp_968f5a26___ZN41_INTERNAL_19_HAL_FaultHandle_cpp_968f5a2610cmb_get_spEv</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, hal_faulthandle.o(.emb_text), UNUSED)

<P><STRONG><a name="[27]"></a>HardFault_Handler</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_faulthandle.o(.emb_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = HardFault_Handler &rArr; cm_backtrace_fault &rArr; print_call_stack &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationHardFaultHook
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>Reset_Handler</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[88c]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[26]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>ACC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACC_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>CAN2_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>CAN2_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>CAN2_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>CAN2_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>DMA2_Channel6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>SDIO2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>SPI2_I2S2EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SPI3_I2S3EXT_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SPI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TMR1_BRK_TMR9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>TMR1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TMR1_TRG_COM_TMR11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>TMR8_BRK_TMR12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>TMR8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>TMR8_TRG_COM_TMR14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>UART7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>USART6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>USB_HP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>USB_LP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_at32f403acgu7.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[215]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_at32f403acgu7.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[88d]"></a>__use_no_semihosting</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi_2.o(.text), UNUSED)

<P><STRONG><a name="[1be]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::parseDegrees(const char*, RawDegrees&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::parseDecimal(const char*)
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isspace
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[1bf]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[1c2]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[2a8]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::MakeTimeString(unsigned long long, char*, unsigned short)
<LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[88e]"></a>_ll_udiv</STRONG> (Thumb, 238 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[1c3]"></a>__c89vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, c89vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
</UL>

<P><STRONG><a name="[1c5]"></a>__2sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, __2sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[1c6]"></a>__2snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, __2snprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_GetTimeConv(Recorder_t*, const char*, char*, unsigned)
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::ConvertMapPath(int, int, char*, unsigned)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetArrowTheme(const char*)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetStorageInfo(bool*, const char**, char*, unsigned)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetRTCInfo(char*, unsigned)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetIMUInfo(int*, char*, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetGPSInfo(float*, float*, float*, char*, unsigned, float*, float*)
</UL>

<P><STRONG><a name="[1c8]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[1c9]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[1ca]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1cb]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1c7]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[192]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[1cd]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[196]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[19e]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[198]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1a0]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[18a]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1d1]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[1d4]"></a>_scanf_int</STRONG> (Thumb, 332 bytes, Stack size 56 bytes, _scanf_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_int
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1d6]"></a>atoi</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atoi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::MapConvGetRange(const char*, short*, short*)
</UL>

<P><STRONG><a name="[1d9]"></a>atol</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, atol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::parseDegrees(const char*, RawDegrees&)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::parseDecimal(const char*)
</UL>

<P><STRONG><a name="[1da]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Recorder_Init(Account*)
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_DataProc_cpp_e3929772
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_DP_TrackFilter_cpp_a5ac639c
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_DP_Storage_cpp_d0a046f3
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_ResourcePool_cpp_3959e929
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[5f8]"></a>strstr</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, strstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strstr(char*, const char*)
</UL>

<P><STRONG><a name="[58b]"></a>memcmp</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
</UL>

<P><STRONG><a name="[2b3]"></a>strcpy</STRONG> (Thumb, 72 bytes, Stack size 12 bytes, strcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::replace(const String&, const String&)
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_read(_lv_fs_drv_t*, void*, char*)
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSCustom::commit()
<LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*, unsigned)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
</UL>

<P><STRONG><a name="[458]"></a>strrchr</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, strrchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[43b]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_FileWriteString(lv_fs_file_t*, const char*)
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const char*)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const StringSumHelper&, const char*)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*)
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
</UL>

<P><STRONG><a name="[5f1]"></a>strcat</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, strcat.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[1df]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Commit(const void*, unsigned)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewWillAppear()
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::replace(const String&, const String&)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(Account*, void*, unsigned)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[1dc]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[88f]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[577]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::replace(const String&, const String&)
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[1de]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
</UL>

<P><STRONG><a name="[890]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[1dd]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SysConfig_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_start
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_add
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_GetWeekString(unsigned char)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::commit()
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
</UL>

<P><STRONG><a name="[891]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[892]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[893]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1e4]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>

<P><STRONG><a name="[1e1]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[894]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uninit()
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(PageFactory*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Install(const char*, const char*)
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::TrackPointFilter()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PointContainer()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::LiveMap()
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::TileConv(unsigned, unsigned, unsigned)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::TrackLineFilter()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCluster(FatFile*)
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[895]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[896]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[1e2]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[1e3]"></a>strncpy</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, strncpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onLoad(Account*)
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetArrowTheme(char*, unsigned)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetBatteryInfo(int*, float*, char*, unsigned)
<LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSCustom::set(const char*)
</UL>

<P><STRONG><a name="[2b5]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_PlayMusic(const char*)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFactory::CreatePage(const char*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInStack(const char*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInPool(const char*)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SearchNode(const char*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_read(_lv_fs_drv_t*, void*, char*)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[897]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[7]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[183]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[898]"></a>__semihosting$guard</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[899]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[1c0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[1ae]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_mixed
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[1db]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[1d7]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[89a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[89b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[89c]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[89d]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[11]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[1c1]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[1e6]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1ac]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[1e8]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[8]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[1e9]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[1ea]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[1cc]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[188]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[89e]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[1f1]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1f4]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[1c4]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[7c]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> __2sprintf.o(.text)
</UL>
<P><STRONG><a name="[7b]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 3]<UL><LI> __2snprintf.o(.text)
<LI> c89vsnprintf.o(.text)
<LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[1f5]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1a2]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1a4]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[1f6]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1a6]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[1a8]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[19a]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[1d5]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
</UL>

<P><STRONG><a name="[1f7]"></a>__vfscanf_char</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
</UL>

<P><STRONG><a name="[80]"></a>_sgetc</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[81]"></a>_sbackspace</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, _sgetc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> sscanf.o(.text)
</UL>
<P><STRONG><a name="[1d8]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>

<P><STRONG><a name="[1ce]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[1fa]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>

<P><STRONG><a name="[1fb]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[89f]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[8a0]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[1fe]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[1e0]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[8a1]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[8a2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[214]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[8a3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[1e5]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1f0]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[7f]"></a>isspace</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, isspace.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = isspace &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[1ff]"></a>fprintf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, fprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
</UL>

<P><STRONG><a name="[201]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>

<P><STRONG><a name="[1f3]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[202]"></a>sscanf</STRONG> (Thumb, 52 bytes, Stack size 72 bytes, sscanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[1f8]"></a>__vfscanf</STRONG> (Thumb, 878 bytes, Stack size 96 bytes, _scanf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_int
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_string
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_longlong
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf_char
</UL>

<P><STRONG><a name="[1f9]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[1ec]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[209]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
</UL>

<P><STRONG><a name="[1fd]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[1e7]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[1fc]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[20e]"></a>__aeabi_vec_delete</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, aeabi_vec_delete_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[210]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[211]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[1b6]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[212]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[200]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>

<P><STRONG><a name="[204]"></a>_scanf_longlong</STRONG> (Thumb, 342 bytes, Stack size 56 bytes, _scanf_longlong.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_longlong
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[207]"></a>_scanf_string</STRONG> (Thumb, 224 bytes, Stack size 56 bytes, _scanf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _scanf_string
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[21a]"></a>_scanf_really_real</STRONG> (Thumb, 684 bytes, Stack size 120 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>
<BR>[Called By]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_real
</UL>

<P><STRONG><a name="[206]"></a>_scanf_mbtowc</STRONG> (Thumb, 276 bytes, Stack size 64 bytes, _scanf_mbtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_mbtowc &rArr; _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_mbrtowc
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[208]"></a>_scanf_wctomb</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, _scanf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _scanf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[205]"></a>_scanf_wstring</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, _scanf_wstr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _scanf_wstring &rArr; _scanf_wcharmap
</UL>
<BR>[Calls]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[1b3]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = _initio &rArr; freopen &rArr; _sys_open &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[224]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[226]"></a>setlocale</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, locale.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<BR>[Called By]<UL><LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>

<P><STRONG><a name="[20d]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[20a]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[20c]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[22a]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[213]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[8a4]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[8a5]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text), UNUSED)

<P><STRONG><a name="[21f]"></a>_scanf_wcharmap</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _scanf_wcharmap.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _scanf_wcharmap
</UL>
<BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wstring
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_wctomb
</UL>

<P><STRONG><a name="[216]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[223]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[221]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 580<LI>Call Chain = freopen &rArr; _sys_open &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[22d]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[225]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 404<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; FatFile::write(const void*, unsigned) &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[8a6]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[227]"></a>_setlocale_r</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>

<P><STRONG><a name="[21e]"></a>_mbrtowc</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, _mbrtowc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _mbrtowc &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_mbtowc
</UL>

<P><STRONG><a name="[229]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[222]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[5fd]"></a>__cxa_rethrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, arm_rethrow_noexceptions.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[5fe]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, aeabi_vec_dtor_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[234]"></a>_scanf_really_hex_real</STRONG> (Thumb, 786 bytes, Stack size 80 bytes, scanf_hexfp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>
<BR>[Called By]<UL><LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_hex_real
</UL>

<P><STRONG><a name="[867]"></a>_scanf_really_infnan</STRONG> (Thumb, 292 bytes, Stack size 72 bytes, scanf_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_infnan
</UL>

<P><STRONG><a name="[237]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[714]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[8a7]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[22c]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[8a8]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[239]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[23c]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; FatFile::write(const void*, unsigned) &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[22e]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; FatFile::write(const void*, unsigned) &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[238]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[233]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[235]"></a>__aeabi_llsl</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, llshl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[8a9]"></a>_ll_shift_l</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[8aa]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[5fc]"></a>__ARM_vec_cleanup</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, ARM_vec_cleanup_noexceptions.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __ARM_vec_cleanup
</UL>
<BR>[Called By]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>

<P><STRONG><a name="[1ed]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[241]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[240]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[244]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[242]"></a>_e2d</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, btod.o(CL$$btod_e2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
</UL>

<P><STRONG><a name="[243]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>

<P><STRONG><a name="[1ee]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[219]"></a>_btod_edivd</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_edivd))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_edivd &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[1ef]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[218]"></a>_btod_emuld</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emuld))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = _btod_emuld &rArr; _e2d &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2d
</UL>
<BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[245]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[3f9]"></a>ADC_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[3fa]"></a>ADC_Ctrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_Ctrl))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[247]"></a>ADC_DMA_Register</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, adc.o(i.ADC_DMA_Register))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_DMA_Register &rArr; ADC_DMA_SearchChannel
</UL>
<BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_SearchChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[3fe]"></a>ADC_GetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[488]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Update()
</UL>

<P><STRONG><a name="[487]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Update()
</UL>

<P><STRONG><a name="[3fc]"></a>ADC_GetResetCalibrationStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_GetResetCalibrationStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[3f8]"></a>ADC_Init</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, at32f4xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[489]"></a>ADC_RegularChannelConfig</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, at32f4xx_adc.o(i.ADC_RegularChannelConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_RegularChannelConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Update()
</UL>

<P><STRONG><a name="[249]"></a>ADC_Reset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, at32f4xx_adc.o(i.ADC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[3fb]"></a>ADC_RstCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_RstCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[48a]"></a>ADC_SoftwareStartConvCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_SoftwareStartConvCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Update()
</UL>

<P><STRONG><a name="[3fd]"></a>ADC_StartCalibration</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StartCalibration))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[3f7]"></a>ADC_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[27c]"></a>BKP_ReadBackupReg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, at32f4xx_bkp.o(i.BKP_ReadBackupReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_ReadBackupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[24b]"></a>BKP_Reset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, at32f4xx_bkp.o(i.BKP_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_BackupResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[285]"></a>BKP_WriteBackupReg</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, at32f4xx_bkp.o(i.BKP_WriteBackupReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKP_WriteBackupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[3c]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, hal_display.o(i.DMA1_Channel3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DMA1_Channel3_IRQHandler &rArr; [local to HAL_Display_cpp]::Display_SPI_DMA_Send(const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_GetITStatus
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ClearITPendingBit
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Send(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[443]"></a>DMA_ChannelEnable</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_ChannelEnable))
<BR><BR>[Called By]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Send(const void*, unsigned)
</UL>

<P><STRONG><a name="[24e]"></a>DMA_ClearITPendingBit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[43f]"></a>DMA_DefaultInitParaConfig</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_DefaultInitParaConfig))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Init()
</UL>

<P><STRONG><a name="[24d]"></a>DMA_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[442]"></a>DMA_INTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_INTConfig))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Init()
</UL>

<P><STRONG><a name="[440]"></a>DMA_Init</STRONG> (Thumb, 58 bytes, Stack size 12 bytes, at32f4xx_dma.o(i.DMA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DMA_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Init()
</UL>

<P><STRONG><a name="[43e]"></a>DMA_Reset</STRONG> (Thumb, 218 bytes, Stack size 0 bytes, at32f4xx_dma.o(i.DMA_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Init()
</UL>

<P><STRONG><a name="[250]"></a>Delay_Init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, delay.o(i.Delay_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Delay_Init &rArr; SystemCoreClockUpdate
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockUpdate
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI0_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, exti.o(i.EXTI15_10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI15_10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI1_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI2_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, exti.o(i.EXTI4_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI4_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, exti.o(i.EXTI9_5_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI9_5_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIntStatus
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_ClearIntPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[254]"></a>EXTI_ClearIntPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_ClearIntPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[253]"></a>EXTI_GetIntStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f4xx_exti.o(i.EXTI_GetIntStatus))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI9_5_IRQHandler
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_IRQHandler
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI3_IRQHandler
<LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI2_IRQHandler
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI1_IRQHandler
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI15_10_IRQHandler
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_IRQHandler
</UL>

<P><STRONG><a name="[25b]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 12 bytes, at32f4xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>

<P><STRONG><a name="[257]"></a>EXTIx_Init</STRONG> (Thumb, 116 bytes, Stack size 40 bytes, exti.o(i.EXTIx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = EXTIx_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPortNum
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinNum
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTILineConfig
<LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIRQn
</UL>
<BR>[Called By]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachInterrupt
</UL>

<P><STRONG><a name="[25d]"></a>FLASH_EraseUserOptionBytes</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, at32f4xx_flash.o(i.FLASH_EraseUserOptionBytes))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FLASH_EraseUserOptionBytes &rArr; FLASH_WaitForProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForProcess
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetReadProtectStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SRAM
</UL>

<P><STRONG><a name="[261]"></a>FLASH_GetBank1Status</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, at32f4xx_flash.o(i.FLASH_GetBank1Status))
<BR><BR>[Called By]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForProcess
</UL>

<P><STRONG><a name="[25e]"></a>FLASH_GetReadProtectStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_flash.o(i.FLASH_GetReadProtectStatus))
<BR><BR>[Called By]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseUserOptionBytes
</UL>

<P><STRONG><a name="[260]"></a>FLASH_ProgramUserOptionByteData</STRONG> (Thumb, 60 bytes, Stack size 20 bytes, at32f4xx_flash.o(i.FLASH_ProgramUserOptionByteData))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FLASH_ProgramUserOptionByteData &rArr; FLASH_WaitForProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitForProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SRAM
</UL>

<P><STRONG><a name="[705]"></a>FLASH_Unlock</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_flash.o(i.FLASH_Unlock))
<BR><BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;extend_SRAM
</UL>

<P><STRONG><a name="[25f]"></a>FLASH_WaitForProcess</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, at32f4xx_flash.o(i.FLASH_WaitForProcess))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_WaitForProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetBank1Status
</UL>
<BR>[Called By]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramUserOptionByteData
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseUserOptionBytes
</UL>

<P><STRONG><a name="[25a]"></a>GPIO_EXTILineConfig</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, at32f4xx_gpio.o(i.GPIO_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>

<P><STRONG><a name="[256]"></a>GPIO_GetPinNum</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, gpio.o(i.GPIO_GetPinNum))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinSource
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetIRQn
</UL>

<P><STRONG><a name="[262]"></a>GPIO_GetPinSource</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, gpio.o(i.GPIO_GetPinSource))
<BR><BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinNum
</UL>

<P><STRONG><a name="[259]"></a>GPIO_GetPortNum</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, gpio.o(i.GPIO_GetPortNum))
<BR><BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>

<P><STRONG><a name="[265]"></a>GPIO_Init</STRONG> (Thumb, 162 bytes, Stack size 20 bytes, at32f4xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
</UL>

<P><STRONG><a name="[263]"></a>GPIO_JTAG_Disable</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, gpio.o(i.GPIO_JTAG_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPIO_JTAG_Disable
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8ab]"></a>GPIO_PinsRemapConfig</STRONG> (Thumb, 1022 bytes, Stack size 16 bytes, at32f4xx_gpio.o(i.GPIO_PinsRemapConfig), UNUSED)

<P><STRONG><a name="[264]"></a>GPIOx_Init</STRONG> (Thumb, 140 bytes, Stack size 16 bytes, gpio.o(i.GPIOx_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = GPIOx_Init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[266]"></a>GPS_Transform</STRONG> (Thumb, 420 bytes, Stack size 104 bytes, gps_transform.o(i.GPS_Transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = GPS_Transform &rArr; [local to GPS_Transform_c]::transformLon(double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::ConvertMapCoordinate(double, double, int*, int*)
</UL>

<P><STRONG><a name="[277]"></a>Is_Leap_Year</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, rtc.o(i.Is_Leap_Year))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[25c]"></a>NVIC_Init</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>

<P><STRONG><a name="[7fe]"></a>NVIC_PriorityGroupConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, misc.o(i.NVIC_PriorityGroupConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[271]"></a>PWM_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, pwm.o(i.PWM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = PWM_Init &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_Init()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>

<P><STRONG><a name="[27b]"></a>PWR_BackupAccessCtrl</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_pwr.o(i.PWR_BackupAccessCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[57d]"></a>PingPongBuffer_GetReadBuf</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, pingpongbuffer.o(i.PingPongBuffer_GetReadBuf))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Publish()
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(Account*, void*, unsigned)
</UL>

<P><STRONG><a name="[57f]"></a>PingPongBuffer_GetWriteBuf</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pingpongbuffer.o(i.PingPongBuffer_GetWriteBuf))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Commit(const void*, unsigned)
</UL>

<P><STRONG><a name="[584]"></a>PingPongBuffer_Init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pingpongbuffer.o(i.PingPongBuffer_Init))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
</UL>

<P><STRONG><a name="[57e]"></a>PingPongBuffer_SetReadDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pingpongbuffer.o(i.PingPongBuffer_SetReadDone))
<BR><BR>[Called By]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Publish()
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(Account*, void*, unsigned)
</UL>

<P><STRONG><a name="[580]"></a>PingPongBuffer_SetWriteDone</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, pingpongbuffer.o(i.PingPongBuffer_SetWriteDone))
<BR><BR>[Called By]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Commit(const void*, unsigned)
</UL>

<P><STRONG><a name="[3f6]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
</UL>

<P><STRONG><a name="[43d]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Init()
</UL>

<P><STRONG><a name="[27a]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
</UL>

<P><STRONG><a name="[28b]"></a>RCC_APB1PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB1PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_Reset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Reset
</UL>

<P><STRONG><a name="[258]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_JTAG_Disable
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>

<P><STRONG><a name="[24a]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Reset
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_Reset
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Reset
</UL>

<P><STRONG><a name="[24c]"></a>RCC_BackupResetCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_BackupResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Reset
</UL>

<P><STRONG><a name="[2a7]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 246 bytes, Stack size 16 bytes, at32f4xx_rcc.o(i.RCC_GetClocksFreq), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[27e]"></a>RCC_GetFlagStatus</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[27d]"></a>RCC_LSEConfig</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_LSEConfig))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[280]"></a>RCC_RTCCLKCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_RTCCLKCmd))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[27f]"></a>RCC_RTCCLKConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_RTCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[28d]"></a>RCC_StepModeCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_rcc.o(i.RCC_StepModeCmd))
<BR><BR>[Called By]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo240MHSI
</UL>

<P><STRONG><a name="[286]"></a>RTC_ClearFlag</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[288]"></a>RTC_EnterConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_EnterConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDIV
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[289]"></a>RTC_ExitConfigMode</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_ExitConfigMode))
<BR><BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDIV
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
</UL>

<P><STRONG><a name="[275]"></a>RTC_Get</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, rtc.o(i.RTC_Get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetCounter
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get_Week
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_GetInfo(HAL::Clock_Info_t*)
</UL>

<P><STRONG><a name="[276]"></a>RTC_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_GetCounter))
<BR><BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[278]"></a>RTC_Get_Week</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, rtc.o(i.RTC_Get_Week))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = RTC_Get_Week
</UL>
<BR>[Called By]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>

<P><STRONG><a name="[279]"></a>RTC_Init</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, rtc.o(i.RTC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = RTC_Init &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForSynchro
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetDIV
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearFlag
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKConfig
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_RTCCLKCmd
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_LSEConfig
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetFlagStatus
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCtrl
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_WriteBackupReg
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_Reset
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKP_ReadBackupReg
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_Init()
</UL>

<P><STRONG><a name="[284]"></a>RTC_Set</STRONG> (Thumb, 184 bytes, Stack size 40 bytes, rtc.o(i.RTC_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WaitForLastTask
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetCounter
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWR_BackupAccessCtrl
<LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Leap_Year
</UL>
<BR>[Called By]<UL><LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_SetInfo(const HAL::Clock_Info_t*)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[287]"></a>RTC_SetCounter</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, at32f4xx_rtc.o(i.RTC_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>

<P><STRONG><a name="[283]"></a>RTC_SetDIV</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, at32f4xx_rtc.o(i.RTC_SetDIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = RTC_SetDIV
</UL>
<BR>[Calls]<UL><LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ExitConfigMode
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_EnterConfigMode
</UL>
<BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[282]"></a>RTC_WaitForLastTask</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_WaitForLastTask))
<BR><BR>[Called By]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[281]"></a>RTC_WaitForSynchro</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, at32f4xx_rtc.o(i.RTC_WaitForSynchro))
<BR><BR>[Called By]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
</UL>

<P><STRONG><a name="[5c3]"></a>SPI_Enable</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_Type*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataSize(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
</UL>

<P><STRONG><a name="[441]"></a>SPI_I2S_DMAEnable</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_spi.o(i.SPI_I2S_DMAEnable))
<BR><BR>[Called By]<UL><LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Init()
</UL>

<P><STRONG><a name="[28a]"></a>SPI_I2S_Reset</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, at32f4xx_spi.o(i.SPI_I2S_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPI_I2S_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[5c2]"></a>SPI_Init</STRONG> (Thumb, 80 bytes, Stack size 12 bytes, at32f4xx_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SPI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_Type*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataSize(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
</UL>

<P><STRONG><a name="[2e]"></a>SysTick_Handler</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, delay.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[251]"></a>SystemCoreClockUpdate</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, system_at32f4xx.o(i.SystemCoreClockUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SystemCoreClockUpdate
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[78]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_at32f4xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SystemInit &rArr; SetSysClockTo240MHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClockTo240MHSI
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(.text)
</UL>
<P><STRONG><a name="[274]"></a>TIMx_OCxInit</STRONG> (Thumb, 278 bytes, Stack size 56 bytes, pwm.o(i.TIMx_OCxInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = TIMx_OCxInit &rArr; TMR_OC4Init
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OCStructInit
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC4PreloadConfig
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC4Init
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC3PreloadConfig
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC3Init
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC2PreloadConfig
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC2Init
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC1PreloadConfig
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_OC1Init
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_CtrlPWMOutputs
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
</UL>

<P><STRONG><a name="[48]"></a>TMR1_OV_TMR10_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timer.o(i.TMR1_OV_TMR10_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR1_OV_TMR10_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>TMR2_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TMR2_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR2_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>TMR3_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TMR3_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR3_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>TMR4_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TMR4_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR4_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TMR5_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TMR5_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR5_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TMR6_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TMR6_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR6_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TMR7_GLOBAL_IRQHandler</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, timer.o(i.TMR7_GLOBAL_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR7_GLOBAL_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>TMR8_OV_TMR13_IRQHandler</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, timer.o(i.TMR8_OV_TMR13_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR8_OV_TMR13_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_GetINTStatus
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[2a0]"></a>TMR_ClearFlag</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
</UL>

<P><STRONG><a name="[29b]"></a>TMR_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR8_OV_TMR13_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR7_GLOBAL_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_GLOBAL_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_GLOBAL_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_OV_TMR10_IRQHandler
</UL>

<P><STRONG><a name="[273]"></a>TMR_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[299]"></a>TMR_CtrlPWMOutputs</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[2a4]"></a>TMR_DIVConfig</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_DIVConfig))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
</UL>

<P><STRONG><a name="[29a]"></a>TMR_GetINTStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_GetINTStatus))
<BR><BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR8_OV_TMR13_IRQHandler
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR7_GLOBAL_IRQHandler
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR6_GLOBAL_IRQHandler
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR5_GLOBAL_IRQHandler
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR4_GLOBAL_IRQHandler
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR3_GLOBAL_IRQHandler
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR2_GLOBAL_IRQHandler
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR1_OV_TMR10_IRQHandler
</UL>

<P><STRONG><a name="[2a1]"></a>TMR_INTConfig</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_INTConfig))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
</UL>

<P><STRONG><a name="[291]"></a>TMR_OC1Init</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, at32f4xx_tim.o(i.TMR_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TMR_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[292]"></a>TMR_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[293]"></a>TMR_OC2Init</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[294]"></a>TMR_OC2PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[295]"></a>TMR_OC3Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC3Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC3Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[296]"></a>TMR_OC3PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC3PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[297]"></a>TMR_OC4Init</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, at32f4xx_tim.o(i.TMR_OC4Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TMR_OC4Init
</UL>
<BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[298]"></a>TMR_OC4PreloadConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OC4PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[290]"></a>TMR_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[29c]"></a>TMR_Reset</STRONG> (Thumb, 206 bytes, Stack size 8 bytes, at32f4xx_tim.o(i.TMR_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TMR_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphResetCmd
<LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
</UL>

<P><STRONG><a name="[2a3]"></a>TMR_SetAutoreload</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_SetAutoreload))
<BR><BR>[Called By]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
</UL>

<P><STRONG><a name="[28f]"></a>TMR_TimeBaseInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, at32f4xx_tim.o(i.TMR_TimeBaseInit))
<BR><BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[28e]"></a>Timer_ClockCmd</STRONG> (Thumb, 152 bytes, Stack size 0 bytes, timer.o(i.Timer_ClockCmd))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIMx_OCxInit
</UL>

<P><STRONG><a name="[29d]"></a>Timer_SetInterrupt</STRONG> (Thumb, 136 bytes, Stack size 32 bytes, timer.o(i.Timer_SetInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Timer_SetInterrupt &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TimeToArrPsc
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[29f]"></a>Timer_SetInterruptBase</STRONG> (Thumb, 324 bytes, Stack size 72 bytes, timer.o(i.Timer_SetInterruptBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_TimeBaseInit
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Reset
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_INTConfig
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_ClearFlag
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterrupt
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[2a2]"></a>Timer_SetInterruptTimeUpdate</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, timer.o(i.Timer_SetInterruptTimeUpdate))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Timer_SetInterruptTimeUpdate &rArr; Timer_TimeToArrPsc
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_SetAutoreload
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_DIVConfig
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_TimeToArrPsc
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[54]"></a>USART1_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i.USART1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART1_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>USART2_IRQHandler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = USART2_IRQHandler &rArr; HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>USART3_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hardwareserial.o(i.USART3_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(RESET)
</UL>
<P><STRONG><a name="[391]"></a>USART_ClearITPendingBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[395]"></a>USART_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_Cmd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[396]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[38f]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 12 bytes, at32f4xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[394]"></a>USART_INTConfig</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, at32f4xx_usart.o(i.USART_INTConfig), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[2a6]"></a>USART_Init</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, at32f4xx_usart.o(i.USART_Init), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[390]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::IRQHandler()
</UL>

<P><STRONG><a name="[397]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, at32f4xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::write(unsigned char)
</UL>

<P><STRONG><a name="[108]"></a>App_Uninit()</STRONG> (Thumb, 92 bytes, Stack size 80 bytes, app.o(i._Z10App_Uninitv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = App_Uninit() &rArr; Account::Notify(const char*, const void*, unsigned) &rArr; Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::Center()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> main.o(i.main)
</UL>
<P><STRONG><a name="[3f4]"></a>adjustTime(long)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, time.o(i._Z10adjustTimel))
<BR><BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[595]"></a>lfnToLower(char)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, fatfilelfn.o(i._Z10lfnToLowerc))
<BR><BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[2b6]"></a>_DP_GPS_Init(Account*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dp_gps.o(i._Z12_DP_GPS_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_GPS_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetTimerPeriod(unsigned)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2ba]"></a>_DP_IMU_Init(Account*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dp_imu.o(i._Z12_DP_IMU_InitP7Account))
<BR><BR>[Calls]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_SetCommitCallback(bool(*)(void*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2bc]"></a>_DP_MAG_Init(Account*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dp_mag.o(i._Z12_DP_MAG_InitP7Account))
<BR><BR>[Calls]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::MAG_SetCommitCallback(bool(*)(void*, void*), void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2c1]"></a>lv_port_init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_port.o(i._Z12lv_port_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = lv_port_init() &rArr; lv_port_disp_init() &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init()
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2c5]"></a>refreshCache(unsigned long)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, time.o(i._Z12refreshCachem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second(unsigned long)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minute(unsigned long)
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month(unsigned long)
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year(unsigned long)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hour(unsigned long)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day(unsigned long)
</UL>

<P><STRONG><a name="[2c7]"></a>DataProc_Init()</STRONG> (Thumb, 386 bytes, Stack size 64 bytes, dataproc.o(i._Z13DataProc_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = DataProc_Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TrackFilter_Init(Account*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SportStatus_Init(Account*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_MusicPlayer_Init(Account*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SysConfig_Init(Account*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_StatusBar_Init(Account*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Recorder_Init(Account*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Storage_Init(Account*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TzConv_Init(Account*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Power_Init(Account*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Clock_Init(Account*)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_MAG_Init(Account*)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_IMU_Init(Account*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_GPS_Init(Account*)
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
</UL>

<P><STRONG><a name="[2ca]"></a>_DP_Clock_Init(Account*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dp_clock.o(i._Z14_DP_Clock_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_Clock_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2cb]"></a>_DP_Power_Init(Account*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, dp_power.o(i._Z14_DP_Power_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_Power_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetTimerPeriod(unsigned)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2d0]"></a>_DP_TzConv_Init(Account*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, dp_tzconv.o(i._Z15_DP_TzConv_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_TzConv_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2c4]"></a>lv_port_fs_init()</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_port_fs_init() &rArr; lv_fs_drv_register &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_init()
</UL>

<P><STRONG><a name="[2c9]"></a>_DP_Storage_Init(Account*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dp_storage.o(i._Z16_DP_Storage_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_Storage_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_SetEventCallback(void(*)(bool))
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2cd]"></a>_DP_Recorder_Init(Account*)</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, dp_recorder.o(i._Z17_DP_Recorder_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_Recorder_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::GPX()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2c2]"></a>lv_port_disp_init()</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, lv_port_disp.o(i._Z17lv_port_disp_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = lv_port_disp_init() &rArr; lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_SetSendFinishCallback(void(*)())
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_init()
</UL>

<P><STRONG><a name="[2ce]"></a>_DP_StatusBar_Init(Account*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, statusbar.o(i._Z18_DP_StatusBar_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_StatusBar_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2d1]"></a>_DP_SysConfig_Init(Account*)</STRONG> (Thumb, 348 bytes, Stack size 48 bytes, dp_sysconfig.o(i._Z18_DP_SysConfig_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = _DP_SysConfig_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2c3]"></a>lv_port_indev_init()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_port_indev.o(i._Z18lv_port_indev_initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_port_indev_init() &rArr; lv_indev_drv_register &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_set_group
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_default
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_init()
</UL>

<P><STRONG><a name="[2cf]"></a>_DP_MusicPlayer_Init(Account*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dp_musicplayer.o(i._Z20_DP_MusicPlayer_InitP7Account))
<BR><BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2cc]"></a>_DP_SportStatus_Init(Account*)</STRONG> (Thumb, 228 bytes, Stack size 40 bytes, dp_sportstatus.o(i._Z20_DP_SportStatus_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = _DP_SportStatus_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetTimerPeriod(unsigned)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::GetTick()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[2d2]"></a>_DP_TrackFilter_Init(Account*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, dp_trackfilter.o(i._Z20_DP_TrackFilter_InitP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = _DP_TrackFilter_Init(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::SetLevel(int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::SetOffsetThreshold(double)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
</UL>

<P><STRONG><a name="[10d]"></a>lv_obj_set_opa_scale(_lv_obj_t*, short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_ext_func.o(i._Z20lv_obj_set_opa_scaleP9_lv_obj_ts))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_opa_scale(_lv_obj_t*, short) &rArr; lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplateview.o(.constdata)
</UL>
<P><STRONG><a name="[2ea]"></a>day(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, time.o(i._Z3daym))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = day(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshCache(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day()
</UL>

<P><STRONG><a name="[2eb]"></a>day()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i._Z3dayv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = day() &rArr; day(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[2ec]"></a>now()</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, time.o(i._Z3nowv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = now() &rArr; setTime(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minute()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hour()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day()
</UL>

<P><STRONG><a name="[2ee]"></a>hour(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, time.o(i._Z4hourm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = hour(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshCache(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hour()
</UL>

<P><STRONG><a name="[2ef]"></a>hour()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i._Z4hourv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = hour() &rArr; hour(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hour(unsigned long)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[2f0]"></a>tone(unsigned char, unsigned)</STRONG> (Thumb, 156 bytes, Stack size 32 bytes, tone.o(i._Z4tonehj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptBase
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_Tone(unsigned, int)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
</UL>

<P><STRONG><a name="[2f1]"></a>tone(unsigned char, unsigned, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, tone.o(i._Z4tonehjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_Tone(unsigned, int)
</UL>

<P><STRONG><a name="[2f2]"></a>year(unsigned long)</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, time.o(i._Z4yearm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = year(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshCache(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year()
</UL>

<P><STRONG><a name="[2f3]"></a>year()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i._Z4yearv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = year() &rArr; year(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year(unsigned long)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[2f4]"></a>month(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, time.o(i._Z5monthm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = month(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshCache(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month()
</UL>

<P><STRONG><a name="[2f5]"></a>month()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i._Z5monthv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = month() &rArr; month(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month(unsigned long)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[2f6]"></a>minute(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, time.o(i._Z6minutem))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = minute(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshCache(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minute()
</UL>

<P><STRONG><a name="[2f7]"></a>minute()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i._Z6minutev))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = minute() &rArr; minute(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minute(unsigned long)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[2df]"></a>noTone(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, tone.o(i._Z6noToneh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = noTone(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone_TimerHandler()
</UL>

<P><STRONG><a name="[2f8]"></a>second(unsigned long)</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, time.o(i._Z6secondm))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = second(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshCache(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second()
</UL>

<P><STRONG><a name="[2f9]"></a>second()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, time.o(i._Z6secondv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = second() &rArr; second(unsigned long) &rArr; refreshCache(unsigned long) &rArr; breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second(unsigned long)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[2fa]"></a>catgets(__rw::__rw_cat*, int, int, const char*)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, rwcats.o(i._Z7catgetsPN4__rw8__rw_catEiiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = catgets(__rw::__rw_cat*, int, int, const char*) &rArr; __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
</UL>

<P><STRONG><a name="[2fc]"></a>catopen(const char*, int)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, rwcats.o(i._Z7catopenPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = catopen(const char*, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[2ff]"></a>setTime(int, int, int, int, int, int)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, time.o(i._Z7setTimeiiiiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = setTime(int, int, int, int, int, int) &rArr; makeTime(tmElements_t&)
</UL>
<BR>[Calls]<UL><LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;makeTime(tmElements_t&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[2ed]"></a>setTime(unsigned long)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, time.o(i._Z7setTimem))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setTime(unsigned long)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime(int, int, int, int, int, int)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
</UL>

<P><STRONG><a name="[301]"></a>App_Init()</STRONG> (Thumb, 304 bytes, Stack size 80 bytes, app.o(i._Z8App_Initv))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = App_Init() &rArr; PageManager::Push(const char*, const PageBase::Stash_t*) &rArr; PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_set_bg_color
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::Init(_lv_obj_t*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::Center()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::Init()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(PageFactory*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Install(const char*, const char*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SetGlobalLoadAnimType(PageManager::LoadAnim_t, unsigned short, int(*)(const _lv_anim_t*))
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[300]"></a>makeTime(tmElements_t&)</STRONG> (Thumb, 210 bytes, Stack size 28 bytes, time.o(i._Z8makeTimeR12tmElements_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = makeTime(tmElements_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime(int, int, int, int, int, int)
</UL>

<P><STRONG><a name="[2c6]"></a>breakTime(unsigned long, tmElements_t&)</STRONG> (Thumb, 264 bytes, Stack size 28 bytes, time.o(i._Z9breakTimemR12tmElements_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = breakTime(unsigned long, tmElements_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refreshCache(unsigned long)
</UL>

<P><STRONG><a name="[310]"></a>curTimeMS()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, sdspicard.o(i._Z9curTimeMSv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = curTimeMS()
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::waitNotBusy(unsigned short)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::isTimedOut(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[122]"></a>AppFactory::CreatePage(const char*)</STRONG> (Thumb, 150 bytes, Stack size 8 bytes, appfactory.o(i._ZN10AppFactory10CreatePageEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = AppFactory::CreatePage(const char*) &rArr; Page::LiveMap::LiveMap() &rArr; Page::LiveMapModel::LiveMapModel() &rArr; TileConv::TileConv(unsigned, unsigned, unsigned) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::Dialplate()
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::Template()
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::Startup()
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::LiveMap()
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::SystemInfos()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> appfactory.o(.constdata__ZTV10AppFactory)
</UL>
<P><STRONG><a name="[316]"></a>DataCenter::AddAccount(Account*)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, datacenter.o(i._ZN10DataCenter10AddAccountEP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::SearchAccount(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
</UL>

<P><STRONG><a name="[319]"></a>DataCenter::RemoveAccount(Account*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datacenter.o(i._ZN10DataCenter13RemoveAccountEP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DataCenter::RemoveAccount(Account*) &rArr; DataCenter::Remove(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, Account*)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Remove(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, Account*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
</UL>

<P><STRONG><a name="[317]"></a>DataCenter::SearchAccount(const char*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, datacenter.o(i._ZN10DataCenter13SearchAccountEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::AddAccount(Account*)
</UL>

<P><STRONG><a name="[31b]"></a>DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, datacenter.o(i._ZN10DataCenter4FindEPSt6vectorIP7AccountSaIS2_EEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Unsubscribe(const char*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>

<P><STRONG><a name="[31a]"></a>DataCenter::Remove(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, Account*)</STRONG> (Thumb, 60 bytes, Stack size 12 bytes, datacenter.o(i._ZN10DataCenter6RemoveEPSt6vectorIP7AccountSaIS2_EES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = DataCenter::Remove(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, Account*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Unsubscribe(const char*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::RemoveAccount(Account*)
</UL>

<P><STRONG><a name="[31c]"></a>DataCenter::DataCenter(const char*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, datacenter.o(i._ZN10DataCenterC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = DataCenter::DataCenter(const char*) &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___12_DataProc_cpp_e3929772
</UL>

<P><STRONG><a name="[8ac]"></a>DataCenter::DataCenter__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, datacenter.o(i._ZN10DataCenterC1EPKc), UNUSED)

<P><STRONG><a name="[d4]"></a>DataCenter::~DataCenter()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, datacenter.o(i._ZN10DataCenterD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = DataCenter::~DataCenter() &rArr; Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataproc.o(i.__sti___12_DataProc_cpp_e3929772)
</UL>
<P><STRONG><a name="[8ad]"></a>DataCenter::~DataCenter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, datacenter.o(i._ZN10DataCenterD1Ev), UNUSED)

<P><STRONG><a name="[36b]"></a>RawDegrees::RawDegrees()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tinygps++.o(i._ZN10RawDegreesC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::TinyGPSPlus()
</UL>

<P><STRONG><a name="[8ae]"></a>RawDegrees::RawDegrees__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tinygps++.o(i._ZN10RawDegreesC1Ev), UNUSED)

<P><STRONG><a name="[97]"></a>Recorder_t::~Recorder_t()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dp_recorder.o(i._ZN10Recorder_tD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Recorder_t::~Recorder_t() &rArr; String::~String() &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_recorder.o(i._Z17_DP_Recorder_InitP7Account)
</UL>
<P><STRONG><a name="[8af]"></a>Recorder_t::~Recorder_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dp_recorder.o(i._ZN10Recorder_tD1Ev), UNUSED)

<P><STRONG><a name="[48e]"></a>TonePlayer::Play()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayer4PlayEv))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_PlayMusic(const char*)
</UL>

<P><STRONG><a name="[47c]"></a>TonePlayer::Update(unsigned)</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, toneplayer.o(i._ZN10TonePlayer6UpdateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TonePlayer::Update(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_Update()
</UL>

<P><STRONG><a name="[48d]"></a>TonePlayer::SetMusic(const TonePlayer::MusicNode_t*, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayer8SetMusicEPKNS_11MusicNode_tEt))
<BR><BR>[Called By]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_PlayMusic(const char*)
</UL>

<P><STRONG><a name="[619]"></a>TonePlayer::TonePlayer()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___13_HAL_Audio_cpp_0a059262
</UL>

<P><STRONG><a name="[8b0]"></a>TonePlayer::TonePlayer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, toneplayer.o(i._ZN10TonePlayerC1Ev), UNUSED)

<P><STRONG><a name="[486]"></a>ButtonEvent::EventAttach(void(*)(ButtonEvent*, int))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, buttonevent.o(i._ZN11ButtonEvent11EventAttachEPFvPS_iE))
<BR><BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_Init()
</UL>

<P><STRONG><a name="[320]"></a>ButtonEvent::EventMonitor(bool)</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, buttonevent.o(i._ZN11ButtonEvent12EventMonitorEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ButtonEvent::EventMonitor(bool) &rArr; ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_Update()
</UL>

<P><STRONG><a name="[321]"></a>ButtonEvent::GetTickElaps(unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, buttonevent.o(i._ZN11ButtonEvent12GetTickElapsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventMonitor(bool)
</UL>

<P><STRONG><a name="[322]"></a>ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, buttonevent.o(i._ZN11ButtonEventC1Ettt))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_HAL_Encoder_cpp_1362964a
</UL>

<P><STRONG><a name="[8b1]"></a>ButtonEvent::ButtonEvent__sub_object(unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, buttonevent.o(i._ZN11ButtonEventC1Ettt), UNUSED)

<P><STRONG><a name="[323]"></a>FileWrapper::write(const unsigned char*, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, storageservice.o(i._ZN11FileWrapper5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(char)
</UL>

<P><STRONG><a name="[325]"></a>FileWrapper::FileWrapper(const char*, unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, storageservice.o(i._ZN11FileWrapperC1EPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FileWrapper::FileWrapper(const char*, unsigned char) &rArr; lv_fs_open &rArr; lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
</UL>

<P><STRONG><a name="[8b2]"></a>FileWrapper::FileWrapper__sub_object(const char*, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, storageservice.o(i._ZN11FileWrapperC1EPKch), UNUSED)

<P><STRONG><a name="[327]"></a>PageManager::GetStackTop()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pm_base.o(i._ZN11PageManager11GetStackTopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = PageManager::GetStackTop() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::back() &rArr; std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Calls]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::back()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Pop()
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTopAfter()
</UL>

<P><STRONG><a name="[32a]"></a>PageManager::StateUpdate(PageBase*)</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, pm_state.o(i._ZN11PageManager11StateUpdateEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 860 + Unknown Stack Size
<LI>Call Chain = PageManager::StateUpdate(PageBase*) &rArr; PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateWillDisappearExecute(PageBase*)
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateDidDisappearExecute(PageBase*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateWillAppearExecute(PageBase*)
<LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateDidAppearExecute(PageBase*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUnloadExecute(PageBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onSwitchAnimFinish(_lv_anim_t*)
</UL>

<P><STRONG><a name="[331]"></a>PageManager::FindPageInPool(const char*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, pm_base.o(i._ZN11PageManager14FindPageInPoolEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PageManager::FindPageInPool(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Register(PageBase*, const char*)
</UL>

<P><STRONG><a name="[332]"></a>PageManager::RootEnableDrag(_lv_obj_t*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pm_drag.o(i._ZN11PageManager14RootEnableDragEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = PageManager::RootEnableDrag(_lv_obj_t*) &rArr; lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
</UL>

<P><STRONG><a name="[34d]"></a>PageManager::SwitchReqCheck()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, pm_router.o(i._ZN11PageManager14SwitchReqCheckEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PageManager::SwitchReqCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onSwitchAnimFinish(_lv_anim_t*)
</UL>

<P><STRONG><a name="[334]"></a>PageManager::AnimDefaultInit(_lv_anim_t*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, pm_router.o(i._ZN11PageManager15AnimDefaultInitEP10_lv_anim_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PageManager::AnimDefaultInit(_lv_anim_t*) &rArr; lv_anim_init
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimCreate(PageBase*)
</UL>

<P><STRONG><a name="[336]"></a>PageManager::FindPageInStack(const char*)</STRONG> (Thumb, 74 bytes, Stack size 56 bytes, pm_base.o(i._ZN11PageManager15FindPageInStackEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 932 + Unknown Stack Size
<LI>Call Chain = PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::pop()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::back()
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::empty() const
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
</UL>

<P><STRONG><a name="[33a]"></a>PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimCreate(PageBase*)
</UL>

<P><STRONG><a name="[a5]"></a>PageManager::onRootDragEvent(_lv_event_t*)</STRONG> (Thumb, 360 bytes, Stack size 168 bytes, pm_drag.o(i._ZN11PageManager15onRootDragEventEP11_lv_event_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = PageManager::onRootDragEvent(_lv_event_t*) &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::AnimDefaultInit(_lv_anim_t*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::RootGetDragPredict(short*, short*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_drag.o(i._ZN11PageManager14RootEnableDragEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[345]"></a>PageManager::GetStackTopAfter()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, pm_base.o(i._ZN11PageManager16GetStackTopAfterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::pop()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTop()
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
</UL>

<P><STRONG><a name="[32b]"></a>PageManager::StateLoadExecute(PageBase*)</STRONG> (Thumb, 148 bytes, Stack size 64 bytes, pm_state.o(i._ZN11PageManager16StateLoadExecuteEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::RootEnableDrag(_lv_obj_t*)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTopAfter()
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
</UL>

<P><STRONG><a name="[349]"></a>PageManager::SwitchAnimCreate(PageBase*)</STRONG> (Thumb, 110 bytes, Stack size 128 bytes, pm_router.o(i._ZN11PageManager16SwitchAnimCreateEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = PageManager::SwitchAnimCreate(PageBase*) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::AnimDefaultInit(_lv_anim_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateWillDisappearExecute(PageBase*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateWillAppearExecute(PageBase*)
</UL>

<P><STRONG><a name="[ad]"></a>PageManager::onRootAnimFinish(_lv_anim_t*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pm_drag.o(i._ZN11PageManager16onRootAnimFinishEP10_lv_anim_t))
<BR>[Address Reference Count : 1]<UL><LI> pm_drag.o(i._ZN11PageManager15onRootDragEventEP11_lv_event_t)
</UL>
<P><STRONG><a name="[ac]"></a>PageManager::onRootAsyncLeave(void*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, pm_drag.o(i._ZN11PageManager16onRootAsyncLeaveEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = PageManager::onRootAsyncLeave(void*) &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_drag.o(i._ZN11PageManager15onRootDragEventEP11_lv_event_t)
</UL>
<P><STRONG><a name="[33f]"></a>PageManager::RootGetDragPredict(short*, short*)</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, pm_drag.o(i._ZN11PageManager18RootGetDragPredictEPsS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PageManager::RootGetDragPredict(short*, short*)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_vect
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[330]"></a>PageManager::StateUnloadExecute(PageBase*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, pm_state.o(i._ZN11PageManager18StateUnloadExecuteEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = PageManager::StateUnloadExecute(PageBase*) &rArr; lv_obj_del_async &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del_async
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
</UL>

<P><STRONG><a name="[ae]"></a>PageManager::onSwitchAnimFinish(_lv_anim_t*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pm_router.o(i._ZN11PageManager18onSwitchAnimFinishEP10_lv_anim_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = PageManager::onSwitchAnimFinish(_lv_anim_t*) &rArr; PageManager::StateUpdate(PageBase*) &rArr; PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimTypeUpdate(PageBase*)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchReqCheck()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_router.o(i._ZN11PageManager16SwitchAnimCreateEP8PageBase)
</UL>
<P><STRONG><a name="[351]"></a>PageManager::SwitchAnimStateCheck()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, pm_router.o(i._ZN11PageManager20SwitchAnimStateCheckEv))
<BR><BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Pop()
</UL>

<P><STRONG><a name="[34e]"></a>PageManager::SwitchAnimTypeUpdate(PageBase*)</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pm_router.o(i._ZN11PageManager20SwitchAnimTypeUpdateEP8PageBase))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onSwitchAnimFinish(_lv_anim_t*)
</UL>

<P><STRONG><a name="[30c]"></a>PageManager::SetGlobalLoadAnimType(PageManager::LoadAnim_t, unsigned short, int(*)(const _lv_anim_t*))</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, pm_router.o(i._ZN11PageManager21SetGlobalLoadAnimTypeENS_10LoadAnim_tEtPFiPK10_lv_anim_tE))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(PageFactory*)
</UL>

<P><STRONG><a name="[32d]"></a>PageManager::StateDidAppearExecute(PageBase*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pm_state.o(i._ZN11PageManager21StateDidAppearExecuteEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PageManager::StateDidAppearExecute(PageBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
</UL>

<P><STRONG><a name="[32c]"></a>PageManager::StateWillAppearExecute(PageBase*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, pm_state.o(i._ZN11PageManager22StateWillAppearExecuteEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PageManager::StateWillAppearExecute(PageBase*) &rArr; PageManager::SwitchAnimCreate(PageBase*) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimCreate(PageBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
</UL>

<P><STRONG><a name="[32f]"></a>PageManager::StateDidDisappearExecute(PageBase*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, pm_state.o(i._ZN11PageManager24StateDidDisappearExecuteEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = PageManager::StateDidDisappearExecute(PageBase*) &rArr; lv_obj_add_flag &rArr; lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
</UL>

<P><STRONG><a name="[32e]"></a>PageManager::StateWillDisappearExecute(PageBase*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, pm_state.o(i._ZN11PageManager25StateWillDisappearExecuteEP8PageBase))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = PageManager::StateWillDisappearExecute(PageBase*) &rArr; PageManager::SwitchAnimCreate(PageBase*) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimCreate(PageBase*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
</UL>

<P><STRONG><a name="[350]"></a>PageManager::Pop()</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, pm_router.o(i._ZN11PageManager3PopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + Unknown Stack Size
<LI>Call Chain = PageManager::Pop() &rArr; PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*) &rArr; PageManager::StateUpdate(PageBase*) &rArr; PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTop()
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimStateCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onEvent(_lv_event_t*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[30d]"></a>PageManager::Push(const char*, const PageBase::Stash_t*)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, pm_router.o(i._ZN11PageManager4PushEPKcPKN8PageBase7Stash_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = PageManager::Push(const char*, const PageBase::Stash_t*) &rArr; PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInStack(const char*)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInPool(const char*)
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimStateCheck()
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onTimer(_lv_timer_t*)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onBtnClicked(_lv_obj_t*)
</UL>

<P><STRONG><a name="[30b]"></a>PageManager::Install(const char*, const char*)</STRONG> (Thumb, 76 bytes, Stack size 24 bytes, pm_base.o(i._ZN11PageManager7InstallEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = PageManager::Install(const char*, const char*) &rArr; PageManager::Register(PageBase*, const char*) &rArr; std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Register(PageBase*, const char*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
</UL>

<P><STRONG><a name="[355]"></a>PageManager::Register(PageBase*, const char*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, pm_base.o(i._ZN11PageManager8RegisterEP8PageBasePKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = PageManager::Register(PageBase*, const char*) &rArr; std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInPool(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Install(const char*, const char*)
</UL>

<P><STRONG><a name="[353]"></a>PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, pm_router.o(i._ZN11PageManager8SwitchToEP8PageBasebPKNS0_7Stash_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 892 + Unknown Stack Size
<LI>Call Chain = PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*) &rArr; PageManager::StateUpdate(PageBase*) &rArr; PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to PM_Router_cpp]::lv_obj_move_foreground(_lv_obj_t*)
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUpdate(PageBase*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimTypeUpdate(PageBase*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Pop()
</UL>

<P><STRONG><a name="[302]"></a>PageManager::PageManager(PageFactory*)</STRONG> (Thumb, 80 bytes, Stack size 64 bytes, pm_base.o(i._ZN11PageManagerC1EP11PageFactory))
<BR><BR>[Stack]<UL><LI>Max Depth = 940 + Unknown Stack Size
<LI>Call Chain = PageManager::PageManager(PageFactory*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SetGlobalLoadAnimType(PageManager::LoadAnim_t, unsigned short, int(*)(const _lv_anim_t*))
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque()
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_init()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
</UL>

<P><STRONG><a name="[8b3]"></a>PageManager::PageManager__sub_object(PageFactory*)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, pm_base.o(i._ZN11PageManagerC1EP11PageFactory), UNUSED)

<P><STRONG><a name="[a3]"></a>PageManager::~PageManager()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, pm_base.o(i._ZN11PageManagerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = PageManager::~PageManager() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;PageBase*&rang;::deallocate(PageBase**, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app.o(i._Z8App_Initv)
</UL>
<P><STRONG><a name="[8b4]"></a>PageManager::~PageManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pm_base.o(i._ZN11PageManagerD1Ev), UNUSED)

<P><STRONG><a name="[478]"></a>TinyGPSDate::day()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tinygps++.o(i._ZN11TinyGPSDate3dayEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[476]"></a>TinyGPSDate::year()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, tinygps++.o(i._ZN11TinyGPSDate4yearEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[477]"></a>TinyGPSDate::month()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tinygps++.o(i._ZN11TinyGPSDate5monthEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[35a]"></a>TinyGPSDate::commit()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tinygps++.o(i._ZN11TinyGPSDate6commitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TinyGPSDate::commit()
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[35b]"></a>TinyGPSPlus::parseDecimal(const char*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tinygps++.o(i._ZN11TinyGPSPlus12parseDecimalEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = TinyGPSPlus::parseDecimal(const char*) &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[35c]"></a>TinyGPSPlus::parseDegrees(const char*, RawDegrees&)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, tinygps++.o(i._ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TinyGPSPlus::parseDegrees(const char*, RawDegrees&) &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::setLongitude(const char*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::setLatitude(const char*)
</UL>

<P><STRONG><a name="[35d]"></a>TinyGPSPlus::distanceBetween(double, double, double, double)</STRONG> (Thumb, 396 bytes, Stack size 64 bytes, tinygps++.o(i._ZN11TinyGPSPlus15distanceBetweenEdddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TinyGPSPlus::distanceBetween(double, double, double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetDistanceOffset(HAL::GPS_Info_t*, double, double)
</UL>

<P><STRONG><a name="[35f]"></a>TinyGPSPlus::endOfTermHandler()</STRONG> (Thumb, 594 bytes, Stack size 16 bytes, tinygps++.o(i._ZN11TinyGPSPlus16endOfTermHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TinyGPSPlus::endOfTermHandler() &rArr; TinyGPSLocation::setLongitude(const char*) &rArr; TinyGPSPlus::parseDegrees(const char*, RawDegrees&) &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::commit()
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::setLongitude(const char*)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::setLatitude(const char*)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSInteger::commit()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDecimal::commit()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSCustom::commit()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSCustom::set(const char*)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSTime::commit()
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::fromHex(char)
<LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::parseDecimal(const char*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDate::commit()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atol
</UL>
<BR>[Called By]<UL><LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::encode(char)
</UL>

<P><STRONG><a name="[369]"></a>TinyGPSPlus::encode(char)</STRONG> (Thumb, 170 bytes, Stack size 16 bytes, tinygps++.o(i._ZN11TinyGPSPlus6encodeEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TinyGPSPlus::encode(char) &rArr; TinyGPSPlus::endOfTermHandler() &rArr; TinyGPSLocation::setLongitude(const char*) &rArr; TinyGPSPlus::parseDegrees(const char*, RawDegrees&) &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>
<BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Update()
</UL>

<P><STRONG><a name="[360]"></a>TinyGPSPlus::fromHex(char)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, tinygps++.o(i._ZN11TinyGPSPlus7fromHexEc))
<BR><BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[36a]"></a>TinyGPSPlus::TinyGPSPlus()</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, tinygps++.o(i._ZN11TinyGPSPlusC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TinyGPSPlus::TinyGPSPlus()
</UL>
<BR>[Calls]<UL><LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDecimal::TinyGPSDecimal()
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RawDegrees::RawDegrees()
</UL>
<BR>[Called By]<UL><LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_HAL_GPS_cpp_3487eba5
</UL>

<P><STRONG><a name="[8b5]"></a>TinyGPSPlus::TinyGPSPlus__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tinygps++.o(i._ZN11TinyGPSPlusC1Ev), UNUSED)

<P><STRONG><a name="[479]"></a>TinyGPSTime::hour()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, tinygps++.o(i._ZN11TinyGPSTime4hourEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[361]"></a>TinyGPSTime::commit()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tinygps++.o(i._ZN11TinyGPSTime6commitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TinyGPSTime::commit()
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[47a]"></a>TinyGPSTime::minute()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tinygps++.o(i._ZN11TinyGPSTime6minuteEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[47b]"></a>TinyGPSTime::second()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, tinygps++.o(i._ZN11TinyGPSTime6secondEv))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[127]"></a>Adafruit_GFX::startWrite()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10startWriteEv))
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[128]"></a>Adafruit_GFX::writePixel(short, short, unsigned short)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX10writePixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_GFX::writePixel(short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[480]"></a>Adafruit_GFX::setTextSize(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX11setTextSizeEh))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[47f]"></a>Adafruit_GFX::setTextWrap(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX11setTextWrapEb))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
</UL>

<P><STRONG><a name="[496]"></a>Adafruit_GFX::setTextColor(unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX12setTextColorEt))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[482]"></a>Adafruit_GFX::setTextColor(unsigned short, unsigned short)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX12setTextColorEtt))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
</UL>

<P><STRONG><a name="[12d]"></a>Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::drawFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[129]"></a>Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 18 bytes, Stack size 24 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX13writeFillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_GFX::writeFillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[12a]"></a>Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX14writeFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_GFX::writeFastVLine(short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[123]"></a>Adafruit_GFX::write(unsigned char)</STRONG> (Thumb, 252 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Adafruit_GFX::write(unsigned char) &rArr; Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[481]"></a>Adafruit_GFX::setFont(const GFXfont*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX7setFontEPK7GFXfont))
<BR><BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[36d]"></a>Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)</STRONG> (Thumb, 544 bytes, Stack size 104 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8drawCharEsshtth))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Adafruit_GFX::drawChar(short, short, unsigned char, unsigned short, unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::write(unsigned char)
</UL>

<P><STRONG><a name="[12c]"></a>Adafruit_GFX::endWrite()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8endWriteEv))
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[12e]"></a>Adafruit_GFX::fillRect(short, short, short, short, unsigned short)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX8fillRectEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Adafruit_GFX::fillRect(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[12b]"></a>Adafruit_GFX::writeLine(short, short, short, short, unsigned short)</STRONG> (Thumb, 172 bytes, Stack size 56 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFX9writeLineEsssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Adafruit_GFX::writeLine(short, short, short, short, unsigned short)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[3c0]"></a>Adafruit_GFX::Adafruit_GFX__sub_object(short, short)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adafruit_gfx.o(i._ZN12Adafruit_GFXC2Ess))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[308]"></a>ResourcePool::Init()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, resourcepool.o(i._ZN12ResourcePool4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = ResourcePool::Init() &rArr; [local to ResourcePool_cpp]::Resource_Init() &rArr; ResourceManager::AddResource(const char*, void*) &rArr; std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::SetDefault(void*)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ResourcePool_cpp]::Resource_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
</UL>

<P><STRONG><a name="[370]"></a>ResourcePool::GetFont(const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, resourcepool.o(i._ZN12ResourcePool7GetFontEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ResourcePool::GetFont(const char*) &rArr; ResourceManager::GetResource(const char*) &rArr; ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::GetResource(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[372]"></a>ResourcePool::GetImage(const char*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, resourcepool.o(i._ZN12ResourcePool8GetImageEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ResourcePool::GetImage(const char*) &rArr; ResourceManager::GetResource(const char*) &rArr; ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::GetResource(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetArrowTheme(const char*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::SetBtnRecImgSrc(const char*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[373]"></a>lv_poly_line::get_points(lv_poly_line::single_line_t*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, lv_poly_line.o(i._ZN12lv_poly_line10get_pointsEPNS_13single_line_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_poly_line::get_points(lv_poly_line::single_line_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::stop()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append_to_end(const lv_point_t*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::refresh_line()
</UL>

<P><STRONG><a name="[375]"></a>lv_poly_line::get_end_line()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_poly_line.o(i._ZN12lv_poly_line12get_end_lineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_poly_line::get_end_line()
</UL>
<BR>[Calls]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append_to_end(const lv_point_t*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_end_point(lv_point_t*)
</UL>

<P><STRONG><a name="[377]"></a>lv_poly_line::refresh_line()</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, lv_poly_line.o(i._ZN12lv_poly_line12refresh_lineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = lv_poly_line::refresh_line() &rArr; lv_line_set_points &rArr; lv_obj_refresh_self_size &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_points(lv_poly_line::single_line_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::start()
</UL>

<P><STRONG><a name="[379]"></a>lv_poly_line::append_to_end(const lv_point_t*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_poly_line.o(i._ZN12lv_poly_line13append_to_endEPK10lv_point_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = lv_poly_line::append_to_end(const lv_point_t*) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_end_line()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_points(lv_poly_line::single_line_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineAppendToEnd(int, int)
</UL>

<P><STRONG><a name="[37b]"></a>lv_poly_line::get_end_point(lv_point_t*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_poly_line.o(i._ZN12lv_poly_line13get_end_pointEP10lv_point_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_poly_line::get_end_point(lv_point_t*) &rArr; lv_poly_line::get_end_line()
</UL>
<BR>[Calls]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_end_line()
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetLineActivePoint(short, short)
</UL>

<P><STRONG><a name="[37c]"></a>lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_poly_line.o(i._ZN12lv_poly_line13single_line_tC1ERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::~lv_poly_line()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
</UL>

<P><STRONG><a name="[8b6]"></a>lv_poly_line::single_line_t::single_line_t__sub_object(const lv_poly_line::single_line_t&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lv_poly_line.o(i._ZN12lv_poly_line13single_line_tC1ERKS0_), UNUSED)

<P><STRONG><a name="[37e]"></a>lv_poly_line::single_line_t::operator =(const lv_poly_line::single_line_t&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_poly_line.o(i._ZN12lv_poly_line13single_line_taSERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = lv_poly_line::single_line_t::operator =(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
</UL>

<P><STRONG><a name="[380]"></a>lv_poly_line::stop()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_poly_line.o(i._ZN12lv_poly_line4stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_poly_line::stop() &rArr; lv_line_set_points &rArr; lv_obj_refresh_self_size &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_points(lv_poly_line::single_line_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onTrackLineEvent(TrackLineFilter*, TrackLineFilter::Event_t*)
</UL>

<P><STRONG><a name="[381]"></a>lv_poly_line::reset()</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, lv_poly_line.o(i._ZN12lv_poly_line5resetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = lv_poly_line::reset() &rArr; lv_obj_add_flag &rArr; lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onTrackLineEvent(TrackLineFilter*, TrackLineFilter::Event_t*)
</UL>

<P><STRONG><a name="[382]"></a>lv_poly_line::start()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_poly_line.o(i._ZN12lv_poly_line5startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 828 + Unknown Stack Size
<LI>Call Chain = lv_poly_line::start() &rArr; lv_poly_line::add_line() &rArr; std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&) &rArr; std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::refresh_line()
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onTrackLineEvent(TrackLineFilter*, TrackLineFilter::Event_t*)
</UL>

<P><STRONG><a name="[384]"></a>lv_poly_line::append(const lv_point_t*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_poly_line.o(i._ZN12lv_poly_line6appendEPK10lv_point_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = lv_poly_line::append(const lv_point_t*) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineAppend(int, int)
</UL>

<P><STRONG><a name="[383]"></a>lv_poly_line::add_line()</STRONG> (Thumb, 82 bytes, Stack size 40 bytes, lv_poly_line.o(i._ZN12lv_poly_line8add_lineEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = lv_poly_line::add_line() &rArr; std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&) &rArr; std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::allocator&lang;lv_point_t&rang;&)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::start()
</UL>

<P><STRONG><a name="[4c0]"></a>lv_poly_line::lv_poly_line(_lv_obj_t*)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_poly_line.o(i._ZN12lv_poly_lineC1EP9_lv_obj_t))
<BR><BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[8b7]"></a>lv_poly_line::lv_poly_line__sub_object(_lv_obj_t*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lv_poly_line.o(i._ZN12lv_poly_lineC1EP9_lv_obj_t), UNUSED)

<P><STRONG><a name="[38b]"></a>lv_poly_line::~lv_poly_line()</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, lv_poly_line.o(i._ZN12lv_poly_lineD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = lv_poly_line::~lv_poly_line() &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_destroy(lv_poly_line::single_line_t*, lv_poly_line::single_line_t*)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector()
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::allocator&lang;lv_point_t&rang;&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Called By]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Delete()
</UL>

<P><STRONG><a name="[8b8]"></a>lv_poly_line::~lv_poly_line__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, lv_poly_line.o(i._ZN12lv_poly_lineD1Ev), UNUSED)

<P><STRONG><a name="[368]"></a>TinyGPSCustom::set(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, tinygps++.o(i._ZN13TinyGPSCustom3setEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TinyGPSCustom::set(const char*) &rArr; strncpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[365]"></a>TinyGPSCustom::commit()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, tinygps++.o(i._ZN13TinyGPSCustom6commitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TinyGPSCustom::commit() &rArr; strcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[d7]"></a>TrackFilter_t::~TrackFilter_t()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dp_trackfilter.o(i._ZN13TrackFilter_tD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TrackFilter_t::~TrackFilter_t()
</UL>
<BR>[Calls]<UL><LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::~TrackPointFilter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_trackfilter.o(i.__sti___18_DP_TrackFilter_cpp_a5ac639c)
</UL>
<P><STRONG><a name="[8b9]"></a>TrackFilter_t::~TrackFilter_t__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dp_trackfilter.o(i._ZN13TrackFilter_tD1Ev), UNUSED)

<P><STRONG><a name="[2a5]"></a>HardwareSerial::IRQHandler()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial10IRQHandlerEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = HardwareSerial::IRQHandler() &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearITPendingBit
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART1_IRQHandler
</UL>

<P><STRONG><a name="[131]"></a>HardwareSerial::read()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial4readEv))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[49d]"></a>HardwareSerial::begin(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Init()
</UL>

<P><STRONG><a name="[392]"></a>HardwareSerial::begin(unsigned, SERIAL_Config)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj13SERIAL_Config), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[393]"></a>HardwareSerial::begin(unsigned, SERIAL_Config, unsigned char, unsigned char)</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, hardwareserial.o(i._ZN14HardwareSerial5beginEj13SERIAL_Confighh), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_INTConfig
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned, SERIAL_Config)
</UL>

<P><STRONG><a name="[12f]"></a>HardwareSerial::write(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, hardwareserial.o(i._ZN14HardwareSerial5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HardwareSerial::write(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[130]"></a>HardwareSerial::available()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerial9availableEv))
<BR><BR>[Called By]<UL><LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[61c]"></a>HardwareSerial::HardwareSerial(USART_Type*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP10USART_Type))
<BR><BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_HardwareSerial_cpp_5d0e368d
</UL>

<P><STRONG><a name="[8ba]"></a>HardwareSerial::HardwareSerial__sub_object(USART_Type*)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, hardwareserial.o(i._ZN14HardwareSerialC1EP10USART_Type), UNUSED)

<P><STRONG><a name="[398]"></a>PointContainer::PopFullPoint(PointContainer::FullPoint_t*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, pointcontainer.o(i._ZN14PointContainer12PopFullPointEPNS_11FullPoint_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PointContainer::PopFullPoint(PointContainer::FullPoint_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PopPoint(PointContainer::FullPoint_t*)
</UL>

<P><STRONG><a name="[39a]"></a>PointContainer::PushFullPoint(const PointContainer::FullPoint_t*)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, pointcontainer.o(i._ZN14PointContainer13PushFullPointEPKNS_11FullPoint_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = PointContainer::PushFullPoint(const PointContainer::FullPoint_t*) &rArr; std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&) &rArr; std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PushPoint(const PointContainer::FullPoint_t*)
</UL>

<P><STRONG><a name="[39e]"></a>PointContainer::IsFlag(const PointContainer::DiffPoint_t*)</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pointcontainer.o(i._ZN14PointContainer6IsFlagEPKNS_11DiffPoint_tE))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PushPoint(const PointContainer::FullPoint_t*)
</UL>

<P><STRONG><a name="[39c]"></a>PointContainer::PopPoint(PointContainer::FullPoint_t*)</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, pointcontainer.o(i._ZN14PointContainer8PopPointEPNS_11FullPoint_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PointContainer::PopPoint(PointContainer::FullPoint_t*) &rArr; PointContainer::PopFullPoint(PointContainer::FullPoint_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::size() const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PopFullPoint(PointContainer::FullPoint_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[4fa]"></a>PointContainer::PopStart()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pointcontainer.o(i._ZN14PointContainer8PopStartEv))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[39d]"></a>PointContainer::PushPoint(const PointContainer::FullPoint_t*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, pointcontainer.o(i._ZN14PointContainer9PushPointEPKNS_11FullPoint_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = PointContainer::PushPoint(const PointContainer::FullPoint_t*) &rArr; PointContainer::PushFullPoint(const PointContainer::FullPoint_t*) &rArr; std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&) &rArr; std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::size() const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::IsFlag(const PointContainer::DiffPoint_t*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PushFullPoint(const PointContainer::FullPoint_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[39f]"></a>PointContainer::PointContainer()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, pointcontainer.o(i._ZN14PointContainerC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = PointContainer::PointContainer() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*)
</UL>

<P><STRONG><a name="[8bb]"></a>PointContainer::PointContainer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pointcontainer.o(i._ZN14PointContainerC1Ev), UNUSED)

<P><STRONG><a name="[3a0]"></a>PointContainer::~PointContainer()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, pointcontainer.o(i._ZN14PointContainerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = PointContainer::~PointContainer() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*)
</UL>

<P><STRONG><a name="[8bc]"></a>PointContainer::~PointContainer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, pointcontainer.o(i._ZN14PointContainerD1Ev), UNUSED)

<P><STRONG><a name="[5de]"></a>SdSpiLibDriver::setSpiSettings(SPISettings)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, sdspicard.o(i._ZN14SdSpiLibDriver14setSpiSettingsE11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdSpiLibDriver::setSpiSettings(SPISettings)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
</UL>

<P><STRONG><a name="[3a1]"></a>StorageService::SearchNode(const char*)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, storageservice.o(i._ZN14StorageService10SearchNodeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = StorageService::SearchNode(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::Remove(const char*)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::Add(const char*, void*, unsigned short, StorageService::DataType_t)
</UL>

<P><STRONG><a name="[3a2]"></a>StorageService::Add(const char*, void*, unsigned short, StorageService::DataType_t)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, storageservice.o(i._ZN14StorageService3AddEPKcPvtNS_10DataType_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = StorageService::Add(const char*, void*, unsigned short, StorageService::DataType_t) &rArr; std::vector&lang;StorageService::Node_t*, std::allocator&lang;StorageService::Node_t*&rang;&rang;::_C_insert_aux(StorageService::Node_t**, StorageService::Node_t*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;StorageService::Node_t*, std::allocator&lang;StorageService::Node_t*&rang;&rang;::_C_insert_aux(StorageService::Node_t**, StorageService::Node_t*const &)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SearchNode(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[3a4]"></a>StorageService::Remove(const char*)</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, storageservice.o(i._ZN14StorageService6RemoveEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = StorageService::Remove(const char*) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SearchNode(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[3a5]"></a>StorageService::LoadFile()</STRONG> (Thumb, 278 bytes, Stack size 2128 bytes, storageservice.o(i._ZN14StorageService8LoadFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2640<LI>Call Chain = StorageService::LoadFile() &rArr; ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::VariantData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StaticJsonDocument&lang;(unsigned)2048&rang;::StaticJsonDocument()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::DeserializationError::operator void(ArduinoJson6184_11::DeserializationError::*)() const() const
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrapper::FileWrapper(const char*, unsigned char)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onLoad(Account*)
</UL>

<P><STRONG><a name="[3ae]"></a>StorageService::SaveFile()</STRONG> (Thumb, 468 bytes, Stack size 2160 bytes, storageservice.o(i._ZN14StorageService8SaveFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 2296<LI>Call Chain = StorageService::SaveFile() &rArr; T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StaticJsonDocument&lang;(unsigned)2048&rang;::StaticJsonDocument()
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getOrAddMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6184_11::MemoryPool*)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::toObject()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setFloat(float)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setType(unsigned char)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrapper::FileWrapper(const char*, unsigned char)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[61a]"></a>StorageService::StorageService(const char*, unsigned)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, storageservice.o(i._ZN14StorageServiceC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = StorageService::StorageService(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___14_DP_Storage_cpp_d0a046f3
</UL>

<P><STRONG><a name="[8bd]"></a>StorageService::StorageService__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, storageservice.o(i._ZN14StorageServiceC1EPKcj), UNUSED)

<P><STRONG><a name="[d5]"></a>StorageService::~StorageService()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, storageservice.o(i._ZN14StorageServiceD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = StorageService::~StorageService() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_storage.o(i.__sti___14_DP_Storage_cpp_d0a046f3)
</UL>
<P><STRONG><a name="[8be]"></a>StorageService::~StorageService__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, storageservice.o(i._ZN14StorageServiceD1Ev), UNUSED)

<P><STRONG><a name="[363]"></a>TinyGPSDecimal::commit()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tinygps++.o(i._ZN14TinyGPSDecimal6commitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TinyGPSDecimal::commit()
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[36c]"></a>TinyGPSDecimal::TinyGPSDecimal()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, tinygps++.o(i._ZN14TinyGPSDecimalC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::TinyGPSPlus()
</UL>

<P><STRONG><a name="[8bf]"></a>TinyGPSDecimal::TinyGPSDecimal__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, tinygps++.o(i._ZN14TinyGPSDecimalC1Ev), UNUSED)

<P><STRONG><a name="[364]"></a>TinyGPSInteger::commit()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, tinygps++.o(i._ZN14TinyGPSInteger6commitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TinyGPSInteger::commit()
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[135]"></a>Adafruit_ST7789::fillScreen(unsigned short)</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778910fillScreenEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::fillScreen(unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[133]"></a>Adafruit_ST7789::setRotation(unsigned char)</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778911setRotationEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_ST7789::setRotation(unsigned char) &rArr; Adafruit_ST7789::writeData(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[3b5]"></a>Adafruit_ST7789::writeData16(unsigned short)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778911writeData16Et))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setAddrWindow(short, short, short, short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawPixel(short, short, unsigned short)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short)
</UL>

<P><STRONG><a name="[3b6]"></a>Adafruit_ST7789::writeCommand(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778912writeCommandEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_ST7789::writeCommand(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setAddrWindow(short, short, short, short)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setRotation(unsigned char)
</UL>

<P><STRONG><a name="[134]"></a>Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778913drawFastVLineEssst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::drawFastVLine(short, short, short, unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[136]"></a>Adafruit_ST7789::setAddrWindow(short, short, short, short)</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST778913setAddrWindowEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::setAddrWindow(short, short, short, short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_SetAddrWindow(short, short, short, short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[3ba]"></a>Adafruit_ST7789::begin()</STRONG> (Thumb, 580 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77895beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Adafruit_ST7789::begin() &rArr; SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
</UL>

<P><STRONG><a name="[3b9]"></a>Adafruit_ST7789::spiWrite(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77898spiWriteEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>

<P><STRONG><a name="[132]"></a>Adafruit_ST7789::drawPixel(short, short, unsigned short)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77899drawPixelEsst))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Adafruit_ST7789::drawPixel(short, short, unsigned short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[137]"></a>Adafruit_ST7789::setCursor(short, short)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77899setCursorEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_ST7789::setCursor(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
</UL>
<P><STRONG><a name="[3b7]"></a>Adafruit_ST7789::writeData(unsigned char)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST77899writeDataEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Adafruit_ST7789::writeData(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::spiWrite(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setRotation(unsigned char)
</UL>

<P><STRONG><a name="[3bf]"></a>Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST7789C1Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___15_HAL_Display_cpp_6b788b14
</UL>

<P><STRONG><a name="[8c0]"></a>Adafruit_ST7789::Adafruit_ST7789__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, adafruit_st7789.o(i._ZN15Adafruit_ST7789C1Ehhh), UNUSED)

<P><STRONG><a name="[3c1]"></a>ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, resourcemanager.o(i._ZN15ResourceManager10SearchNodeEPKcPNS_12ResourceNodeE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::GetResource(const char*)
<LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::AddResource(const char*, void*)
</UL>

<P><STRONG><a name="[36f]"></a>ResourceManager::SetDefault(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, resourcemanager.o(i._ZN15ResourceManager10SetDefaultEPv))
<BR><BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::Init()
</UL>

<P><STRONG><a name="[3c2]"></a>ResourceManager::AddResource(const char*, void*)</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, resourcemanager.o(i._ZN15ResourceManager11AddResourceEPKcPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 740 + Unknown Stack Size
<LI>Call Chain = ResourceManager::AddResource(const char*, void*) &rArr; std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;ResourceManager::ResourceNode&rang;::construct(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to ResourcePool_cpp]::Resource_Init()
</UL>

<P><STRONG><a name="[371]"></a>ResourceManager::GetResource(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, resourcemanager.o(i._ZN15ResourceManager11GetResourceEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ResourceManager::GetResource(const char*) &rArr; ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::SearchNode(const char*, ResourceManager::ResourceNode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
</UL>

<P><STRONG><a name="[61b]"></a>ResourceManager::ResourceManager()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, resourcemanager.o(i._ZN15ResourceManagerC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___16_ResourcePool_cpp_3959e929
</UL>

<P><STRONG><a name="[8c1]"></a>ResourceManager::ResourceManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, resourcemanager.o(i._ZN15ResourceManagerC1Ev), UNUSED)

<P><STRONG><a name="[d6]"></a>ResourceManager::~ResourceManager()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, resourcemanager.o(i._ZN15ResourceManagerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ResourceManager::~ResourceManager() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resourcepool.o(i.__sti___16_ResourcePool_cpp_3959e929)
</UL>
<P><STRONG><a name="[8c2]"></a>ResourceManager::~ResourceManager__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, resourcemanager.o(i._ZN15ResourceManagerD1Ev), UNUSED)

<P><STRONG><a name="[3c5]"></a>StringSumHelper::StringSumHelper(const String&)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpx.o(i._ZN15StringSumHelperC1ERK6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = StringSumHelper::StringSumHelper(const String&) &rArr; String::String(const String&) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
</UL>

<P><STRONG><a name="[8c3]"></a>StringSumHelper::StringSumHelper__sub_object(const String&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, gpx.o(i._ZN15StringSumHelperC1ERK6String), UNUSED)

<P><STRONG><a name="[366]"></a>TinyGPSLocation::setLatitude(const char*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tinygps++.o(i._ZN15TinyGPSLocation11setLatitudeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TinyGPSLocation::setLatitude(const char*) &rArr; TinyGPSPlus::parseDegrees(const char*, RawDegrees&) &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::parseDegrees(const char*, RawDegrees&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[367]"></a>TinyGPSLocation::setLongitude(const char*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, tinygps++.o(i._ZN15TinyGPSLocation12setLongitudeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TinyGPSLocation::setLongitude(const char*) &rArr; TinyGPSPlus::parseDegrees(const char*, RawDegrees&) &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::parseDegrees(const char*, RawDegrees&)
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[3c7]"></a>TinyGPSLocation::lat()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tinygps++.o(i._ZN15TinyGPSLocation3latEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TinyGPSLocation::lat() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[3ca]"></a>TinyGPSLocation::lng()</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, tinygps++.o(i._ZN15TinyGPSLocation3lngEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TinyGPSLocation::lng() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[362]"></a>TinyGPSLocation::commit()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, tinygps++.o(i._ZN15TinyGPSLocation6commitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TinyGPSLocation::commit() &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::endOfTermHandler()
</UL>

<P><STRONG><a name="[3cb]"></a>TrackLineFilter::OutputPoint(const TrackLineFilter::Point_t*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tracklinefilter.o(i._ZN15TrackLineFilter11OutputPointEPKNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TrackLineFilter::OutputPoint(const TrackLineFilter::Point_t*) &rArr; TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*)
</UL>

<P><STRONG><a name="[542]"></a>TrackLineFilter::SetClipArea(const TrackLineFilter::Area_t*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, tracklinefilter.o(i._ZN15TrackLineFilter11SetClipAreaEPKNS_6Area_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TrackLineFilter::SetClipArea(const TrackLineFilter::Area_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)
</UL>

<P><STRONG><a name="[3d0]"></a>TrackLineFilter::GetIsPointInArea(const TrackLineFilter::Area_t*, const TrackLineFilter::Point_t*)</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, tracklinefilter.o(i._ZN15TrackLineFilter16GetIsPointInAreaEPKNS_6Area_tEPKNS_7Point_tE))
<BR><BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*)
</UL>

<P><STRONG><a name="[537]"></a>TrackLineFilter::SetOutputPointCallback(void(*)(TrackLineFilter*, TrackLineFilter::Event_t*))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tracklinefilter.o(i._ZN15TrackLineFilter22SetOutputPointCallbackEPFvPS_PNS_7Event_tEE))
<BR><BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[3cd]"></a>TrackLineFilter::Reset()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tracklinefilter.o(i._ZN15TrackLineFilter5ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TrackLineFilter::Reset() &rArr; TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)
</UL>

<P><STRONG><a name="[3ce]"></a>TrackLineFilter::PushEnd()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, tracklinefilter.o(i._ZN15TrackLineFilter7PushEndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TrackLineFilter::PushEnd() &rArr; TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)
</UL>

<P><STRONG><a name="[3cf]"></a>TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, tracklinefilter.o(i._ZN15TrackLineFilter9PushPointEPKNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*) &rArr; TrackLineFilter::OutputPoint(const TrackLineFilter::Point_t*) &rArr; TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
<LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::GetIsPointInArea(const TrackLineFilter::Area_t*, const TrackLineFilter::Point_t*)
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::OutputPoint(const TrackLineFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushPoint(int, int)
</UL>

<P><STRONG><a name="[3d1]"></a>TrackLineFilter::PushPoint(int, int)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, livemap.o(i._ZN15TrackLineFilter9PushPointEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TrackLineFilter::PushPoint(int, int) &rArr; TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*) &rArr; TrackLineFilter::OutputPoint(const TrackLineFilter::Point_t*) &rArr; TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[3cc]"></a>TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, tracklinefilter.o(i._ZN15TrackLineFilter9SendEventENS_11EventCode_tEPKNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushEnd()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::Reset()
<LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::OutputPoint(const TrackLineFilter::Point_t*)
</UL>

<P><STRONG><a name="[3d2]"></a>TrackLineFilter::TrackLineFilter()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, tracklinefilter.o(i._ZN15TrackLineFilterC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TrackLineFilter::TrackLineFilter() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::LiveMapModel()
</UL>

<P><STRONG><a name="[8c4]"></a>TrackLineFilter::TrackLineFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, tracklinefilter.o(i._ZN15TrackLineFilterC1Ev), UNUSED)

<P><STRONG><a name="[3da]"></a>TrackPointFilter::OutputPoint(const TrackPointFilter::Point_t*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, trackpointfilter.o(i._ZN16TrackPointFilter11OutputPointEPKNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TrackPointFilter::OutputPoint(const TrackPointFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushEnd()
</UL>

<P><STRONG><a name="[3d3]"></a>TrackPointFilter::GetIsOnSameSide(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)</STRONG> (Thumb, 170 bytes, Stack size 56 bytes, trackpointfilter.o(i._ZN16TrackPointFilter15GetIsOnSameSideEPKNS_6Line_tEPKNS_7Point_tES5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TrackPointFilter::GetIsOnSameSide(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[3d5]"></a>TrackPointFilter::GetVerticalLine(TrackPointFilter::Line_t*, const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, trackpointfilter.o(i._ZN16TrackPointFilter15GetVerticalLineEPNS_6Line_tEPKS0_PKNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TrackPointFilter::GetVerticalLine(TrackPointFilter::Line_t*, const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[2e7]"></a>TrackPointFilter::SetOffsetThreshold(double)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trackpointfilter.o(i._ZN16TrackPointFilter18SetOffsetThresholdEd))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TrackFilter_Init(Account*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[4fb]"></a>TrackPointFilter::SetOutputPointCallback(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trackpointfilter.o(i._ZN16TrackPointFilter22SetOutputPointCallbackEPFvPS_PKNS_7Point_tEE))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[4fc]"></a>TrackPointFilter::SetSecondFilterModeEnable(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, trackpointfilter.o(i._ZN16TrackPointFilter25SetSecondFilterModeEnableEb))
<BR><BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[4ad]"></a>TrackPointFilter::Reset()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, trackpointfilter.o(i._ZN16TrackPointFilter5ResetEv))
<BR><BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[3d6]"></a>TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)</STRONG> (Thumb, 370 bytes, Stack size 96 bytes, trackpointfilter.o(i._ZN16TrackPointFilter7GetLineEPNS_6Line_tEPKNS_7Point_tES4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[3d9]"></a>TrackPointFilter::PushEnd()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, trackpointfilter.o(i._ZN16TrackPointFilter7PushEndEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TrackPointFilter::PushEnd() &rArr; TrackPointFilter::OutputPoint(const TrackPointFilter::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::OutputPoint(const TrackPointFilter::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[3db]"></a>TrackPointFilter::GetOffset(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)</STRONG> (Thumb, 176 bytes, Stack size 40 bytes, trackpointfilter.o(i._ZN16TrackPointFilter9GetOffsetEPKNS_6Line_tEPKNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = TrackPointFilter::GetOffset(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*) &rArr; TrackPointFilter::QuickSort(double) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(double)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::QuickSort(double)
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[3de]"></a>TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)</STRONG> (Thumb, 200 bytes, Stack size 80 bytes, trackpointfilter.o(i._ZN16TrackPointFilter9PushPointEPKNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*) &rArr; TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetOffset(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetVerticalLine(TrackPointFilter::Line_t*, const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetIsOnSameSide(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::OutputPoint(const TrackPointFilter::Point_t*)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
</UL>

<P><STRONG><a name="[3dc]"></a>TrackPointFilter::QuickSort(double)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, trackpointfilter.o(i._ZN16TrackPointFilter9QuickSortEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TrackPointFilter::QuickSort(double) &rArr; __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetOffset(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[3e0]"></a>TrackPointFilter::TrackPointFilter()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, trackpointfilter.o(i._ZN16TrackPointFilterC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TrackPointFilter::TrackPointFilter() &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_DP_TrackFilter_cpp_a5ac639c
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::LiveMapModel()
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[8c5]"></a>TrackPointFilter::TrackPointFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, trackpointfilter.o(i._ZN16TrackPointFilterC1Ev), UNUSED)

<P><STRONG><a name="[38e]"></a>TrackPointFilter::~TrackPointFilter()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, trackpointfilter.o(i._ZN16TrackPointFilterD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackFilter_t::~TrackFilter_t()
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[8c6]"></a>TrackPointFilter::~TrackPointFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, trackpointfilter.o(i._ZN16TrackPointFilterD1Ev), UNUSED)

<P><STRONG><a name="[3b1]"></a>ArduinoJson6184_11::VariantData::setType(unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, storageservice.o(i._ZN18ArduinoJson6184_1111VariantData7setTypeEh))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseNumericValue(ArduinoJson6184_11::VariantData&)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&)
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::toObject()
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setFloat(float)
</UL>

<P><STRONG><a name="[3b2]"></a>ArduinoJson6184_11::VariantData::setFloat(float)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, storageservice.o(i._ZN18ArduinoJson6184_1111VariantData8setFloatEf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6184_11::VariantData::setFloat(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&)
</UL>

<P><STRONG><a name="[3af]"></a>ArduinoJson6184_11::VariantData::toObject()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, storageservice.o(i._ZN18ArduinoJson6184_1111VariantData8toObjectEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6184_11::VariantData::toObject()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[824]"></a>ArduinoJson6184_11::VariantSlot::next()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, storageservice.o(i._ZN18ArduinoJson6184_1111VariantSlot4nextEv))
<BR><BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)
</UL>

<P><STRONG><a name="[3e1]"></a>ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&)</STRONG> (Thumb, 396 bytes, Stack size 24 bytes, storageservice.o(i._ZN18ArduinoJson6184_1111parseNumberEPKcRNS_11VariantDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&) &rArr; ArduinoJson6184_11::VariantData::setFloat(float)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setFloat(float)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asIntegral&lang;int&rang;() const
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseNumericValue(ArduinoJson6184_11::VariantData&)
</UL>

<P><STRONG><a name="[81d]"></a>ArduinoJson6184_11::StringCopier::startString()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, storageservice.o(i._ZN18ArduinoJson6184_1112StringCopier11startStringEv))
<BR><BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[3e2]"></a>ArduinoJson6184_11::StringCopier::save()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, storageservice.o(i._ZN18ArduinoJson6184_1112StringCopier4saveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6184_11::StringCopier::save()
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[820]"></a>ArduinoJson6184_11::StringCopier::append(char)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, storageservice.o(i._ZN18ArduinoJson6184_1112StringCopier6appendEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6184_11::StringCopier::append(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey()
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString()
</UL>

<P><STRONG><a name="[80f]"></a>ArduinoJson6184_11::CollectionData::addSlot(ArduinoJson6184_11::MemoryPool*)</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, storageservice.o(i._ZN18ArduinoJson6184_1114CollectionData7addSlotEPNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = ArduinoJson6184_11::CollectionData::addSlot(ArduinoJson6184_11::MemoryPool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getOrAddMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6184_11::MemoryPool*)
</UL>

<P><STRONG><a name="[811]"></a>ArduinoJson6184_11::EscapeSequence::escapeTable(bool)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, storageservice.o(i._ZN18ArduinoJson6184_1114EscapeSequence11escapeTableEb))
<BR><BR>[Called By]<UL><LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString()
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitString(const char*)
</UL>

<P><STRONG><a name="[3e4]"></a>Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)</STRONG> (Thumb, 384 bytes, Stack size 64 bytes, tilesystem.o(i._ZN18Microsoft_MapPoint10TileSystem16LatLongToPixelXYEddiPiS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to TileSystem_cpp]::Clip(double, double, double)
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::ConvertMapCoordinate(double, double, int*, int*)
</UL>

<P><STRONG><a name="[437]"></a>GPX::getMetaData()</STRONG> (Thumb, 368 bytes, Stack size 80 bytes, gpx.o(i._ZN3GPX11getMetaDataEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = GPX::getMetaData() &rArr; GPX::wrapCDATA(String) &rArr; String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringSumHelper::StringSumHelper(const String&)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const StringSumHelper&, const String&)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::wrapCDATA(String)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[438]"></a>GPX::getTrakOpen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX11getTrakOpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPX::getTrakOpen() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[433]"></a>GPX::setMetaDesc(String)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX11setMetaDescE6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPX::setMetaDesc(String) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[432]"></a>GPX::setMetaName(String)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX11setMetaNameE6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPX::setMetaName(String) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[427]"></a>GPX::getTrakClose()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX12getTrakCloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPX::getTrakClose() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)
</UL>

<P><STRONG><a name="[43a]"></a>GPX::getTrakSegOpen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX14getTrakSegOpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPX::getTrakSegOpen() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[425]"></a>GPX::getTrakSegClose()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX15getTrakSegCloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPX::getTrakSegClose() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)
</UL>

<P><STRONG><a name="[430]"></a>GPX::getPt(String, String, String)</STRONG> (Thumb, 304 bytes, Stack size 88 bytes, gpx.o(i._ZN3GPX5getPtE6StringS0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = GPX::getPt(String, String, String) &rArr; GPX::wrapCDATA(String) &rArr; String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const String&)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const char*)
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringSumHelper::StringSumHelper(const String&)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const StringSumHelper&, const char*)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::replace(const String&, const String&)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::wrapCDATA(String)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[42c]"></a>GPX::setEle(String)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX6setEleE6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPX::setEle(String) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[439]"></a>GPX::getInfo()</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, gpx.o(i._ZN3GPX7getInfoEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = GPX::getInfo() &rArr; GPX::wrapCDATA(String) &rArr; String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const String&)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const char*)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::wrapCDATA(String)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[436]"></a>GPX::getOpen()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX7getOpenEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPX::getOpen() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[435]"></a>GPX::setDesc(String)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX7setDescE6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPX::setDesc(String) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[434]"></a>GPX::setName(String)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX7setNameE6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPX::setName(String) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
</UL>

<P><STRONG><a name="[42e]"></a>GPX::setTime(String)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX7setTimeE6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = GPX::setTime(String) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[428]"></a>GPX::getClose()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, gpx.o(i._ZN3GPX8getCloseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = GPX::getClose() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)
</UL>

<P><STRONG><a name="[464]"></a>GPX::wrapCDATA(String)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, gpx.o(i._ZN3GPX9wrapCDATAE6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = GPX::wrapCDATA(String) &rArr; String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const String&)
<LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getInfo()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
</UL>

<P><STRONG><a name="[2d9]"></a>GPX::GPX()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, gpx.o(i._ZN3GPXC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = GPX::GPX() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Recorder_Init(Account*)
</UL>

<P><STRONG><a name="[8c7]"></a>GPX::GPX__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, gpx.o(i._ZN3GPXC1Ev), UNUSED)

<P><STRONG><a name="[4a2]"></a>HAL::Audio_Init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_audio.o(i._ZN3HAL10Audio_InitEv))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[469]"></a>HAL::Clock_Init()</STRONG> (Thumb, 68 bytes, Stack size 40 bytes, hal_clock.o(i._ZN3HAL10Clock_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 328 + Unknown Stack Size
<LI>Call Chain = HAL::Clock_Init() &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_GetInfo(HAL::Clock_Info_t*)
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Init
<LI><a href="#[46a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_GetWeekString(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[46b]"></a>HAL::GPS_Update()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_gps.o(i._ZN3HAL10GPS_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = HAL::GPS_Update() &rArr; TinyGPSPlus::encode(char) &rArr; TinyGPSPlus::endOfTermHandler() &rArr; TinyGPSLocation::setLongitude(const char*) &rArr; TinyGPSPlus::parseDegrees(const char*, RawDegrees&) &rArr; atol &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::available()
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::read()
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::encode(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Update()
</UL>

<P><STRONG><a name="[46c]"></a>HAL::HAL_Update()</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, hal.o(i._ZN3HAL10HAL_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = HAL::HAL_Update() &rArr; HAL::SD_Update() &rArr; [local to HAL_SD_CARD_cpp]::SD_Check(bool) &rArr; HAL::SD_Init() &rArr; [local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Memory_DumpInfo()
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Update()
<LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_EventMonitor()
<LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_Update()
<LI><a href="#[46b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Update()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[46e]"></a>HAL::IMU_Update()</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, hal_imu.o(i._ZN3HAL10IMU_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL::IMU_Update() &rArr; LSM6DSM::GetMotion6(short*, short*, short*, short*, short*, short*) &rArr; LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::GetCurrentStep()
<LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::GetMotion6(short*, short*, short*, short*, short*, short*)
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Update()
</UL>

<P><STRONG><a name="[473]"></a>HAL::Power_Init()</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, hal_power.o(i._ZN3HAL10Power_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = HAL::Power_Init() &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_SetAutoLowPowerEnable(bool)
<LI><a href="#[3f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Power_cpp]::Power_ADC_Init()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[3ec]"></a>HAL::GPS_GetInfo(HAL::GPS_Info_t*)</STRONG> (Thumb, 218 bytes, Stack size 24 bytes, hal_gps.o(i._ZN3HAL11GPS_GetInfoEPNS_10GPS_Info_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HAL::GPS_GetInfo(HAL::GPS_Info_t*) &rArr; TinyGPSLocation::lng() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lng()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lat()
<LI><a href="#[47b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSTime::second()
<LI><a href="#[47a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSTime::minute()
<LI><a href="#[479]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSTime::hour()
<LI><a href="#[477]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDate::month()
<LI><a href="#[476]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDate::year()
<LI><a href="#[478]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDate::day()
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_GPS_cpp]::onTimer(Account*)
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_GPS_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[30e]"></a>HAL::SD_GetReady()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_sd_card.o(i._ZN3HAL11SD_GetReadyEv))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_ready(_lv_fs_drv_t*)
</UL>

<P><STRONG><a name="[3ea]"></a>HAL::Audio_Update()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_audio.o(i._ZN3HAL12Audio_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL::Audio_Update() &rArr; TonePlayer::Update(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[47c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::Update(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_cpp]::HAL_InterrputUpdate()
</UL>

<P><STRONG><a name="[47d]"></a>HAL::Display_Init()</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, hal_display.o(i._ZN3HAL12Display_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL::Display_Init() &rArr; HAL::Backlight_SetGradual(unsigned short, unsigned short) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setCursor(short, short)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setRotation(unsigned char)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setFont(const GFXfont*)
<LI><a href="#[482]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextColor(unsigned short, unsigned short)
<LI><a href="#[47f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextWrap(bool)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextSize(unsigned char)
<LI><a href="#[43c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Init()
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetGradual(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[484]"></a>HAL::Encoder_Init()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, hal_encoder.o(i._ZN3HAL12Encoder_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL::Encoder_Init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[485]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;attachInterrupt
<LI><a href="#[486]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventAttach(void(*)(ButtonEvent*, int))
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[3e8]"></a>HAL::Power_Update()</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, hal_power.o(i._ZN3HAL12Power_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = HAL::Power_Update() &rArr; HAL::Power_Shutdown() &rArr; HAL::Backlight_SetGradual(unsigned short, unsigned short) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[48a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_SoftwareStartConvCtrl
<LI><a href="#[489]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RegularChannelConfig
<LI><a href="#[487]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[488]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Shutdown()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_cpp]::HAL_InterrputUpdate()
</UL>

<P><STRONG><a name="[3f2]"></a>HAL::Clock_GetInfo(HAL::Clock_Info_t*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, hal_clock.o(i._ZN3HAL13Clock_GetInfoEPNS_12Clock_Info_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = HAL::Clock_GetInfo(HAL::Clock_Info_t*) &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Clock_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_Init()
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_GetDateTime(unsigned short*, unsigned short*)
</UL>

<P><STRONG><a name="[3f0]"></a>HAL::Clock_SetInfo(const HAL::Clock_Info_t*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, hal_clock.o(i._ZN3HAL13Clock_SetInfoEPKNS_12Clock_Info_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = HAL::Clock_SetInfo(const HAL::Clock_Info_t*) &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Clock_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[3f3]"></a>HAL::Power_GetInfo(HAL::Power_Info_t*)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, hal_power.o(i._ZN3HAL13Power_GetInfoEPNS_12Power_Info_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL::Power_GetInfo(HAL::Power_Info_t*) &rArr; map
</UL>
<BR>[Calls]<UL><LI><a href="#[48b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[48c]"></a>HAL::Backlight_Init()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_backlight.o(i._ZN3HAL14Backlight_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = HAL::Backlight_Init() &rArr; PWM_Init &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetValue(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[45c]"></a>HAL::Buzz_SetEnable(bool)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_buzz.o(i._ZN3HAL14Buzz_SetEnableEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = HAL::Buzz_SetEnable(bool) &rArr; HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_Tone(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SysConfig_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[3e9]"></a>HAL::Encoder_Update()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_encoder.o(i._ZN3HAL14Encoder_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = HAL::Encoder_Update() &rArr; ButtonEvent::EventMonitor(bool) &rArr; ButtonEvent::GetTickElaps(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventMonitor(bool)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_GetIsPush()
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_cpp]::HAL_InterrputUpdate()
</UL>

<P><STRONG><a name="[446]"></a>HAL::Power_Shutdown()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, hal_power.o(i._ZN3HAL14Power_ShutdownEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL::Power_Shutdown() &rArr; HAL::Backlight_SetGradual(unsigned short, unsigned short) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetGradual(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Update()
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Encoder_PushHandler(ButtonEvent*, int)
</UL>

<P><STRONG><a name="[423]"></a>HAL::SD_GetTypeName()</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, hal_sd_card.o(i._ZN3HAL14SD_GetTypeNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
</UL>

<P><STRONG><a name="[445]"></a>HAL::Audio_PlayMusic(const char*)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, hal_audio.o(i._ZN3HAL15Audio_PlayMusicEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL::Audio_PlayMusic(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[48d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::SetMusic(const TonePlayer::MusicNode_t*, unsigned short)
<LI><a href="#[48e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::Play()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_MusicPlayer_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_Check(bool)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Encoder_PushHandler(ButtonEvent*, int)
</UL>

<P><STRONG><a name="[2be]"></a>HAL::Encoder_GetDiff()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_encoder.o(i._ZN3HAL15Encoder_GetDiffEv))
<BR><BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_read(_lv_indev_drv_t*, lv_indev_data_t*)
</UL>

<P><STRONG><a name="[46f]"></a>HAL::Memory_DumpInfo()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hal_memory.o(i._ZN3HAL15Memory_DumpInfoEv))
<BR><BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Update()
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[48f]"></a>HAL::FaultHandle_Init()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, hal_faulthandle.o(i._ZN3HAL16FaultHandle_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = HAL::FaultHandle_Init() &rArr; cm_backtrace_init &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[422]"></a>HAL::SD_GetCardSizeMB()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, hal_sd_card.o(i._ZN3HAL16SD_GetCardSizeMBEv))
<BR><BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
</UL>

<P><STRONG><a name="[2bf]"></a>HAL::Encoder_GetIsPush()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, hal_encoder.o(i._ZN3HAL17Encoder_GetIsPushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL::Encoder_GetIsPush()
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
</UL>
<BR>[Called By]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_Update()
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_read(_lv_indev_drv_t*, lv_indev_data_t*)
</UL>

<P><STRONG><a name="[54e]"></a>HAL::Encoder_SetEnable(bool)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_encoder.o(i._ZN3HAL17Encoder_SetEnableEb))
<BR><BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewDidUnload()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewLoad()
</UL>

<P><STRONG><a name="[491]"></a>HAL::Backlight_ForceLit(bool)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, hal_backlight.o(i._ZN3HAL18Backlight_ForceLitEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = HAL::Backlight_ForceLit(bool) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[492]"></a>HAL::Backlight_GetValue()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_backlight.o(i._ZN3HAL18Backlight_GetValueEv))
<BR><BR>[Calls]<UL><LI><a href="#[493]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timer_get_compare
</UL>
<BR>[Called By]<UL><LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetGradual(unsigned short, unsigned short)
</UL>

<P><STRONG><a name="[461]"></a>HAL::Backlight_SetValue(short)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, hal_backlight.o(i._ZN3HAL18Backlight_SetValueEs))
<BR><BR>[Calls]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_Init()
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Backlight_cpp]::Backlight_AnimCallback(void*, int)
</UL>

<P><STRONG><a name="[2d4]"></a>HAL::Display_SendPixels(unsigned short*, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_display.o(i._ZN3HAL18Display_SendPixelsEPtj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = HAL::Display_SendPixels(unsigned short*, unsigned) &rArr; [local to HAL_Display_cpp]::Display_SPI_DMA_Send(const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Display_cpp]::Display_SPI_DMA_Send(const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush_cb(_lv_disp_drv_t*, const lv_area_t*, lv_color16_t*)
</UL>

<P><STRONG><a name="[470]"></a>HAL::Power_EventMonitor()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, hal_power.o(i._ZN3HAL18Power_EventMonitorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL::Power_EventMonitor()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Update()
</UL>

<P><STRONG><a name="[46a]"></a>HAL::Clock_GetWeekString(unsigned char)</STRONG> (Thumb, 32 bytes, Stack size 40 bytes, hal_clock.o(i._ZN3HAL19Clock_GetWeekStringEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL::Clock_GetWeekString(unsigned char) &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_Init()
</UL>

<P><STRONG><a name="[2d7]"></a>HAL::SD_SetEventCallback(void(*)(bool))</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_sd_card.o(i._ZN3HAL19SD_SetEventCallbackEPFvbE))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Storage_Init(Account*)
</UL>

<P><STRONG><a name="[483]"></a>HAL::Backlight_SetGradual(unsigned short, unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 80 bytes, hal_backlight.o(i._ZN3HAL20Backlight_SetGradualEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = HAL::Backlight_SetGradual(unsigned short, unsigned short) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_GetValue()
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Shutdown()
</UL>

<P><STRONG><a name="[495]"></a>HAL::Display_DumpCrashInfo(const char*)</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, hal_display.o(i._ZN3HAL21Display_DumpCrashInfoEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = HAL::Display_DumpCrashInfo(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[497]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::height() const
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setCursor(short, short)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::fillScreen(unsigned short)
<LI><a href="#[481]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setFont(const GFXfont*)
<LI><a href="#[496]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextColor(unsigned short)
<LI><a href="#[480]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_GFX::setTextSize(unsigned char)
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_ForceLit(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationHardFaultHook
</UL>

<P><STRONG><a name="[2d3]"></a>HAL::Display_SetAddrWindow(short, short, short, short)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal_display.o(i._ZN3HAL21Display_SetAddrWindowEssss))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL::Display_SetAddrWindow(short, short, short, short) &rArr; Adafruit_ST7789::setAddrWindow(short, short, short, short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::setAddrWindow(short, short, short, short)
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_flush_cb(_lv_disp_drv_t*, const lv_area_t*, lv_color16_t*)
</UL>

<P><STRONG><a name="[498]"></a>HAL::GPS_GetDistanceOffset(HAL::GPS_Info_t*, double, double)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, hal_gps.o(i._ZN3HAL21GPS_GetDistanceOffsetEPNS_10GPS_Info_tEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = HAL::GPS_GetDistanceOffset(HAL::GPS_Info_t*, double, double) &rArr; TinyGPSPlus::distanceBetween(double, double, double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
</UL>

<P><STRONG><a name="[2bb]"></a>HAL::IMU_SetCommitCallback(bool(*)(void*, void*), void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_imu.o(i._ZN3HAL21IMU_SetCommitCallbackEPFbPvS0_ES0_))
<BR><BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_IMU_Init(Account*)
</UL>

<P><STRONG><a name="[2bd]"></a>HAL::MAG_SetCommitCallback(bool(*)(void*, void*), void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_mag.o(i._ZN3HAL21MAG_SetCommitCallbackEPFbPvS0_ES0_))
<BR><BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_MAG_Init(Account*)
</UL>

<P><STRONG><a name="[499]"></a>HAL::Power_HandleTimeUpdate()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, hal_power.o(i._ZN3HAL22Power_HandleTimeUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL::Power_HandleTimeUpdate()
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[474]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_SetAutoLowPowerEnable(bool)
</UL>

<P><STRONG><a name="[7ff]"></a>HAL::Power_SetEventCallback(void(*)())</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_power.o(i._ZN3HAL22Power_SetEventCallbackEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[474]"></a>HAL::Power_SetAutoLowPowerEnable(bool)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_power.o(i._ZN3HAL27Power_SetAutoLowPowerEnableEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL::Power_SetAutoLowPowerEnable(bool) &rArr; HAL::Power_HandleTimeUpdate()
</UL>
<BR>[Calls]<UL><LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_HandleTimeUpdate()
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
</UL>

<P><STRONG><a name="[2da]"></a>HAL::Display_SetSendFinishCallback(void(*)())</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_display.o(i._ZN3HAL29Display_SetSendFinishCallbackEPFvvE))
<BR><BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init()
</UL>

<P><STRONG><a name="[44e]"></a>HAL::SD_Init()</STRONG> (Thumb, 148 bytes, Stack size 32 bytes, hal_sd_card.o(i._ZN3HAL7SD_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = HAL::SD_Init() &rArr; [local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_GetCardSizeMB()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_GetTypeName()
<LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFat::begin(unsigned char, SPISettings)
<LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCapacity()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
<LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_Check(bool)
</UL>

<P><STRONG><a name="[49c]"></a>HAL::GPS_Init()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, hal_gps.o(i._ZN3HAL8GPS_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL::GPS_Init() &rArr; Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[49e]"></a>HAL::HAL_Init()</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, hal.o(i._ZN3HAL8HAL_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 684 + Unknown Stack Size
<LI>Call Chain = HAL::HAL_Init() &rArr; HAL::SD_Init() &rArr; [local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Memory_DumpInfo()
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_init()
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_Init()
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Init()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
<LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::FaultHandle_Init()
<LI><a href="#[48c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_Init()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_Init()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_Init()
<LI><a href="#[4a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_Init()
<LI><a href="#[49d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::begin(unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterrupt
<LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TMR_Cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a0]"></a>HAL::I2C_Scan(bool)</STRONG> (Thumb, 146 bytes, Stack size 16 bytes, hal_i2c_scan.o(i._ZN3HAL8I2C_ScanEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL::I2C_Scan(bool) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(unsigned char)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::endTransmission()
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, int)
<LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[4a1]"></a>HAL::IMU_Init()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_imu.o(i._ZN3HAL8IMU_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = HAL::IMU_Init() &rArr; LSM6DSM::Init(unsigned char) &rArr; LSM6DSM::EnableAWT(short, short) &rArr; LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
<LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[2c0]"></a>HAL::Buzz_Tone(unsigned, int)</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, hal_buzz.o(i._ZN3HAL9Buzz_ToneEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_SetEnable(bool)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_Init()::[lambda(unsigned, unsigned short) (instance 1)]::_FUN(unsigned, unsigned short)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Buzz_Handler(int)
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encoder_read(_lv_indev_drv_t*, lv_indev_data_t*)
</UL>

<P><STRONG><a name="[49f]"></a>HAL::Buzz_init()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_buzz.o(i._ZN3HAL9Buzz_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = HAL::Buzz_init() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
</UL>

<P><STRONG><a name="[46d]"></a>HAL::SD_Update()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, hal_sd_card.o(i._ZN3HAL9SD_UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 708 + Unknown Stack Size
<LI>Call Chain = HAL::SD_Update() &rArr; [local to HAL_SD_CARD_cpp]::SD_Check(bool) &rArr; HAL::SD_Init() &rArr; [local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_Check(bool)
<LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
</UL>
<BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Update()
</UL>

<P><STRONG><a name="[4b2]"></a>Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, livemapview.o(i._ZN4Page11LiveMapView10Map_CreateEP9_lv_obj_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned) &rArr; Page::LiveMapView::Track_Create(_lv_obj_t*) &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
</UL>

<P><STRONG><a name="[4b5]"></a>Page::LiveMapView::SetMapTile(unsigned, unsigned)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, livemapview.o(i._ZN4Page11LiveMapView10SetMapTileEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = Page::LiveMapView::SetMapTile(unsigned, unsigned) &rArr; lv_obj_set_size &rArr; lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[4b6]"></a>Page::LiveMapView::Style_Create()</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, livemapview.o(i._ZN4Page11LiveMapView12Style_CreateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = Page::LiveMapView::Style_Create() &rArr; lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[4bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_width
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_opa
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_white()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_black()
<LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
</UL>

<P><STRONG><a name="[4b3]"></a>Page::LiveMapView::Track_Create(_lv_obj_t*)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, livemapview.o(i._ZN4Page11LiveMapView12Track_CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Page::LiveMapView::Track_Create(_lv_obj_t*) &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
<LI><a href="#[4c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::lv_poly_line(_lv_obj_t*)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
</UL>

<P><STRONG><a name="[4c1]"></a>Page::LiveMapView::SetArrowTheme(const char*)</STRONG> (Thumb, 46 bytes, Stack size 48 bytes, livemapview.o(i._ZN4Page11LiveMapView13SetArrowThemeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 312 + Unknown Stack Size
<LI>Call Chain = Page::LiveMapView::SetArrowTheme(const char*) &rArr; lv_img_set_src &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
</UL>

<P><STRONG><a name="[4c2]"></a>Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, livemapview.o(i._ZN4Page11LiveMapView15ImgLabel_CreateEP9_lv_obj_tPKvss))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
</UL>
<BR>[Called By]<UL><LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4c3]"></a>Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)</STRONG> (Thumb, 230 bytes, Stack size 32 bytes, livemapview.o(i._ZN4Page11LiveMapView15ZoomCtrl_CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 460<LI>Call Chain = Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_transition
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_get_style_width(const _lv_obj_t*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
</UL>

<P><STRONG><a name="[4c8]"></a>Page::LiveMapView::SportInfo_Create(_lv_obj_t*)</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, livemapview.o(i._ZN4Page11LiveMapView16SportInfo_CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 540<LI>Call Chain = Page::LiveMapView::SportInfo_Create(_lv_obj_t*) &rArr; Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_white()
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
</UL>

<P><STRONG><a name="[4cc]"></a>Page::LiveMapView::SetLineActivePoint(short, short)</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, livemapview.o(i._ZN4Page11LiveMapView18SetLineActivePointEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = Page::LiveMapView::SetLineActivePoint(short, short) &rArr; lv_line_set_points &rArr; lv_obj_refresh_self_size &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_end_point(lv_point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
</UL>

<P><STRONG><a name="[4cd]"></a>Page::LiveMapView::Create(_lv_obj_t*, unsigned)</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, livemapview.o(i._ZN4Page11LiveMapView6CreateEP9_lv_obj_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 564<LI>Call Chain = Page::LiveMapView::Create(_lv_obj_t*, unsigned) &rArr; Page::LiveMapView::SportInfo_Create(_lv_obj_t*) &rArr; Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_white()
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[4ce]"></a>Page::LiveMapView::Delete()</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, livemapview.o(i._ZN4Page11LiveMapView6DeleteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = Page::LiveMapView::Delete() &rArr; lv_poly_line::~lv_poly_line() &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::~lv_poly_line()
</UL>
<BR>[Called By]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidUnload()
</UL>

<P><STRONG><a name="[4d0]"></a>Page::StartupView::Create(_lv_obj_t*)</STRONG> (Thumb, 286 bytes, Stack size 120 bytes, startupview.o(i._ZN4Page11StartupView6CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = Page::StartupView::Create(_lv_obj_t*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_side
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_post
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_color
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_create
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_add_wrapper
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StartupView_cpp]::lv_obj_center(_lv_obj_t*)
<LI><a href="#[4d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StartupView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewLoad()
</UL>

<P><STRONG><a name="[4d9]"></a>Page::StartupView::Delete()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, startupview.o(i._ZN4Page11StartupView6DeleteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Page::StartupView::Delete() &rArr; lv_anim_timeline_del &rArr; lv_anim_timeline_stop &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_del
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewDidUnload()
</UL>

<P><STRONG><a name="[13c]"></a>Page::SystemInfos::onViewLoad()</STRONG> (Thumb, 102 bytes, Stack size 8 bytes, systeminfos.o(i._ZN4Page11SystemInfos10onViewLoadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfos::onViewLoad() &rArr; Page::SystemInfosModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Init()
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::AttachEvent(_lv_obj_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[4dd]"></a>Page::SystemInfos::AttachEvent(_lv_obj_t*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, systeminfos.o(i._ZN4Page11SystemInfos11AttachEventEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Page::SystemInfos::AttachEvent(_lv_obj_t*) &rArr; lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewLoad()
</UL>

<P><STRONG><a name="[bc]"></a>Page::SystemInfos::onTimerUpdate(_lv_timer_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systeminfos.o(i._ZN4Page11SystemInfos13onTimerUpdateEP11_lv_timer_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfos::onTimerUpdate(_lv_timer_t*) &rArr; Page::SystemInfos::Update() &rArr; Page::SystemInfosView::SetGPS(float, float, float, const char*, float, float) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(i._ZN4Page11SystemInfos16onViewWillAppearEv)
</UL>
<P><STRONG><a name="[13d]"></a>Page::SystemInfos::onViewDidLoad()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, systeminfos.o(i._ZN4Page11SystemInfos13onViewDidLoadEv))
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[13f]"></a>Page::SystemInfos::onViewDidAppear()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, systeminfos.o(i._ZN4Page11SystemInfos15onViewDidAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = Page::SystemInfos::onViewDidAppear() &rArr; Page::SystemInfosView::onFocus(_lv_group_t*) &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::onFocus(_lv_group_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[142]"></a>Page::SystemInfos::onViewDidUnload()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, systeminfos.o(i._ZN4Page11SystemInfos15onViewDidUnloadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = Page::SystemInfos::onViewDidUnload() &rArr; Page::SystemInfosModel::Deinit() &rArr; Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Deinit()
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Delete()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[13e]"></a>Page::SystemInfos::onViewWillAppear()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, systeminfos.o(i._ZN4Page11SystemInfos16onViewWillAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = Page::SystemInfos::onViewWillAppear() &rArr; StatusBar::SetStyle(StatusBar::Style_t) &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::SetStyle(StatusBar::Style_t)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetScrollToY(_lv_obj_t*, short, lv_anim_enable_t)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[13b]"></a>Page::SystemInfos::onCustomAttrConfig()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, systeminfos.o(i._ZN4Page11SystemInfos18onCustomAttrConfigEv))
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[141]"></a>Page::SystemInfos::onViewDidDisappear()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, systeminfos.o(i._ZN4Page11SystemInfos18onViewDidDisappearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Page::SystemInfos::onViewDidDisappear() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[140]"></a>Page::SystemInfos::onViewWillDisappear()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systeminfos.o(i._ZN4Page11SystemInfos19onViewWillDisappearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Page::SystemInfos::onViewWillDisappear() &rArr; lv_obj_fade_out &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(.constdata__ZTVN4Page11SystemInfosE)
</UL>
<P><STRONG><a name="[4de]"></a>Page::SystemInfos::Update()</STRONG> (Thumb, 280 bytes, Stack size 176 bytes, systeminfos.o(i._ZN4Page11SystemInfos6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 928 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfos::Update() &rArr; Page::SystemInfosView::SetGPS(float, float, float, const char*, float, float) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::MakeTimeString(unsigned long long, char*, unsigned short)
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetStorageInfo(bool*, const char**, char*, unsigned)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetBatteryInfo(int*, float*, char*, unsigned)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetSportInfo(float*, char*, unsigned, float*)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetRTCInfo(char*, unsigned)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetMAGInfo(float*, int*, int*, int*)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetIMUInfo(int*, char*, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetGPSInfo(float*, float*, float*, char*, unsigned, float*, float*)
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetSystem(const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetSport(float, const char*, float)
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetRTC(const char*)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetMAG(float, int, int, int)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetIMU(int, const char*)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetGPS(float, float, float, const char*, float, float)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetStorage(const char*, const char*, const char*, const char*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetBattery(int, float, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onTimerUpdate(_lv_timer_t*)
</UL>

<P><STRONG><a name="[bb]"></a>Page::SystemInfos::onEvent(_lv_event_t*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, systeminfos.o(i._ZN4Page11SystemInfos7onEventEP11_lv_event_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfos::onEvent(_lv_event_t*) &rArr; PageManager::Pop() &rArr; PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*) &rArr; PageManager::StateUpdate(PageBase*) &rArr; PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Pop()
<LI><a href="#[4f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_state
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfos.o(i._ZN4Page11SystemInfos11AttachEventEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[314]"></a>Page::SystemInfos::SystemInfos()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systeminfos.o(i._ZN4Page11SystemInfosC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFactory::CreatePage(const char*)
</UL>

<P><STRONG><a name="[8c8]"></a>Page::SystemInfos::SystemInfos__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, systeminfos.o(i._ZN4Page11SystemInfosC1Ev), UNUSED)

<P><STRONG><a name="[4f8]"></a>Page::LiveMapModel::GetGPS_Info(HAL::GPS_Info_t*)</STRONG> (Thumb, 66 bytes, Stack size 80 bytes, livemapmodel.o(i._ZN4Page12LiveMapModel11GetGPS_InfoEPN3HAL10GPS_Info_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Page::LiveMapModel::GetGPS_Info(HAL::GPS_Info_t*) &rArr; Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
</UL>

<P><STRONG><a name="[4f9]"></a>Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)</STRONG> (Thumb, 176 bytes, Stack size 168 bytes, livemapmodel.o(i._ZN4Page12LiveMapModel11TrackReloadEPFvP16TrackPointFilterPKNS1_7Point_tEEPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*) &rArr; TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*) &rArr; TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::~TrackPointFilter()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::TrackPointFilter()
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::Reset()
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::SetOffsetThreshold(double)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::SetOutputPointCallback(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*))
<LI><a href="#[4fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::ConvertMapLevelPos(int*, int*, int, int, int)
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushEnd()
<LI><a href="#[4fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::SetSecondFilterModeEnable(bool)
<LI><a href="#[4fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PopStart()
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PopPoint(PointContainer::FullPoint_t*)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)
</UL>

<P><STRONG><a name="[4fe]"></a>Page::LiveMapModel::GetArrowTheme(char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 80 bytes, livemapmodel.o(i._ZN4Page12LiveMapModel13GetArrowThemeEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Page::LiveMapModel::GetArrowTheme(char*, unsigned) &rArr; Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
</UL>

<P><STRONG><a name="[4ff]"></a>Page::LiveMapModel::GetTrackFilterActive()</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, livemap.o(i._ZN4Page12LiveMapModel20GetTrackFilterActiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Page::LiveMapModel::GetTrackFilterActive() &rArr; Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
</UL>

<P><STRONG><a name="[500]"></a>Page::LiveMapModel::Init()</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, livemapmodel.o(i._ZN4Page12LiveMapModel4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = Page::LiveMapModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::Center()
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
</UL>

<P><STRONG><a name="[501]"></a>Page::LiveMapModel::Deinit()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, livemapmodel.o(i._ZN4Page12LiveMapModel6DeinitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Page::LiveMapModel::Deinit() &rArr; Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidDisappear()
</UL>

<P><STRONG><a name="[bd]"></a>Page::LiveMapModel::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, livemapmodel.o(i._ZN4Page12LiveMapModel7onEventEP7AccountPNS1_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Page::LiveMapModel::onEvent(Account*, Account::EventParam_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemapmodel.o(i._ZN4Page12LiveMapModel4InitEv)
</UL>
<P><STRONG><a name="[502]"></a>Page::LiveMapModel::LiveMapModel()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, livemapmodel.o(i._ZN4Page12LiveMapModelC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Page::LiveMapModel::LiveMapModel() &rArr; TileConv::TileConv(unsigned, unsigned, unsigned) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::MapConv()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::TrackPointFilter()
<LI><a href="#[504]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::TileConv(unsigned, unsigned, unsigned)
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::TrackLineFilter()
</UL>
<BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::LiveMap()
</UL>

<P><STRONG><a name="[8c9]"></a>Page::LiveMapModel::LiveMapModel__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, livemapmodel.o(i._ZN4Page12LiveMapModelC1Ev), UNUSED)

<P><STRONG><a name="[505]"></a>Page::StartupModel::Init()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, startupmodel.o(i._ZN4Page12StartupModel4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = Page::StartupModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::Center()
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewLoad()
</UL>

<P><STRONG><a name="[506]"></a>Page::StartupModel::Deinit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, startupmodel.o(i._ZN4Page12StartupModel6DeinitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Page::StartupModel::Deinit() &rArr; Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewDidUnload()
</UL>

<P><STRONG><a name="[507]"></a>Page::StartupModel::PlayMusic(const char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, startupmodel.o(i._ZN4Page12StartupModel9PlayMusicEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Page::StartupModel::PlayMusic(const char*) &rArr; Account::Notify(const char*, const void*, unsigned) &rArr; Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewWillAppear()
</UL>

<P><STRONG><a name="[508]"></a>Page::TemplateView::Create(_lv_obj_t*)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, templateview.o(i._ZN4Page12TemplateView6CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = Page::TemplateView::Create(_lv_obj_t*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewLoad()
</UL>

<P><STRONG><a name="[509]"></a>Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, dialplateview.o(i._ZN4Page13DialplateView10Btn_CreateEP9_lv_obj_tPKvs))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short) &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_transition
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_hex(unsigned)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
</UL>
<BR>[Called By]<UL><LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[50e]"></a>Page::DialplateView::BtnCont_Create(_lv_obj_t*)</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, dialplateview.o(i._ZN4Page13DialplateView14BtnCont_CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = Page::DialplateView::BtnCont_Create(_lv_obj_t*) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[50f]"></a>Page::DialplateView::TopInfo_Create(_lv_obj_t*)</STRONG> (Thumb, 208 bytes, Stack size 24 bytes, dialplateview.o(i._ZN4Page13DialplateView14TopInfo_CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = Page::DialplateView::TopInfo_Create(_lv_obj_t*) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_white()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_hex(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[510]"></a>Page::DialplateView::AppearAnimStart(bool)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dialplateview.o(i._ZN4Page13DialplateView15AppearAnimStartEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Page::DialplateView::AppearAnimStart(bool) &rArr; lv_anim_timeline_start &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_start
<LI><a href="#[511]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_set_reverse
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
</UL>

<P><STRONG><a name="[513]"></a>Page::DialplateView::BottomInfo_Create(_lv_obj_t*)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, dialplateview.o(i._ZN4Page13DialplateView17BottomInfo_CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = Page::DialplateView::BottomInfo_Create(_lv_obj_t*) &rArr; Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[516]"></a>Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, dialplateview.o(i._ZN4Page13DialplateView17SubInfoGrp_CreateEP9_lv_obj_tPNS0_9SubInfo_tEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_white()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_hex(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[517]"></a>Page::DialplateView::Create(_lv_obj_t*)</STRONG> (Thumb, 172 bytes, Stack size 248 bytes, dialplateview.o(i._ZN4Page13DialplateView6CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 756<LI>Call Chain = Page::DialplateView::Create(_lv_obj_t*) &rArr; Page::DialplateView::TopInfo_Create(_lv_obj_t*) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_create
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_add_wrapper
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewLoad()
</UL>

<P><STRONG><a name="[518]"></a>Page::DialplateView::Delete()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dialplateview.o(i._ZN4Page13DialplateView6DeleteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = Page::DialplateView::Delete() &rArr; lv_anim_timeline_del &rArr; lv_anim_timeline_stop &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_del
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewDidUnload()
</UL>

<P><STRONG><a name="[519]"></a>Page::TemplateModel::GetData()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, templatemodel.o(i._ZN4Page13TemplateModel7GetDataEv))
<BR><BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::Update()
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewLoad()
</UL>

<P><STRONG><a name="[51a]"></a>Page::DialplateModel::GetGPSReady()</STRONG> (Thumb, 34 bytes, Stack size 56 bytes, dialplatemodel.o(i._ZN4Page14DialplateModel11GetGPSReadyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Page::DialplateModel::GetGPSReady() &rArr; Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onRecord(bool)
</UL>

<P><STRONG><a name="[51b]"></a>Page::DialplateModel::RecorderCommand(Page::DialplateModel::RecCmd_t)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, dialplatemodel.o(i._ZN4Page14DialplateModel15RecorderCommandENS0_8RecCmd_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Page::DialplateModel::RecorderCommand(Page::DialplateModel::RecCmd_t) &rArr; Account::Notify(const char*, const void*, unsigned) &rArr; Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onRecord(bool)
</UL>

<P><STRONG><a name="[51c]"></a>Page::DialplateModel::Init()</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, dialplatemodel.o(i._ZN4Page14DialplateModel4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = Page::DialplateModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::Center()
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewLoad()
</UL>

<P><STRONG><a name="[51d]"></a>Page::DialplateModel::Deinit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dialplatemodel.o(i._ZN4Page14DialplateModel6DeinitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Page::DialplateModel::Deinit() &rArr; Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewDidUnload()
</UL>

<P><STRONG><a name="[be]"></a>Page::DialplateModel::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, dialplatemodel.o(i._ZN4Page14DialplateModel7onEventEP7AccountPNS1_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Page::DialplateModel::onEvent(Account*, Account::EventParam_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplatemodel.o(i._ZN4Page14DialplateModel4InitEv)
</UL>
<P><STRONG><a name="[51e]"></a>Page::DialplateModel::PlayMusic(const char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dialplatemodel.o(i._ZN4Page14DialplateModel9PlayMusicEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Page::DialplateModel::PlayMusic(const char*) &rArr; Account::Notify(const char*, const void*, unsigned) &rArr; Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onRecord(bool)
</UL>

<P><STRONG><a name="[51f]"></a>Page::SystemInfosView::Group_Init()</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView10Group_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Page::SystemInfosView::Group_Init() &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_wrap
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_focus_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4f1]"></a>Page::SystemInfosView::SetBattery(int, float, const char*)</STRONG> (Thumb, 32 bytes, Stack size 32 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView10SetBatteryEifPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Page::SystemInfosView::SetBattery(int, float, const char*) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4f3]"></a>Page::SystemInfosView::SetStorage(const char*, const char*, const char*, const char*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView10SetStorageEPKcS2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 640<LI>Call Chain = Page::SystemInfosView::SetStorage(const char*, const char*, const char*, const char*) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[524]"></a>Page::SystemInfosView::Style_Init()</STRONG> (Thumb, 226 bytes, Stack size 24 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView10Style_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = Page::SystemInfosView::Style_Init() &rArr; lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_white()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_black()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_hex(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[52a]"></a>Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView11Item_CreateEPNS0_6item_tEP9_lv_obj_tPKcS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 468<LI>Call Chain = Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[52c]"></a>Page::SystemInfosView::Style_Reset()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView11Style_ResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Page::SystemInfosView::Style_Reset() &rArr; lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
</UL>
<BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Delete()
</UL>

<P><STRONG><a name="[4e2]"></a>Page::SystemInfosView::SetScrollToY(_lv_obj_t*, short, lv_anim_enable_t)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView12SetScrollToYEP9_lv_obj_ts16lv_anim_enable_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = Page::SystemInfosView::SetScrollToY(_lv_obj_t*, short, lv_anim_enable_t) &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
</UL>
<BR>[Called By]<UL><LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillAppear()
</UL>

<P><STRONG><a name="[4dc]"></a>Page::SystemInfosView::Create(_lv_obj_t*)</STRONG> (Thumb, 320 bytes, Stack size 32 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView6CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 500<LI>Call Chain = Page::SystemInfosView::Create(_lv_obj_t*) &rArr; Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Group_Init()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_black()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewLoad()
</UL>

<P><STRONG><a name="[4e0]"></a>Page::SystemInfosView::Delete()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView6DeleteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = Page::SystemInfosView::Delete() &rArr; Page::SystemInfosView::Style_Reset() &rArr; lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[521]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_focus_cb
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Reset()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewDidUnload()
</UL>

<P><STRONG><a name="[4e9]"></a>Page::SystemInfosView::SetGPS(float, float, float, const char*, float, float)</STRONG> (Thumb, 132 bytes, Stack size 128 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView6SetGPSEfffPKcff))
<BR><BR>[Stack]<UL><LI>Max Depth = 752<LI>Call Chain = Page::SystemInfosView::SetGPS(float, float, float, const char*, float, float) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4ed]"></a>Page::SystemInfosView::SetIMU(int, const char*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView6SetIMUEiPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = Page::SystemInfosView::SetIMU(int, const char*) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4eb]"></a>Page::SystemInfosView::SetMAG(float, int, int, int)</STRONG> (Thumb, 40 bytes, Stack size 32 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView6SetMAGEfiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Page::SystemInfosView::SetMAG(float, int, int, int) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4ef]"></a>Page::SystemInfosView::SetRTC(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView6SetRTCEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = Page::SystemInfosView::SetRTC(const char*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[bf]"></a>Page::SystemInfosView::onFocus(_lv_group_t*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView7onFocusEP11_lv_group_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Page::SystemInfosView::onFocus(_lv_group_t*) &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewDidAppear()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfosview.o(i._ZN4Page15SystemInfosView10Group_InitEv)
</UL>
<P><STRONG><a name="[4e7]"></a>Page::SystemInfosView::SetSport(float, const char*, float)</STRONG> (Thumb, 66 bytes, Stack size 48 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView8SetSportEfPKcf))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = Page::SystemInfosView::SetSport(float, const char*, float) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4f6]"></a>Page::SystemInfosView::SetSystem(const char*, const char*, const char*, const char*, const char*, const char*)</STRONG> (Thumb, 28 bytes, Stack size 32 bytes, systeminfosview.o(i._ZN4Page15SystemInfosView9SetSystemEPKcS2_S2_S2_S2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = Page::SystemInfosView::SetSystem(const char*, const char*, const char*, const char*, const char*, const char*) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4e8]"></a>Page::SystemInfosModel::GetGPSInfo(float*, float*, float*, char*, unsigned, float*, float*)</STRONG> (Thumb, 132 bytes, Stack size 104 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel10GetGPSInfoEPfS1_S1_PcjS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfosModel::GetGPSInfo(float*, float*, float*, char*, unsigned, float*, float*) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4ec]"></a>Page::SystemInfosModel::GetIMUInfo(int*, char*, unsigned)</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel10GetIMUInfoEPiPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfosModel::GetIMUInfo(int*, char*, unsigned) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4ea]"></a>Page::SystemInfosModel::GetMAGInfo(float*, int*, int*, int*)</STRONG> (Thumb, 60 bytes, Stack size 32 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel10GetMAGInfoEPfPiS2_S2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = Page::SystemInfosModel::GetMAGInfo(float*, int*, int*, int*) &rArr; Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4ee]"></a>Page::SystemInfosModel::GetRTCInfo(char*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 48 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel10GetRTCInfoEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfosModel::GetRTCInfo(char*, unsigned) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4e6]"></a>Page::SystemInfosModel::GetSportInfo(float*, char*, unsigned, float*)</STRONG> (Thumb, 64 bytes, Stack size 80 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel12GetSportInfoEPfPcjS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = Page::SystemInfosModel::GetSportInfo(float*, char*, unsigned, float*) &rArr; DataProc::MakeTimeString(unsigned long long, char*, unsigned short) &rArr; lv_snprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::MakeTimeString(unsigned long long, char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4f0]"></a>Page::SystemInfosModel::GetBatteryInfo(int*, float*, char*, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel14GetBatteryInfoEPiPfPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Page::SystemInfosModel::GetBatteryInfo(int*, float*, char*, unsigned) &rArr; Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4f2]"></a>Page::SystemInfosModel::GetStorageInfo(bool*, const char**, char*, unsigned)</STRONG> (Thumb, 72 bytes, Stack size 48 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel14GetStorageInfoEPbPPKcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfosModel::GetStorageInfo(bool*, const char**, char*, unsigned) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[4db]"></a>Page::SystemInfosModel::Init()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel4InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = Page::SystemInfosModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::Center()
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewLoad()
</UL>

<P><STRONG><a name="[4e1]"></a>Page::SystemInfosModel::Deinit()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systeminfosmodel.o(i._ZN4Page16SystemInfosModel6DeinitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Page::SystemInfosModel::Deinit() &rArr; Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
</UL>
<BR>[Called By]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewDidUnload()
</UL>

<P><STRONG><a name="[144]"></a>Page::LiveMap::onViewLoad()</STRONG> (Thumb, 200 bytes, Stack size 32 bytes, livemap.o(i._ZN4Page7LiveMap10onViewLoadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 596<LI>Call Chain = Page::LiveMap::onViewLoad() &rArr; Page::LiveMapView::Create(_lv_obj_t*, unsigned) &rArr; Page::LiveMapView::SportInfo_Create(_lv_obj_t*) &rArr; Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::SetLevel(int)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::SetOffsetThreshold(double)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetTileContainer(TileConv::Rect_t*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::SetFocusPos(int, int)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetMapTile(unsigned, unsigned)
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::SetOutputPointCallback(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*))
<LI><a href="#[537]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::SetOutputPointCallback(void(*)(TrackLineFilter*, TrackLineFilter::Event_t*))
<LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::AttachEvent(_lv_obj_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[536]"></a>Page::LiveMap::AttachEvent(_lv_obj_t*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, livemap.o(i._ZN4Page7LiveMap11AttachEventEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Page::LiveMap::AttachEvent(_lv_obj_t*) &rArr; lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[538]"></a>Page::LiveMap::UpdateDelay(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, livemap.o(i._ZN4Page7LiveMap11UpdateDelayEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Page::LiveMap::UpdateDelay(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[539]"></a>Page::LiveMap::CheckPosition()</STRONG> (Thumb, 196 bytes, Stack size 112 bytes, livemap.o(i._ZN4Page7LiveMap13CheckPositionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 536 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::CheckPosition() &rArr; MapConv::ConvertMapCoordinate(double, double, int*, int*) &rArr; GPS_Transform &rArr; [local to GPS_Transform_c]::transformLon(double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::SetLevel(int)
<LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::ConvertMapCoordinate(double, double, int*, int*)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[534]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetTileContainer(TileConv::Rect_t*)
<LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::SetFocusPos(int, int)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetGPS_Info(HAL::GPS_Info_t*)
<LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::GetIsMapTileContChanged()
<LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onMapTileContRefresh(const TrackLineFilter::Area_t*, int, int)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::Update()
</UL>

<P><STRONG><a name="[145]"></a>Page::LiveMap::onViewDidLoad()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, livemap.o(i._ZN4Page7LiveMap13onViewDidLoadEv))
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[53e]"></a>Page::LiveMap::SportInfoUpdate()</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, livemap.o(i._ZN4Page7LiveMap15SportInfoUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Page::LiveMap::SportInfoUpdate() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::MakeTimeString(unsigned long long, char*, unsigned short)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::Update()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
</UL>

<P><STRONG><a name="[53f]"></a>Page::LiveMap::TrackLineAppend(int, int)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, livemap.o(i._ZN4Page7LiveMap15TrackLineAppendEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::TrackLineAppend(int, int) &rArr; lv_poly_line::append(const lv_point_t*) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
<LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append(const lv_point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onTrackLineEvent(TrackLineFilter*, TrackLineFilter::Event_t*)
</UL>

<P><STRONG><a name="[541]"></a>Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, livemap.o(i._ZN4Page7LiveMap15TrackLineReloadEPKN15TrackLineFilter6Area_tEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int) &rArr; Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*) &rArr; TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*) &rArr; TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushPoint(int, int)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
<LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushEnd()
<LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::Reset()
<LI><a href="#[542]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::SetClipArea(const TrackLineFilter::Area_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onMapTileContRefresh(const TrackLineFilter::Area_t*, int, int)
</UL>

<P><STRONG><a name="[147]"></a>Page::LiveMap::onViewDidAppear()</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, livemap.o(i._ZN4Page7LiveMap15onViewDidAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = Page::LiveMap::onViewDidAppear() &rArr; lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetTrackFilterActive()
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[4fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::SetOutputPointCallback(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*))
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[14a]"></a>Page::LiveMap::onViewDidUnload()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, livemap.o(i._ZN4Page7LiveMap15onViewDidUnloadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::onViewDidUnload() &rArr; Page::LiveMapView::Delete() &rArr; lv_poly_line::~lv_poly_line() &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Delete()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[c2]"></a>Page::LiveMap::onTrackLineEvent(TrackLineFilter*, TrackLineFilter::Event_t*)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, livemap.o(i._ZN4Page7LiveMap16onTrackLineEventEP15TrackLineFilterPNS1_7Event_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::onTrackLineEvent(TrackLineFilter*, TrackLineFilter::Event_t*) &rArr; lv_poly_line::start() &rArr; lv_poly_line::add_line() &rArr; std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&) &rArr; std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::start()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::reset()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::stop()
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineAppend(int, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(i._ZN4Page7LiveMap10onViewLoadEv)
</UL>
<P><STRONG><a name="[146]"></a>Page::LiveMap::onViewWillAppear()</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, livemap.o(i._ZN4Page7LiveMap16onViewWillAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 844 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::onViewWillAppear() &rArr; Page::LiveMapModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::SetStyle(StatusBar::Style_t)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetTrackFilterActive()
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Init()
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetArrowTheme(char*, unsigned)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetArrowTheme(const char*)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::SportInfoUpdate()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[544]"></a>Page::LiveMap::MapTileContReload()</STRONG> (Thumb, 72 bytes, Stack size 104 bytes, livemap.o(i._ZN4Page7LiveMap17MapTileContReloadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::MapTileContReload() &rArr; lv_img_set_src &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetTilePos(unsigned, TileConv::Point_t*)
<LI><a href="#[546]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::ConvertMapPath(int, int, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[53c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onMapTileContRefresh(const TrackLineFilter::Area_t*, int, int)
</UL>

<P><STRONG><a name="[53d]"></a>Page::LiveMap::MapTileContUpdate(int, int, float)</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, livemap.o(i._ZN4Page7LiveMap17MapTileContUpdateEiif))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = Page::LiveMap::MapTileContUpdate(int, int, float) &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
<LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetTileContainerOffset(TileConv::Point_t*)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetFocusOffset(TileConv::Point_t*)
<LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetLineActivePoint(short, short)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
</UL>

<P><STRONG><a name="[143]"></a>Page::LiveMap::onCustomAttrConfig()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, livemap.o(i._ZN4Page7LiveMap18onCustomAttrConfigEv))
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[149]"></a>Page::LiveMap::onViewDidDisappear()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, livemap.o(i._ZN4Page7LiveMap18onViewDidDisappearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = Page::LiveMap::onViewDidDisappear() &rArr; Page::LiveMapModel::Deinit() &rArr; Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Deinit()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[148]"></a>Page::LiveMap::onViewWillDisappear()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, livemap.o(i._ZN4Page7LiveMap19onViewWillDisappearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = Page::LiveMap::onViewWillDisappear() &rArr; lv_obj_fade_out &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_out
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(.constdata__ZTVN4Page7LiveMapE)
</UL>
<P><STRONG><a name="[54a]"></a>Page::LiveMap::TrackLineAppendToEnd(int, int)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, livemap.o(i._ZN4Page7LiveMap20TrackLineAppendToEndEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 772 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::TrackLineAppendToEnd(int, int) &rArr; lv_poly_line::append_to_end(const lv_point_t*) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append_to_end(const lv_point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[53c]"></a>Page::LiveMap::onMapTileContRefresh(const TrackLineFilter::Area_t*, int, int)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, livemap.o(i._ZN4Page7LiveMap20onMapTileContRefreshEPKN15TrackLineFilter6Area_tEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::onMapTileContRefresh(const TrackLineFilter::Area_t*, int, int) &rArr; Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int) &rArr; Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*) &rArr; TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*) &rArr; TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*) &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContReload()
<LI><a href="#[541]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
</UL>

<P><STRONG><a name="[53b]"></a>Page::LiveMap::GetIsMapTileContChanged()</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, livemap.o(i._ZN4Page7LiveMap23GetIsMapTileContChangedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Page::LiveMap::GetIsMapTileContChanged() &rArr; TileConv::GetTilePos(unsigned, TileConv::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[545]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetTilePos(unsigned, TileConv::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
</UL>

<P><STRONG><a name="[54b]"></a>Page::LiveMap::Update()</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, livemap.o(i._ZN4Page7LiveMap6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::Update() &rArr; Page::LiveMap::SportInfoUpdate() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::SportInfoUpdate()
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()::[lambda(_lv_timer_t*) (instance 1)]::_FUN(_lv_timer_t*)
</UL>

<P><STRONG><a name="[c3]"></a>Page::LiveMap::onEvent(_lv_event_t*)</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, livemap.o(i._ZN4Page7LiveMap7onEventEP11_lv_event_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::onEvent(_lv_event_t*) &rArr; PageManager::Pop() &rArr; PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*) &rArr; PageManager::StateUpdate(PageBase*) &rArr; PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Pop()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::UpdateDelay(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(i._ZN4Page7LiveMap11AttachEventEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[312]"></a>Page::LiveMap::LiveMap()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, livemap.o(i._ZN4Page7LiveMapC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = Page::LiveMap::LiveMap() &rArr; Page::LiveMapModel::LiveMapModel() &rArr; TileConv::TileConv(unsigned, unsigned, unsigned) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::LiveMapModel()
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFactory::CreatePage(const char*)
</UL>

<P><STRONG><a name="[8ca]"></a>Page::LiveMap::LiveMap__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, livemap.o(i._ZN4Page7LiveMapC1Ev), UNUSED)

<P><STRONG><a name="[14c]"></a>Page::Startup::onViewLoad()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, startup.o(i._ZN4Page7Startup10onViewLoadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = Page::Startup::onViewLoad() &rArr; Page::StartupModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_set_repeat_count
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Init()
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_SetEnable(bool)
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[14d]"></a>Page::Startup::onViewDidLoad()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7Startup13onViewDidLoadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Page::Startup::onViewDidLoad() &rArr; lv_obj_fade_out &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_out
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[14f]"></a>Page::Startup::onViewDidAppear()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7Startup15onViewDidAppearEv))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[152]"></a>Page::Startup::onViewDidUnload()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, startup.o(i._ZN4Page7Startup15onViewDidUnloadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Page::Startup::onViewDidUnload() &rArr; Page::StartupView::Delete() &rArr; lv_anim_timeline_del &rArr; lv_anim_timeline_stop &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Deinit()
<LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Delete()
<LI><a href="#[54e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_SetEnable(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[14e]"></a>Page::Startup::onViewWillAppear()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, startup.o(i._ZN4Page7Startup16onViewWillAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = Page::Startup::onViewWillAppear() &rArr; lv_anim_timeline_start &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_start
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::PlayMusic(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[14b]"></a>Page::Startup::onCustomAttrConfig()</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7Startup18onCustomAttrConfigEv))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[151]"></a>Page::Startup::onViewDidDisappear()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7Startup18onViewDidDisappearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Page::Startup::onViewDidDisappear() &rArr; StatusBar::Appear(bool) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::Appear(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[150]"></a>Page::Startup::onViewWillDisappear()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7Startup19onViewWillDisappearEv))
<BR>[Address Reference Count : 1]<UL><LI> startup.o(.constdata__ZTVN4Page7StartupE)
</UL>
<P><STRONG><a name="[c6]"></a>Page::Startup::onTimer(_lv_timer_t*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7Startup7onTimerEP11_lv_timer_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = Page::Startup::onTimer(_lv_timer_t*) &rArr; PageManager::Push(const char*, const PageBase::Stash_t*) &rArr; PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup.o(i._ZN4Page7Startup10onViewLoadEv)
</UL>
<P><STRONG><a name="[315]"></a>Page::Startup::Startup()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7StartupC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFactory::CreatePage(const char*)
</UL>

<P><STRONG><a name="[8cb]"></a>Page::Startup::Startup__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup.o(i._ZN4Page7StartupC1Ev), UNUSED)

<P><STRONG><a name="[154]"></a>Page::Template::onViewLoad()</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, template.o(i._ZN4Page8Template10onViewLoadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = Page::Template::onViewLoad() &rArr; Page::TemplateView::Create(_lv_obj_t*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::TemplateModel::GetData()
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::TemplateView::Create(_lv_obj_t*)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::AttachEvent(_lv_obj_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[551]"></a>Page::Template::AttachEvent(_lv_obj_t*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, template.o(i._ZN4Page8Template11AttachEventEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Page::Template::AttachEvent(_lv_obj_t*) &rArr; lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewLoad()
</UL>

<P><STRONG><a name="[c8]"></a>Page::Template::onTimerUpdate(_lv_timer_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, template.o(i._ZN4Page8Template13onTimerUpdateEP11_lv_timer_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Page::Template::onTimerUpdate(_lv_timer_t*) &rArr; Page::Template::Update() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> template.o(i._ZN4Page8Template16onViewWillAppearEv)
</UL>
<P><STRONG><a name="[155]"></a>Page::Template::onViewDidLoad()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, template.o(i._ZN4Page8Template13onViewDidLoadEv))
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[157]"></a>Page::Template::onViewDidAppear()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, template.o(i._ZN4Page8Template15onViewDidAppearEv))
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[15a]"></a>Page::Template::onViewDidUnload()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, template.o(i._ZN4Page8Template15onViewDidUnloadEv))
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[156]"></a>Page::Template::onViewWillAppear()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, template.o(i._ZN4Page8Template16onViewWillAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = Page::Template::onViewWillAppear() &rArr; lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[153]"></a>Page::Template::onCustomAttrConfig()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, template.o(i._ZN4Page8Template18onCustomAttrConfigEv))
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[159]"></a>Page::Template::onViewDidDisappear()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, template.o(i._ZN4Page8Template18onViewDidDisappearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Page::Template::onViewDidDisappear() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[158]"></a>Page::Template::onViewWillDisappear()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, template.o(i._ZN4Page8Template19onViewWillDisappearEv))
<BR>[Address Reference Count : 1]<UL><LI> template.o(.constdata__ZTVN4Page8TemplateE)
</UL>
<P><STRONG><a name="[552]"></a>Page::Template::Update()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, template.o(i._ZN4Page8Template6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = Page::Template::Update() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::TemplateModel::GetData()
</UL>
<BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onTimerUpdate(_lv_timer_t*)
</UL>

<P><STRONG><a name="[c7]"></a>Page::Template::onEvent(_lv_event_t*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, template.o(i._ZN4Page8Template7onEventEP11_lv_event_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 924 + Unknown Stack Size
<LI>Call Chain = Page::Template::onEvent(_lv_event_t*) &rArr; PageManager::Pop() &rArr; PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*) &rArr; PageManager::StateUpdate(PageBase*) &rArr; PageManager::StateLoadExecute(PageBase*) &rArr; PageManager::GetStackTopAfter() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Pop()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> template.o(i._ZN4Page8Template11AttachEventEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[311]"></a>Page::Template::Template()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, template.o(i._ZN4Page8TemplateC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFactory::CreatePage(const char*)
</UL>

<P><STRONG><a name="[8cc]"></a>Page::Template::Template__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, template.o(i._ZN4Page8TemplateC1Ev), UNUSED)

<P><STRONG><a name="[15c]"></a>Page::Dialplate::onViewLoad()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dialplate.o(i._ZN4Page9Dialplate10onViewLoadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = Page::Dialplate::onViewLoad() &rArr; Page::DialplateModel::Init() &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Init()
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::AttachEvent(_lv_obj_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[553]"></a>Page::Dialplate::AttachEvent(_lv_obj_t*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dialplate.o(i._ZN4Page9Dialplate11AttachEventEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Page::Dialplate::AttachEvent(_lv_obj_t*) &rArr; lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewLoad()
</UL>

<P><STRONG><a name="[554]"></a>Page::Dialplate::onBtnClicked(_lv_obj_t*)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, dialplate.o(i._ZN4Page9Dialplate12onBtnClickedEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 956 + Unknown Stack Size
<LI>Call Chain = Page::Dialplate::onBtnClicked(_lv_obj_t*) &rArr; PageManager::Push(const char*, const PageBase::Stash_t*) &rArr; PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[cb]"></a>Page::Dialplate::onTimerUpdate(_lv_timer_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, dialplate.o(i._ZN4Page9Dialplate13onTimerUpdateEP11_lv_timer_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Page::Dialplate::onTimerUpdate(_lv_timer_t*) &rArr; Page::Dialplate::Update() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(i._ZN4Page9Dialplate15onViewDidAppearEv)
</UL>
<P><STRONG><a name="[15d]"></a>Page::Dialplate::onViewDidLoad()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dialplate.o(i._ZN4Page9Dialplate13onViewDidLoadEv))
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[556]"></a>Page::Dialplate::SetBtnRecImgSrc(const char*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dialplate.o(i._ZN4Page9Dialplate15SetBtnRecImgSrcEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = Page::Dialplate::SetBtnRecImgSrc(const char*) &rArr; lv_obj_set_style_bg_img_src &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
</UL>
<BR>[Called By]<UL><LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onRecord(bool)
</UL>

<P><STRONG><a name="[15f]"></a>Page::Dialplate::onViewDidAppear()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dialplate.o(i._ZN4Page9Dialplate15onViewDidAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = Page::Dialplate::onViewDidAppear() &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[162]"></a>Page::Dialplate::onViewDidUnload()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dialplate.o(i._ZN4Page9Dialplate15onViewDidUnloadEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Page::Dialplate::onViewDidUnload() &rArr; Page::DialplateView::Delete() &rArr; lv_anim_timeline_del &rArr; lv_anim_timeline_stop &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Deinit()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Delete()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[15e]"></a>Page::Dialplate::onViewWillAppear()</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, dialplate.o(i._ZN4Page9Dialplate16onViewWillAppearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = Page::Dialplate::onViewWillAppear() &rArr; Page::Dialplate::Update() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::SetStyle(StatusBar::Style_t)
<LI><a href="#[557]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_wait_release
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[520]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_wrap
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::AppearAnimStart(bool)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[15b]"></a>Page::Dialplate::onCustomAttrConfig()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, dialplate.o(i._ZN4Page9Dialplate18onCustomAttrConfigEv))
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[161]"></a>Page::Dialplate::onViewDidDisappear()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, dialplate.o(i._ZN4Page9Dialplate18onViewDidDisappearEv))
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[160]"></a>Page::Dialplate::onViewWillDisappear()</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, dialplate.o(i._ZN4Page9Dialplate19onViewWillDisappearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Page::Dialplate::onViewWillDisappear() &rArr; lv_group_remove_all_objs &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_all_objs
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(.constdata__ZTVN4Page9DialplateE)
</UL>
<P><STRONG><a name="[555]"></a>Page::Dialplate::Update()</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, dialplate.o(i._ZN4Page9Dialplate6UpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = Page::Dialplate::Update() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::MakeTimeString(unsigned long long, char*, unsigned short)
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onTimerUpdate(_lv_timer_t*)
</UL>

<P><STRONG><a name="[ca]"></a>Page::Dialplate::onEvent(_lv_event_t*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, dialplate.o(i._ZN4Page9Dialplate7onEventEP11_lv_event_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 972 + Unknown Stack Size
<LI>Call Chain = Page::Dialplate::onEvent(_lv_event_t*) &rArr; Page::Dialplate::onBtnClicked(_lv_obj_t*) &rArr; PageManager::Push(const char*, const PageBase::Stash_t*) &rArr; PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[559]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_user_data
<LI><a href="#[55a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onRecord(bool)
<LI><a href="#[554]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onBtnClicked(_lv_obj_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplate.o(i._ZN4Page9Dialplate11AttachEventEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[55a]"></a>Page::Dialplate::onRecord(bool)</STRONG> (Thumb, 186 bytes, Stack size 16 bytes, dialplate.o(i._ZN4Page9Dialplate8onRecordEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = Page::Dialplate::onRecord(bool) &rArr; Page::Dialplate::SetBtnRecImgSrc(const char*) &rArr; lv_obj_set_style_bg_img_src &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::PlayMusic(const char*)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::RecorderCommand(Page::DialplateModel::RecCmd_t)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::GetGPSReady()
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::SetBtnRecImgSrc(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[313]"></a>Page::Dialplate::Dialplate()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, dialplate.o(i._ZN4Page9DialplateC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFactory::CreatePage(const char*)
</UL>

<P><STRONG><a name="[8cd]"></a>Page::Dialplate::Dialplate__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dialplate.o(i._ZN4Page9DialplateC1Ev), UNUSED)

<P><STRONG><a name="[55b]"></a>__rw::__rw_throw(int, ...)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, rwstdexcept.o(i._ZN4__rw10__rw_throwEiz))
<BR><BR>[Stack]<UL><LI>Max Depth = 676 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[55e]"></a>__rw::__rw_allocate(unsigned, int)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, rwalloc.o(i._ZN4__rw13__rw_allocateEji))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;PageBase**&rang;::allocate(unsigned, const void*)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;StorageService::Node_t*, std::allocator&lang;StorageService::Node_t*&rang;&rang;::_C_insert_aux(StorageService::Node_t**, StorageService::Node_t*const &)
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>

<P><STRONG><a name="[31d]"></a>__rw::__rw_deallocate(void*, unsigned, int)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwalloc.o(i._ZN4__rw15__rw_deallocateEPvji))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::~DataCenter()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::~PointContainer()
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::~StorageService()
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::~lv_poly_line()
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::~ResourceManager()
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::~vector()
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned)
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;PageBase*&rang;::deallocate(PageBase**, unsigned)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;StorageService::Node_t*, std::allocator&lang;StorageService::Node_t*&rang;&rang;::_C_insert_aux(StorageService::Node_t**, StorageService::Node_t*const &)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>

<P><STRONG><a name="[166]"></a>__rw::__rw_facet_base::_C_initfacet(const std::locale&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, char.o(i._ZN4__rw15__rw_facet_base12_C_initfacetERKSt6locale))
<BR>[Address Reference Count : 2]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
<LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[55f]"></a>__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)</STRONG> (Thumb, 226 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[8ce]"></a>__rw::__rw_locale_imp::__rw_locale_imp__sub_object(const char*, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj), UNUSED)

<P><STRONG><a name="[562]"></a>__rw::__rw_locale_imp::~__rw_locale_imp()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[564]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>

<P><STRONG><a name="[8cf]"></a>__rw::__rw_locale_imp::~__rw_locale_imp__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZN4__rw15__rw_locale_impD1Ev), UNUSED)

<P><STRONG><a name="[565]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = __rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int) &rArr; setlocale &rArr; _setlocale_r &rArr; _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[8d0]"></a>__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale__sub_object(const char*, int)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, locale.o(i._ZN4__rw21__rw_use_c_lib_localeC1EPKci), UNUSED)

<P><STRONG><a name="[566]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setlocale
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[8d1]"></a>__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZN4__rw21__rw_use_c_lib_localeD1Ev), UNUSED)

<P><STRONG><a name="[24]"></a>__rw::__rw_throw_exception_noex(int, char*)</STRONG> (Thumb, 58 bytes, Stack size 0 bytes, rwthrowproc_impl_noex.o(i._ZN4__rw25__rw_throw_exception_noexEiPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __rw::__rw_throw_exception_noex(int, char*) &rArr; fprintf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwthrowproc_noex.o(.data)
</UL>
<P><STRONG><a name="[2fb]"></a>__rw::__catfind(__rw::__rw_cat*)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rwcats.o(i._ZN4__rw9__catfindEPNS_8__rw_catE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rw::__catfind(__rw::__rw_cat*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
</UL>

<P><STRONG><a name="[567]"></a>Print::printNumber(unsigned long long, unsigned char)</STRONG> (Thumb, 100 bytes, Stack size 88 bytes, print.o(i._ZN5Print11printNumberEyh))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
</UL>

<P><STRONG><a name="[47e]"></a>Print::print(const char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_Init()
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Init()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[568]"></a>Print::print(char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, print.o(i._ZN5Print5printEc))
<BR><BR>[Called By]<UL><LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
<LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>

<P><STRONG><a name="[4a5]"></a>Print::print(unsigned char, int)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = Print::print(unsigned char, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[569]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned long long, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, int)
</UL>

<P><STRONG><a name="[569]"></a>Print::print(unsigned long long, int)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, print.o(i._ZN5Print5printEyi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[567]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printNumber(unsigned long long, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
</UL>

<P><STRONG><a name="[124]"></a>Print::write(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, print.o(i._ZN5Print5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::write(const char*)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> rt_sys.o(.constdata__ZTV6SdFile)
<LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[125]"></a>Print::write(const void*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, print.o(i._ZN5Print5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Print::write(const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>
<BR>[Address Reference Count : 4]<UL><LI> rt_sys.o(.constdata__ZTV6SdFile)
<LI> adafruit_st7789.o(.constdata__ZTV15Adafruit_ST7789)
<LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
<LI> hardwareserial.o(.constdata__ZTV14HardwareSerial)
</UL>
<P><STRONG><a name="[44a]"></a>Print::printf(const char*, ...)</STRONG> (Thumb, 40 bytes, Stack size 160 bytes, print.o(i._ZN5Print6printfEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 288 + Unknown Stack Size
<LI>Call Chain = Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
<LI><a href="#[469]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_Init()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[44c]"></a>Print::println(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Print::println(const char*) &rArr; Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
<LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_Init()
<LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
<LI><a href="#[49c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_Init()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
<LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*)
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[4a6]"></a>Print::println(unsigned char, int)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = Print::println(unsigned char, int) &rArr; Print::print(unsigned char, int) &rArr; Print::print(unsigned long long, int) &rArr; Print::printNumber(unsigned long long, unsigned char) &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(unsigned char, int)
<LI><a href="#[56a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
</UL>

<P><STRONG><a name="[56a]"></a>Print::println()</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, print.o(i._ZN5Print7printlnEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Print::println()
</UL>
<BR>[Calls]<UL><LI><a href="#[568]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[4a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(unsigned char, int)
</UL>

<P><STRONG><a name="[49a]"></a>SdFat::begin(unsigned char, SPISettings)</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, hal_sd_card.o(i._ZN5SdFat5beginEh11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = SdFat::begin(unsigned char, SPISettings) &rArr; SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings) &rArr; SdSpiCard::cardAcmd(unsigned char, unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::init(unsigned char)
<LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
</UL>

<P><STRONG><a name="[2b0]"></a>SdFile::SdFile()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_port_fs_sdfat.o(i._ZN6SdFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open(_lv_fs_drv_t*, const char*, unsigned char)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_read(_lv_fs_drv_t*, void*, char*)
</UL>

<P><STRONG><a name="[8d2]"></a>SdFile::SdFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lv_port_fs_sdfat.o(i._ZN6SdFileC1Ev), UNUSED)

<P><STRONG><a name="[56e]"></a>String::invalidate()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wstring.o(i._ZN6String10invalidateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = String::invalidate() &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const char*)
<LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const StringSumHelper&, const String&)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const StringSumHelper&, const char*)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
</UL>

<P><STRONG><a name="[56f]"></a>String::changeBuffer(unsigned)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wstring.o(i._ZN6String12changeBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::replace(const String&, const String&)
<LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::reserve(unsigned)
</UL>

<P><STRONG><a name="[571]"></a>String::copy(const char*, unsigned)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, wstring.o(i._ZN6String4copyEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::reserve(unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::invalidate()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const char*)
<LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
</UL>

<P><STRONG><a name="[579]"></a>String::init()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, wstring.o(i._ZN6String4initEv))
<BR><BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(float, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(double, unsigned char)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
</UL>

<P><STRONG><a name="[573]"></a>String::concat(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wstring.o(i._ZN6String6concatEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*, unsigned)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[468]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const char*)
</UL>

<P><STRONG><a name="[574]"></a>String::concat(const char*, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, wstring.o(i._ZN6String6concatEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[572]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::reserve(unsigned)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[462]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const StringSumHelper&, const String&)
<LI><a href="#[466]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator +(const StringSumHelper&, const char*)
<LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const String&)
<LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*)
</UL>

<P><STRONG><a name="[575]"></a>String::concat(const String&)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wstring.o(i._ZN6String6concatERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = String::concat(const String&) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[467]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator +=(const String&)
</UL>

<P><STRONG><a name="[465]"></a>String::replace(const String&, const String&)</STRONG> (Thumb, 270 bytes, Stack size 40 bytes, wstring.o(i._ZN6String7replaceERKS_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = String::replace(const String&, const String&) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strstr(char*, const char*)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::lastIndexOf(const String&, unsigned) const
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::changeBuffer(unsigned)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
</UL>

<P><STRONG><a name="[572]"></a>String::reserve(unsigned)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, wstring.o(i._ZN6String7reserveEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::changeBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*, unsigned)
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
</UL>

<P><STRONG><a name="[42d]"></a>String::String(const char*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, wstring.o(i._ZN6StringC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::init()
<LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::GPX()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getClose()
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getOpen()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getInfo()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakSegClose()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakSegOpen()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakClose()
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakOpen()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::wrapCDATA(String)
</UL>

<P><STRONG><a name="[8d3]"></a>String::String__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wstring.o(i._ZN6StringC1EPKc), UNUSED)

<P><STRONG><a name="[3c6]"></a>String::String(const String&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, wstring.o(i._ZN6StringC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = String::String(const String&) &rArr; String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[463]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const String&)
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getInfo()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringSumHelper::StringSumHelper(const String&)
</UL>

<P><STRONG><a name="[8d4]"></a>String::String__sub_object(const String&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, wstring.o(i._ZN6StringC1ERKS_), UNUSED)

<P><STRONG><a name="[42f]"></a>String::String(double, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, wstring.o(i._ZN6StringC1Edh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = String::String(double, unsigned char) &rArr; String::operator =(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const char*)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::init()
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[8d5]"></a>String::String__sub_object(double, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, wstring.o(i._ZN6StringC1Edh), UNUSED)

<P><STRONG><a name="[42b]"></a>String::String(float, unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 56 bytes, wstring.o(i._ZN6StringC1Efh))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = String::String(float, unsigned char) &rArr; String::operator =(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[57b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::operator =(const char*)
<LI><a href="#[57a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dtostrf
<LI><a href="#[579]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::init()
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[8d6]"></a>String::String__sub_object(float, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, wstring.o(i._ZN6StringC1Efh), UNUSED)

<P><STRONG><a name="[31f]"></a>String::~String()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, wstring.o(i._ZN6StringD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = String::~String() &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Recorder_t::~Recorder_t()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getInfo()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)
</UL>

<P><STRONG><a name="[8d7]"></a>String::~String__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wstring.o(i._ZN6StringD1Ev), UNUSED)

<P><STRONG><a name="[57b]"></a>String::operator =(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, wstring.o(i._ZN6StringaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = String::operator =(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::invalidate()
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(float, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(double, unsigned char)
</UL>

<P><STRONG><a name="[463]"></a>String::operator =(const String&)</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, wstring.o(i._ZN6StringaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = String::operator =(const String&) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[571]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::copy(const char*, unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::invalidate()
</UL>
<BR>[Called By]<UL><LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setTime(String)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setName(String)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setDesc(String)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setEle(String)
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setMetaName(String)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setMetaDesc(String)
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const String&)
</UL>

<P><STRONG><a name="[468]"></a>String::operator +=(const char*)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpx.o(i._ZN6StringpLEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[573]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getInfo()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::wrapCDATA(String)
</UL>

<P><STRONG><a name="[467]"></a>String::operator +=(const String&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, gpx.o(i._ZN6StringpLERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = String::operator +=(const String&) &rArr; String::concat(const String&) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[575]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const String&)
</UL>
<BR>[Called By]<UL><LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getInfo()
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[464]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::wrapCDATA(String)
</UL>

<P><STRONG><a name="[3f1]"></a>Account::Unsubscribe(const char*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, account.o(i._ZN7Account11UnsubscribeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Account::Unsubscribe(const char*) &rArr; DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Remove(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, Account*)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Clock_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
</UL>

<P><STRONG><a name="[2b9]"></a>Account::SetTimerPeriod(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, account.o(i._ZN7Account14SetTimerPeriodEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = Account::SetTimerPeriod(unsigned) &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SportStatus_Init(Account*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Power_Init(Account*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_GPS_Init(Account*)
</UL>

<P><STRONG><a name="[2b8]"></a>Account::SetEventCallback(int(*)(Account*, Account::EventParam_t*))</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, account.o(i._ZN7Account16SetEventCallbackEPFiPS_PNS_12EventParam_tEE))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TrackFilter_Init(Account*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SportStatus_Init(Account*)
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_MusicPlayer_Init(Account*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SysConfig_Init(Account*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_StatusBar_Init(Account*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Recorder_Init(Account*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Storage_Init(Account*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TzConv_Init(Account*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Power_Init(Account*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Clock_Init(Account*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_GPS_Init(Account*)
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Init()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Init()
</UL>

<P><STRONG><a name="[ce]"></a>Account::TimerCallbackHandler(_lv_timer_t*)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, account.o(i._ZN7Account20TimerCallbackHandlerEP11_lv_timer_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Account::TimerCallbackHandler(_lv_timer_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> account.o(i._ZN7Account14SetTimerPeriodEj)
</UL>
<P><STRONG><a name="[3ef]"></a>Account::Pull(const char*, void*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, account.o(i._ZN7Account4PullEPKcPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)
<LI><a href="#[57c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Clock_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SysConfig_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onLoad(Account*)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_GetTimeConv(Recorder_t*, const char*, char*, unsigned)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[4ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetTrackFilterActive()
<LI><a href="#[4fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetArrowTheme(char*, unsigned)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetGPS_Info(HAL::GPS_Info_t*)
<LI><a href="#[51a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::GetGPSReady()
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetStorageInfo(bool*, const char**, char*, unsigned)
<LI><a href="#[4f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetBatteryInfo(int*, float*, char*, unsigned)
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetSportInfo(float*, char*, unsigned, float*)
<LI><a href="#[4ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetRTCInfo(char*, unsigned)
<LI><a href="#[4ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetMAGInfo(float*, int*, int*, int*)
<LI><a href="#[4ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetIMUInfo(int*, char*, unsigned)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetGPSInfo(float*, float*, float*, char*, unsigned, float*, float*)
</UL>

<P><STRONG><a name="[57c]"></a>Account::Pull(Account*, void*, unsigned)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, account.o(i._ZN7Account4PullEPS_Pvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongBuffer_SetReadDone
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongBuffer_GetReadBuf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
</UL>

<P><STRONG><a name="[3ed]"></a>Account::Commit(const void*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, account.o(i._ZN7Account6CommitEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Account::Commit(const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[580]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongBuffer_SetWriteDone
<LI><a href="#[57f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongBuffer_GetWriteBuf
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_GPS_cpp]::onTimer(Account*)
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_MAG_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*)
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_IMU_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
</UL>

<P><STRONG><a name="[2aa]"></a>Account::Notify(const char*, const void*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, account.o(i._ZN7Account6NotifyEPKcPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Account::Notify(const char*, const void*, unsigned) &rArr; Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)
<LI><a href="#[581]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uninit()
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_GPS_cpp]::onTimer(Account*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SportStatus_Init(Account*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SysConfig_Init(Account*)
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onSDEvent(bool)
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[507]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::PlayMusic(const char*)
<LI><a href="#[51e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::PlayMusic(const char*)
<LI><a href="#[51b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::RecorderCommand(Page::DialplateModel::RecCmd_t)
</UL>

<P><STRONG><a name="[581]"></a>Account::Notify(Account*, const void*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, account.o(i._ZN7Account6NotifyEPS_PKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>

<P><STRONG><a name="[3ee]"></a>Account::Publish()</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, account.o(i._ZN7Account7PublishEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = Account::Publish()
</UL>
<BR>[Calls]<UL><LI><a href="#[57e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongBuffer_SetReadDone
<LI><a href="#[57d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongBuffer_GetReadBuf
</UL>
<BR>[Called By]<UL><LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_GPS_cpp]::onTimer(Account*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
</UL>

<P><STRONG><a name="[2b7]"></a>Account::Subscribe(const char*)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, account.o(i._ZN7Account9SubscribeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &)
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Find(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, const char*)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::SearchAccount(const char*)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TrackFilter_Init(Account*)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SportStatus_Init(Account*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SysConfig_Init(Account*)
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_StatusBar_Init(Account*)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Recorder_Init(Account*)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Storage_Init(Account*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TzConv_Init(Account*)
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Power_Init(Account*)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Clock_Init(Account*)
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_GPS_Init(Account*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Init()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Init()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Init()
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Init()
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::AddAccount(Account*)
</UL>

<P><STRONG><a name="[2c8]"></a>Account::Account(const char*, DataCenter*, unsigned, void*)</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, account.o(i._ZN7AccountC1EPKcP10DataCenterjPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + Unknown Stack Size
<LI>Call Chain = Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[583]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::vector(const std::allocator&lang;Account*&rang;&)
<LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::AddAccount(Account*)
<LI><a href="#[584]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PingPongBuffer_Init
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::DataCenter(const char*)
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Init()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Init()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Init()
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Init()
</UL>

<P><STRONG><a name="[8d8]"></a>Account::Account__sub_object(const char*, DataCenter*, unsigned, void*)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, account.o(i._ZN7AccountC1EPKcP10DataCenterjPv), UNUSED)

<P><STRONG><a name="[31e]"></a>Account::~Account()</STRONG> (Thumb, 110 bytes, Stack size 24 bytes, account.o(i._ZN7AccountD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = Account::~Account() &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Unsubscribe(const char*)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[585]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::~vector()
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::Remove(std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;*, Account*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::RemoveAccount(Account*)
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::~DataCenter()
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Deinit()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Deinit()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Deinit()
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Deinit()
</UL>

<P><STRONG><a name="[8d9]"></a>Account::~Account__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, account.o(i._ZN7AccountD1Ev), UNUSED)

<P><STRONG><a name="[586]"></a>FatFile::addCluster()</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, fatfile.o(i._ZN7FatFile10addClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
</UL>

<P><STRONG><a name="[596]"></a>FatFile::lfnChecksum(unsigned char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fatfilelfn.o(i._ZN7FatFile11lfnChecksumEPh))
<BR><BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openNext(FatFile*, unsigned char)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[588]"></a>FatFile::openCluster(FatFile*)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, fatfilelfn.o(i._ZN7FatFile11openClusterEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FatFile::openCluster(FatFile*) &rArr; FatFile::openRoot(FatVolume*) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getName(char*, unsigned)
</UL>

<P><STRONG><a name="[589]"></a>FatFile::lfnUniqueSfn(fname_t*)</STRONG> (Thumb, 186 bytes, Stack size 32 bytes, fatfilelfn.o(i._ZN7FatFile12lfnUniqueSfnEP7fname_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[58a]"></a>FatFile::readDirCache(bool)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, fatfile.o(i._ZN7FatFile12readDirCacheEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openNext(FatFile*, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getName(char*, unsigned)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
</UL>

<P><STRONG><a name="[58c]"></a>FatFile::addDirCluster()</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, fatfile.o(i._ZN7FatFile13addDirClusterEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = FatFile::addDirCluster() &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addCluster()
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchData(unsigned, unsigned char)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>

<P><STRONG><a name="[590]"></a>FatFile::cacheDirEntry(unsigned char)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fatfile.o(i._ZN7FatFile13cacheDirEntryEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = FatFile::cacheDirEntry(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchData(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getSFN(char*)
</UL>

<P><STRONG><a name="[59a]"></a>FatFile::parsePathName(const char*, fname_t*, const char**)</STRONG> (Thumb, 456 bytes, Stack size 40 bytes, fatfilelfn.o(i._ZN7FatFile13parsePathNameEPKcP7fname_tPS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FatFile::parsePathName(const char*, fname_t*, const char**)
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[591]"></a>FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)</STRONG> (Thumb, 206 bytes, Stack size 24 bytes, fatfile.o(i._ZN7FatFile15openCachedEntryEPS_thh))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char) &rArr; FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openNext(FatFile*, unsigned char)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[2ae]"></a>FatFile::open(const char*, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_port_fs_sdfat.o(i._ZN7FatFile4openEPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = FatFile::open(const char*, unsigned char) &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open(_lv_fs_drv_t*, const char*, unsigned char)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open(_lv_fs_drv_t*, const char*)
</UL>

<P><STRONG><a name="[593]"></a>FatFile::open(FatFile*, fname_t*, unsigned char)</STRONG> (Thumb, 778 bytes, Stack size 104 bytes, fatfilelfn.o(i._ZN7FatFile4openEPS_P7fname_th))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnChecksum(unsigned char*)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
<LI><a href="#[595]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfnToLower(char)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfnGetChar(longDirectoryEntry*, unsigned char)
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[58b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>

<P><STRONG><a name="[449]"></a>FatFile::open(FatFile*, const char*, unsigned char)</STRONG> (Thumb, 156 bytes, Stack size 96 bytes, fatfile.o(i._ZN7FatFile4openEPS_PKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 532<LI>Call Chain = FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::parsePathName(const char*, fname_t*, const char**)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::isOpen() const
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::isDir() const
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::FatFile()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(const char*, unsigned char)
</UL>

<P><STRONG><a name="[2fd]"></a>FatFile::read(void*, unsigned)</STRONG> (Thumb, 334 bytes, Stack size 40 bytes, fatfile.o(i._ZN7FatFile4readEPvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 284<LI>Call Chain = FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchData(unsigned, unsigned char)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
</UL>

<P><STRONG><a name="[59f]"></a>FatFile::sync()</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, fatfile.o(i._ZN7FatFile4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = FatFile::sync() &rArr; FatFile::cacheDirEntry(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::cacheDirEntry(unsigned char)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheSync()
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>

<P><STRONG><a name="[2b4]"></a>FatFile::close()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, fatfile.o(i._ZN7FatFile5closeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = FatFile::close() &rArr; FatFile::sync() &rArr; FatFile::cacheDirEntry(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFat::begin(unsigned char, SPISettings)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close(_lv_fs_drv_t*, void*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_close(_lv_fs_drv_t*, void*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_read(_lv_fs_drv_t*, void*, char*)
</UL>

<P><STRONG><a name="[5a1]"></a>FatFile::mkdir(FatFile*, fname_t*)</STRONG> (Thumb, 184 bytes, Stack size 56 bytes, fatfile.o(i._ZN7FatFile5mkdirEPS_P7fname_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 492<LI>Call Chain = FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::cacheDirEntry(unsigned char)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheSync()
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchData(unsigned, unsigned char)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rewind()
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
</UL>

<P><STRONG><a name="[44b]"></a>FatFile::mkdir(FatFile*, const char*, bool)</STRONG> (Thumb, 154 bytes, Stack size 96 bytes, fatfile.o(i._ZN7FatFile5mkdirEPS_PKcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 588<LI>Call Chain = FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[56d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openRoot(FatVolume*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[59a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::parsePathName(const char*, fname_t*, const char**)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::isOpen() const
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::isDir() const
<LI><a href="#[597]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::FatFile()
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[448]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*)
</UL>

<P><STRONG><a name="[30f]"></a>FatFile::write(const void*, unsigned)</STRONG> (Thumb, 374 bytes, Stack size 40 bytes, fatfile.o(i._ZN7FatFile5writeEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = FatFile::write(const void*, unsigned) &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
<LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addCluster()
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchData(unsigned, unsigned char)
<LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[58d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::clusterFirstBlock(unsigned) const
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintFile::write(unsigned char)
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*)
</UL>

<P><STRONG><a name="[5a4]"></a>FatFile::getSFN(char*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, fatfilesfn.o(i._ZN7FatFile6getSFNEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = FatFile::getSFN(char*) &rArr; FatFile::cacheDirEntry(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::dirName(const directoryEntry*, char*)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::cacheDirEntry(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getName(char*, unsigned)
</UL>

<P><STRONG><a name="[5a2]"></a>FatFile::rewind()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfile.o(i._ZN7FatFile6rewindEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = FatFile::rewind() &rArr; FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
</UL>

<P><STRONG><a name="[5a5]"></a>FatFile::dirName(const directoryEntry*, char*)</STRONG> (Thumb, 70 bytes, Stack size 20 bytes, fatfile.o(i._ZN7FatFile7dirNameEPK14directoryEntryPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FatFile::dirName(const directoryEntry*, char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getSFN(char*)
</UL>

<P><STRONG><a name="[2b2]"></a>FatFile::getName(char*, unsigned)</STRONG> (Thumb, 216 bytes, Stack size 72 bytes, fatfilelfn.o(i._ZN7FatFile7getNameEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = FatFile::getName(char*, unsigned) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
<LI><a href="#[5a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getSFN(char*)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCluster(FatFile*)
<LI><a href="#[594]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lfnGetChar(longDirectoryEntry*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_read(_lv_fs_drv_t*, void*, char*)
</UL>

<P><STRONG><a name="[2fe]"></a>FatFile::seekSet(unsigned)</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, fatfile.o(i._ZN7FatFile7seekSetEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getName(char*, unsigned)
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_seek(_lv_fs_drv_t*, void*, unsigned, lv_fs_whence_t)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[589]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnUniqueSfn(fname_t*)
<LI><a href="#[5a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::rewind()
</UL>

<P><STRONG><a name="[2b1]"></a>FatFile::openNext(FatFile*, unsigned char)</STRONG> (Thumb, 134 bytes, Stack size 32 bytes, fatfile.o(i._ZN7FatFile8openNextEPS_h))
<BR><BR>[Stack]<UL><LI>Max Depth = 332<LI>Call Chain = FatFile::openNext(FatFile*, unsigned char) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[596]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::lfnChecksum(unsigned char*)
<LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
<LI><a href="#[58a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::readDirCache(bool)
<LI><a href="#[598]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::isOpen() const
<LI><a href="#[599]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::isDir() const
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_read(_lv_fs_drv_t*, void*, char*)
</UL>

<P><STRONG><a name="[56d]"></a>FatFile::openRoot(FatVolume*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, fatfile.o(i._ZN7FatFile8openRootEP9FatVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FatFile::openRoot(FatVolume*) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFat::begin(unsigned char, SPISettings)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[588]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCluster(FatFile*)
</UL>

<P><STRONG><a name="[597]"></a>FatFile::FatFile()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fatfile.o(i._ZN7FatFileC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>

<P><STRONG><a name="[8da]"></a>FatFile::FatFile__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, fatfile.o(i._ZN7FatFileC1Ev), UNUSED)

<P><STRONG><a name="[618]"></a>LIS3MDL::LIS3MDL()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lis3mdl.o(i._ZN7LIS3MDLC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___11_HAL_MAG_cpp_60ef128f
</UL>

<P><STRONG><a name="[8db]"></a>LIS3MDL::LIS3MDL__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lis3mdl.o(i._ZN7LIS3MDLC1Ev), UNUSED)

<P><STRONG><a name="[471]"></a>LSM6DSM::GetMotion6(short*, short*, short*, short*, short*, short*)</STRONG> (Thumb, 90 bytes, Stack size 40 bytes, lsm6dsm.o(i._ZN7LSM6DSM10GetMotion6EPsS0_S0_S0_S0_S0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM6DSM::GetMotion6(short*, short*, short*, short*, short*, short*) &rArr; LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_Update()
</UL>

<P><STRONG><a name="[472]"></a>LSM6DSM::GetCurrentStep()</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lsm6dsm.o(i._ZN7LSM6DSM14GetCurrentStepEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSM::GetCurrentStep() &rArr; LSM6DSM::ReadReg(unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[46e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_Update()
</UL>

<P><STRONG><a name="[5a8]"></a>LSM6DSM::EnablePedometer(unsigned short, unsigned char)</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lsm6dsm.o(i._ZN7LSM6DSM15EnablePedometerEth))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = LSM6DSM::EnablePedometer(unsigned short, unsigned char) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
</UL>

<P><STRONG><a name="[5aa]"></a>LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lsm6dsm.o(i._ZN7LSM6DSM15SetRegisterBitsEhhb))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SoftReset()
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableAWT(short, short)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableTapDetection()
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableEMbeddedFunc()
</UL>

<P><STRONG><a name="[5ab]"></a>LSM6DSM::EnableEMbeddedFunc()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsm.o(i._ZN7LSM6DSM18EnableEMbeddedFuncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSM6DSM::EnableEMbeddedFunc() &rArr; LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
</UL>

<P><STRONG><a name="[5ac]"></a>LSM6DSM::EnableTapDetection()</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lsm6dsm.o(i._ZN7LSM6DSM18EnableTapDetectionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = LSM6DSM::EnableTapDetection() &rArr; LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
</UL>

<P><STRONG><a name="[4a7]"></a>LSM6DSM::Init(unsigned char)</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, lsm6dsm.o(i._ZN7LSM6DSM4InitEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = LSM6DSM::Init(unsigned char) &rArr; LSM6DSM::EnableAWT(short, short) &rArr; LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_ms
<LI><a href="#[5ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SoftReset()
<LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableAWT(short, short)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ConfigGyr(unsigned char, unsigned char)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ConfigAcc(unsigned char, unsigned char)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableTapDetection()
<LI><a href="#[5ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableEMbeddedFunc()
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnablePedometer(unsigned short, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::IMU_Init()
</UL>

<P><STRONG><a name="[5a7]"></a>LSM6DSM::ReadReg(unsigned char)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lsm6dsm.o(i._ZN7LSM6DSM7ReadRegEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM6DSM::ReadReg(unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(unsigned char)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::endTransmission()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::write(unsigned char)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::read()
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
<LI><a href="#[472]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::GetCurrentStep()
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool)
</UL>

<P><STRONG><a name="[5a6]"></a>LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lsm6dsm.o(i._ZN7LSM6DSM8ReadRegsEhPht))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(unsigned char)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::endTransmission()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::write(unsigned char)
<LI><a href="#[5b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::read()
<LI><a href="#[5b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::requestFrom(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[471]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::GetMotion6(short*, short*, short*, short*, short*, short*)
</UL>

<P><STRONG><a name="[5a9]"></a>LSM6DSM::WriteReg(unsigned char, unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lsm6dsm.o(i._ZN7LSM6DSM8WriteRegEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[4a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::beginTransmission(unsigned char)
<LI><a href="#[4a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::endTransmission()
<LI><a href="#[5b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WireBase::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableAWT(short, short)
<LI><a href="#[5af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ConfigGyr(unsigned char, unsigned char)
<LI><a href="#[5ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ConfigAcc(unsigned char, unsigned char)
<LI><a href="#[5ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableTapDetection()
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool)
<LI><a href="#[5a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnablePedometer(unsigned short, unsigned char)
</UL>

<P><STRONG><a name="[5ae]"></a>LSM6DSM::ConfigAcc(unsigned char, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dsm.o(i._ZN7LSM6DSM9ConfigAccEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM6DSM::ConfigAcc(unsigned char, unsigned char) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
</UL>

<P><STRONG><a name="[5af]"></a>LSM6DSM::ConfigGyr(unsigned char, unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lsm6dsm.o(i._ZN7LSM6DSM9ConfigGyrEhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LSM6DSM::ConfigGyr(unsigned char, unsigned char) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
</UL>

<P><STRONG><a name="[5b0]"></a>LSM6DSM::EnableAWT(short, short)</STRONG> (Thumb, 148 bytes, Stack size 16 bytes, lsm6dsm.o(i._ZN7LSM6DSM9EnableAWTEss))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LSM6DSM::EnableAWT(short, short) &rArr; LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
<LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool)
<LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
</UL>

<P><STRONG><a name="[5ad]"></a>LSM6DSM::SoftReset()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lsm6dsm.o(i._ZN7LSM6DSM9SoftResetEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = LSM6DSM::SoftReset() &rArr; LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool) &rArr; LSM6DSM::WriteReg(unsigned char, unsigned char) &rArr; WireBase::endTransmission()
</UL>
<BR>[Calls]<UL><LI><a href="#[5aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::SetRegisterBits(unsigned char, unsigned char, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
</UL>

<P><STRONG><a name="[546]"></a>MapConv::ConvertMapPath(int, int, char*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, mapconv.o(i._ZN7MapConv14ConvertMapPathEiiPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = MapConv::ConvertMapPath(int, int, char*, unsigned) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContReload()
</UL>

<P><STRONG><a name="[4fd]"></a>MapConv::ConvertMapLevelPos(int*, int*, int, int, int)</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, mapconv.o(i._ZN7MapConv18ConvertMapLevelPosEPiS0_iii))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MapConv::ConvertMapLevelPos(int*, int*, int, int, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
</UL>

<P><STRONG><a name="[4ab]"></a>MapConv::ConvertMapCoordinate(double, double, int*, int*)</STRONG> (Thumb, 68 bytes, Stack size 56 bytes, mapconv.o(i._ZN7MapConv20ConvertMapCoordinateEddPiS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = MapConv::ConvertMapCoordinate(double, double, int*, int*) &rArr; GPS_Transform &rArr; [local to GPS_Transform_c]::transformLon(double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
</UL>

<P><STRONG><a name="[2e6]"></a>MapConv::SetLevel(int)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mapconv.o(i._ZN7MapConv8SetLevelEi))
<BR><BR>[Called By]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_TrackFilter_Init(Account*)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[503]"></a>MapConv::MapConv()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, mapconv.o(i._ZN7MapConvC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___18_DP_TrackFilter_cpp_a5ac639c
<LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::LiveMapModel()
</UL>

<P><STRONG><a name="[8dc]"></a>MapConv::MapConv__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, mapconv.o(i._ZN7MapConvC1Ev), UNUSED)

<P><STRONG><a name="[5b5]"></a>TwoWire::i2c_get_ack()</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire11i2c_get_ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TwoWire::i2c_get_ack() &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[5b8]"></a>TwoWire::i2c_send_ack()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire12i2c_send_ackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TwoWire::i2c_send_ack() &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[5b9]"></a>TwoWire::i2c_shift_in()</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire12i2c_shift_inEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = TwoWire::i2c_shift_in() &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[5ba]"></a>TwoWire::i2c_send_nack()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire13i2c_send_nackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TwoWire::i2c_send_nack() &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[5bb]"></a>TwoWire::i2c_shift_out(unsigned char)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, wire.o(i._ZN7TwoWire13i2c_shift_outEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TwoWire::i2c_shift_out(unsigned char) &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[13a]"></a>TwoWire::begin(unsigned char)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire5beginEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = TwoWire::begin(unsigned char) &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[139]"></a>TwoWire::process()</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire7processEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = TwoWire::process() &rArr; TwoWire::i2c_shift_out(unsigned char) &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.constdata__ZTV7TwoWire)
</UL>
<P><STRONG><a name="[5b6]"></a>TwoWire::set_scl(bool)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire7set_sclEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TwoWire::set_scl(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>

<P><STRONG><a name="[5b7]"></a>TwoWire::set_sda(bool)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, wire.o(i._ZN7TwoWire7set_sdaEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[5be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[5bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_start()
<LI><a href="#[5bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_stop()
<LI><a href="#[5bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_out(unsigned char)
<LI><a href="#[5ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_nack()
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[5b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_send_ack()
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>

<P><STRONG><a name="[5bd]"></a>TwoWire::i2c_stop()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire8i2c_stopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TwoWire::i2c_stop() &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[5bc]"></a>TwoWire::i2c_start()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWire9i2c_startEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TwoWire::i2c_start() &rArr; TwoWire::set_sda(bool) &rArr; delay_us
</UL>
<BR>[Calls]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::process()
</UL>

<P><STRONG><a name="[61d]"></a>TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ehhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_Wire_cpp_928ee5ff
</UL>

<P><STRONG><a name="[8dd]"></a>TwoWire::TwoWire__sub_object(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, wire.o(i._ZN7TwoWireC1Ehhh), UNUSED)

<P><STRONG><a name="[d8]"></a>TwoWire::~TwoWire()</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev))
<BR>[Address Reference Count : 1]<UL><LI> wire.o(i.__sti___8_Wire_cpp_928ee5ff)
</UL>
<P><STRONG><a name="[8de]"></a>TwoWire::~TwoWire__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, wire.o(i._ZN7TwoWireD1Ev), UNUSED)

<P><STRONG><a name="[4a9]"></a>DataProc::GetTickElaps(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dp_clock.o(i._ZN8DataProc12GetTickElapsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = DataProc::GetTickElaps(unsigned) &rArr; lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
</UL>

<P><STRONG><a name="[4f5]"></a>DataProc::MakeTimeString(unsigned long long, char*, unsigned short)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, dp_clock.o(i._ZN8DataProc14MakeTimeStringEyPct))
<BR><BR>[Stack]<UL><LI>Max Depth = 608<LI>Call Chain = DataProc::MakeTimeString(unsigned long long, char*, unsigned short) &rArr; lv_snprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::SportInfoUpdate()
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::Update()
<LI><a href="#[4e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetSportInfo(float*, char*, unsigned, float*)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
</UL>

<P><STRONG><a name="[2a9]"></a>DataProc::Center()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dataproc.o(i._ZN8DataProc6CenterEv))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Uninit()
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onSDEvent(bool)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Init()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Init()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Init()
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Init()
</UL>

<P><STRONG><a name="[2e5]"></a>DataProc::GetTick()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, dp_clock.o(i._ZN8DataProc7GetTickEv))
<BR><BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_SportStatus_Init(Account*)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
</UL>

<P><STRONG><a name="[5c0]"></a>FatCache::read(unsigned, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, fatvolume.o(i._ZN8FatCache4readEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchFat(unsigned, unsigned char)
<LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchData(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[59c]"></a>FatCache::sync()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, fatvolume.o(i._ZN8FatCache4syncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::writeBlock(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
<LI><a href="#[5a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheSync()
</UL>

<P><STRONG><a name="[5c1]"></a>SPIClass::setBitOrder(unsigned short)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass11setBitOrderEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIClass::setBitOrder(unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[5c4]"></a>SPIClass::setDataMode(unsigned char)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, spi.o(i._ZN8SPIClass11setDataModeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[5c5]"></a>SPIClass::setDataSize(unsigned short)</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass11setDataSizeEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIClass::setDataSize(unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[5c6]"></a>SPIClass::SPI_Settings(SPI_Type*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)</STRONG> (Thumb, 110 bytes, Stack size 56 bytes, spi.o(i._ZN8SPIClass12SPI_SettingsEP8SPI_Typetttttt))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SPIClass::SPI_Settings(SPI_Type*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[5c7]"></a>SPIClass::endTransaction()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, spi.o(i._ZN8SPIClass14endTransactionEv))
<BR><BR>[Calls]<UL><LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
</UL>

<P><STRONG><a name="[5c8]"></a>SPIClass::beginTransaction(SPISettings)</STRONG> (Thumb, 82 bytes, Stack size 56 bytes, spi.o(i._ZN8SPIClass16beginTransactionE11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setClock(unsigned)
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
<LI><a href="#[5c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataSize(unsigned short)
<LI><a href="#[5c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setDataMode(unsigned char)
<LI><a href="#[5c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::setBitOrder(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStart()
</UL>

<P><STRONG><a name="[3bb]"></a>SPIClass::begin()</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, spi.o(i._ZN8SPIClass5beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SPIClass::begin() &rArr; pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_Reset
<LI><a href="#[5c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::SPI_Settings(SPI_Type*, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
</UL>

<P><STRONG><a name="[3bc]"></a>SPIClass::setClock(unsigned)</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, spi.o(i._ZN8SPIClass8setClockEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SPIClass::setClock(unsigned) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[5c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>

<P><STRONG><a name="[545]"></a>TileConv::GetTilePos(unsigned, TileConv::Point_t*)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, tileconv.o(i._ZN8TileConv10GetTilePosEjPNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TileConv::GetTilePos(unsigned, TileConv::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::GetIsMapTileContChanged()
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContReload()
</UL>

<P><STRONG><a name="[533]"></a>TileConv::SetFocusPos(int, int)</STRONG> (Thumb, 110 bytes, Stack size 20 bytes, tileconv.o(i._ZN8TileConv11SetFocusPosEii))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TileConv::SetFocusPos(int, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[5c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::FixTile(int, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[547]"></a>TileConv::GetFocusOffset(TileConv::Point_t*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tileconv.o(i._ZN8TileConv14GetFocusOffsetEPNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TileConv::GetFocusOffset(TileConv::Point_t*) &rArr; TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
</UL>

<P><STRONG><a name="[534]"></a>TileConv::GetTileContainer(TileConv::Rect_t*)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, tileconv.o(i._ZN8TileConv16GetTileContainerEPNS_6Rect_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TileConv::GetTileContainer(TileConv::Rect_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[549]"></a>TileConv::GetTileContainerOffset(TileConv::Point_t*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, tileconv.o(i._ZN8TileConv22GetTileContainerOffsetEPNS_7Point_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TileConv::GetTileContainerOffset(TileConv::Point_t*) &rArr; TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[540]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
</UL>

<P><STRONG><a name="[5c9]"></a>TileConv::FixTile(int, bool)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, tileconv.o(i._ZN8TileConv7FixTileEib))
<BR><BR>[Called By]<UL><LI><a href="#[533]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::SetFocusPos(int, int)
</UL>

<P><STRONG><a name="[540]"></a>TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, tileconv.o(i._ZN8TileConv9GetOffsetEPNS_7Point_tEPKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TileConv::GetOffset(TileConv::Point_t*, const TileConv::Point_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[549]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetTileContainerOffset(TileConv::Point_t*)
<LI><a href="#[547]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TileConv::GetFocusOffset(TileConv::Point_t*)
<LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineAppendToEnd(int, int)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[53f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineAppend(int, int)
</UL>

<P><STRONG><a name="[504]"></a>TileConv::TileConv(unsigned, unsigned, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 24 bytes, tileconv.o(i._ZN8TileConvC1Ejjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TileConv::TileConv(unsigned, unsigned, unsigned) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[502]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::LiveMapModel()
</UL>

<P><STRONG><a name="[8df]"></a>TileConv::TileConv__sub_object(unsigned, unsigned, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, tileconv.o(i._ZN8TileConvC1Ejjj), UNUSED)

<P><STRONG><a name="[5b2]"></a>WireBase::requestFrom(unsigned char, int)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase11requestFromEhi))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::requestFrom(unsigned char, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[4a4]"></a>WireBase::endTransmission()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase15endTransmissionEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::endTransmission()
</UL>
<BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[4a3]"></a>WireBase::beginTransmission(unsigned char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, wirebase.o(i._ZN8WireBase17beginTransmissionEh))
<BR><BR>[Called By]<UL><LI><a href="#[4a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::I2C_Scan(bool)
<LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[5b3]"></a>WireBase::read()</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase4readEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::read()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[5b1]"></a>WireBase::write(unsigned char)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, wirebase.o(i._ZN8WireBase5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = WireBase::write(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::WriteReg(unsigned char, unsigned char)
<LI><a href="#[5a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadRegs(unsigned char, unsigned char*, unsigned short)
<LI><a href="#[5a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::ReadReg(unsigned char)
</UL>

<P><STRONG><a name="[58f]"></a>FatVolume::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfile.o(i._ZN9FatVolume10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
</UL>

<P><STRONG><a name="[5cb]"></a>FatVolume::cacheFetchFat(unsigned, unsigned char)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fatvolume.o(i._ZN9FatVolume13cacheFetchFatEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPut(unsigned, unsigned)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[58e]"></a>FatVolume::cacheFetchData(unsigned, unsigned char)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fatfile.o(i._ZN9FatVolume14cacheFetchDataEjh))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[56c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::init(unsigned char)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[590]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::cacheDirEntry(unsigned char)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
</UL>

<P><STRONG><a name="[587]"></a>FatVolume::allocateCluster(unsigned, unsigned*)</STRONG> (Thumb, 106 bytes, Stack size 32 bytes, fatvolume.o(i._ZN9FatVolume15allocateClusterEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPut(unsigned, unsigned)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPutEOC(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[586]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addCluster()
</UL>

<P><STRONG><a name="[56c]"></a>FatVolume::init(unsigned char)</STRONG> (Thumb, 258 bytes, Stack size 24 bytes, fatvolume.o(i._ZN9FatVolume4initEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = FatVolume::init(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[58e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchData(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFat::begin(unsigned char, SPISettings)
</UL>

<P><STRONG><a name="[59b]"></a>FatVolume::fatGet(unsigned, unsigned*)</STRONG> (Thumb, 196 bytes, Stack size 24 bytes, fatvolume.o(i._ZN9FatVolume6fatGetEjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchFat(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[5cd]"></a>FatVolume::fatPut(unsigned, unsigned)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, fatvolume.o(i._ZN9FatVolume6fatPutEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::cacheFetchFat(unsigned, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[592]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::freeChain(unsigned)
<LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
<LI><a href="#[5cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPutEOC(unsigned)
</UL>

<P><STRONG><a name="[5a0]"></a>FatVolume::cacheSync()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, fatfile.o(i._ZN9FatVolume9cacheSyncEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = FatVolume::cacheSync() &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[59c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::sync()
</UL>
<BR>[Called By]<UL><LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[59f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::sync()
</UL>

<P><STRONG><a name="[5cc]"></a>FatVolume::fatPutEOC(unsigned)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fatvolume.o(i._ZN9FatVolume9fatPutEOCEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = FatVolume::fatPutEOC(unsigned) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPut(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[587]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::allocateCluster(unsigned, unsigned*)
</UL>

<P><STRONG><a name="[592]"></a>FatVolume::freeChain(unsigned)</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, fatvolume.o(i._ZN9FatVolume9freeChainEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = FatVolume::freeChain(unsigned) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatPut(unsigned, unsigned)
<LI><a href="#[59b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::fatGet(unsigned, unsigned*)
</UL>
<BR>[Called By]<UL><LI><a href="#[591]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openCachedEntry(FatFile*, unsigned short, unsigned char, unsigned char)
</UL>

<P><STRONG><a name="[138]"></a>PrintFile::write(unsigned char)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rt_sys.o(i._ZN9PrintFile5writeEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = PrintFile::write(unsigned char) &rArr; FatFile::write(const void*, unsigned) &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_sys.o(.constdata__ZTV6SdFile)
</UL>
<P><STRONG><a name="[5ce]"></a>SdSpiCard::isTimedOut(unsigned short, unsigned short)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard10isTimedOutEtt))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SdSpiCard::isTimedOut(unsigned short, unsigned short) &rArr; curTimeMS()
</UL>
<BR>[Calls]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curTimeMS()
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::waitNotBusy(unsigned short)
</UL>

<P><STRONG><a name="[59d]"></a>SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sdspicard.o(i._ZN9SdSpiCard10readBlocksEjPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned) &rArr; SdSpiCard::readStart(unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readStart(unsigned)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readStop()
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
</UL>

<P><STRONG><a name="[5d2]"></a>SdSpiCard::spiReceive()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, sdspicard.o(i._ZN9SdSpiCard10spiReceiveEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdSpiCard::spiReceive() &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::waitNotBusy(unsigned short)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[5ca]"></a>SdSpiCard::writeBlock(unsigned, const unsigned char*)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard10writeBlockEjPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiReceive()
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::waitNotBusy(unsigned short)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[58f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatVolume::writeBlock(unsigned, const unsigned char*)
</UL>

<P><STRONG><a name="[5d7]"></a>SdSpiCard::writeStart(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdspicard.o(i._ZN9SdSpiCard10writeStartEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SdSpiCard::writeStart(unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[5d3]"></a>SdSpiCard::cardCommand(unsigned char, unsigned)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, sdspicard.o(i._ZN9SdSpiCard11cardCommandEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiSend(unsigned char)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiReceive()
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStart()
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::waitNotBusy(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardAcmd(unsigned char, unsigned)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readStart(unsigned)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readStop()
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readRegister(unsigned char, void*)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeStart(unsigned)
</UL>

<P><STRONG><a name="[5d5]"></a>SdSpiCard::waitNotBusy(unsigned short)</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard11waitNotBusyEt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SdSpiCard::waitNotBusy(unsigned short) &rArr; SdSpiCard::isTimedOut(unsigned short, unsigned short) &rArr; curTimeMS()
</UL>
<BR>[Calls]<UL><LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiReceive()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curTimeMS()
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::isTimedOut(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeStop()
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(const unsigned char*)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[5a3]"></a>SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, sdspicard.o(i._ZN9SdSpiCard11writeBlocksEjPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned) &rArr; SdSpiCard::writeStart(unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeStop()
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(const unsigned char*)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeStart(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
</UL>

<P><STRONG><a name="[49b]"></a>SdSpiCard::cardCapacity()</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, sdspicard.o(i._ZN9SdSpiCard12cardCapacityEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = SdSpiCard::cardCapacity() &rArr; SdSpiCard::readCSD(csd_t*) &rArr; SdSpiCard::readRegister(unsigned char, void*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readCSD(csd_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
</UL>

<P><STRONG><a name="[5dd]"></a>SdSpiCard::readRegister(unsigned char, void*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard12readRegisterEhPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SdSpiCard::readRegister(unsigned char, void*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[5dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readCSD(csd_t*)
</UL>

<P><STRONG><a name="[56b]"></a>SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)</STRONG> (Thumb, 394 bytes, Stack size 72 bytes, sdspicard.o(i._ZN9SdSpiCard5beginEP14SdSpiLibDriverh11SPISettings))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings) &rArr; SdSpiCard::cardAcmd(unsigned char, unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
<LI><a href="#[5df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardAcmd(unsigned char, unsigned)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiSend(unsigned char)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiReceive()
<LI><a href="#[5de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiLibDriver::setSpiSettings(SPISettings)
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curTimeMS()
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStart()
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::isTimedOut(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[49a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFat::begin(unsigned char, SPISettings)
</UL>

<P><STRONG><a name="[5dc]"></a>SdSpiCard::readCSD(csd_t*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdspicard.o(i._ZN9SdSpiCard7readCSDEP5csd_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SdSpiCard::readCSD(csd_t*) &rArr; SdSpiCard::readRegister(unsigned char, void*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readRegister(unsigned char, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[49b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCapacity()
</UL>

<P><STRONG><a name="[5d9]"></a>SdSpiCard::spiSend(unsigned char)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdspicard.o(i._ZN9SdSpiCard7spiSendEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdSpiCard::spiSend(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeStop()
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[5d6]"></a>SdSpiCard::spiStop()</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdspicard.o(i._ZN9SdSpiCard7spiStopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SdSpiCard::spiStop() &rArr; SdSpiCard::spiSend(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiSend(unsigned char)
<LI><a href="#[5c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::endTransaction()
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
<LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[5db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeStop()
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(const unsigned char*)
<LI><a href="#[5cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readStart(unsigned)
<LI><a href="#[5d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readStop()
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readRegister(unsigned char, void*)
<LI><a href="#[5d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeStart(unsigned)
</UL>

<P><STRONG><a name="[5df]"></a>SdSpiCard::cardAcmd(unsigned char, unsigned)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard8cardAcmdEhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SdSpiCard::cardAcmd(unsigned char, unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
</UL>

<P><STRONG><a name="[5d0]"></a>SdSpiCard::readData(unsigned char*, unsigned)</STRONG> (Thumb, 118 bytes, Stack size 24 bytes, sdspicard.o(i._ZN9SdSpiCard8readDataEPhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SdSpiCard::readData(unsigned char*, unsigned) &rArr; SdSpiCard::isTimedOut(unsigned short, unsigned short) &rArr; curTimeMS()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiReceive()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curTimeMS()
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::isTimedOut(unsigned short, unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
<LI><a href="#[59e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlock(unsigned, unsigned char*)
<LI><a href="#[5dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readRegister(unsigned char, void*)
</UL>

<P><STRONG><a name="[5d1]"></a>SdSpiCard::readStop()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, sdspicard.o(i._ZN9SdSpiCard8readStopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SdSpiCard::readStop() &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[5d8]"></a>SdSpiCard::spiStart()</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, sdspicard.o(i._ZN9SdSpiCard8spiStartEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalWrite
<LI><a href="#[5c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::beginTransaction(SPISettings)
</UL>
<BR>[Called By]<UL><LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>

<P><STRONG><a name="[59e]"></a>SdSpiCard::readBlock(unsigned, unsigned char*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard9readBlockEjPh))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = SdSpiCard::readBlock(unsigned, unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[5c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatCache::read(unsigned, unsigned char)
</UL>

<P><STRONG><a name="[5cf]"></a>SdSpiCard::readStart(unsigned)</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, sdspicard.o(i._ZN9SdSpiCard9readStartEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = SdSpiCard::readStart(unsigned) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::cardCommand(unsigned char, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[59d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readBlocks(unsigned, unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[5da]"></a>SdSpiCard::writeData(const unsigned char*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, sdspicard.o(i._ZN9SdSpiCard9writeDataEPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = SdSpiCard::writeData(const unsigned char*) &rArr; SdSpiCard::writeData(unsigned char, const unsigned char*) &rArr; SdSpiCard::spiStop() &rArr; SdSpiCard::spiSend(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::waitNotBusy(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[5d4]"></a>SdSpiCard::writeData(unsigned char, const unsigned char*)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, sdspicard.o(i._ZN9SdSpiCard9writeDataEhPKh))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SdSpiCard::writeData(unsigned char, const unsigned char*) &rArr; SdSpiCard::spiStop() &rArr; SdSpiCard::spiSend(unsigned char) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::transfer(unsigned char) const
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiSend(unsigned char)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiReceive()
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlock(unsigned, const unsigned char*)
<LI><a href="#[5da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(const unsigned char*)
</UL>

<P><STRONG><a name="[5db]"></a>SdSpiCard::writeStop()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, sdspicard.o(i._ZN9SdSpiCard9writeStopEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SdSpiCard::writeStop() &rArr; SdSpiCard::waitNotBusy(unsigned short) &rArr; SdSpiCard::isTimedOut(unsigned short, unsigned short) &rArr; curTimeMS()
</UL>
<BR>[Calls]<UL><LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiSend(unsigned char)
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::waitNotBusy(unsigned short)
</UL>
<BR>[Called By]<UL><LI><a href="#[5a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeBlocks(unsigned, const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[30a]"></a>StatusBar::Init(_lv_obj_t*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, statusbar.o(i._ZN9StatusBar4InitEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = StatusBar::Init(_lv_obj_t*) &rArr; [local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
</UL>

<P><STRONG><a name="[550]"></a>StatusBar::Appear(bool)</STRONG> (Thumb, 78 bytes, Stack size 80 bytes, statusbar.o(i._ZN9StatusBar6AppearEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = StatusBar::Appear(bool) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewDidDisappear()
</UL>

<P><STRONG><a name="[417]"></a>StatusBar::SetStyle(StatusBar::Style_t)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, statusbar.o(i._ZN9StatusBar8SetStyleENS_7Style_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = StatusBar::SetStyle(StatusBar::Style_t) &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillAppear()
</UL>

<P><STRONG><a name="[497]"></a>Adafruit_GFX::height() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, adafruit_gfx.o(i._ZNK12Adafruit_GFX6heightEv))
<BR><BR>[Called By]<UL><LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>

<P><STRONG><a name="[817]"></a>ArduinoJson6184_11::NestingLimit::decrement() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, storageservice.o(i._ZNK18ArduinoJson6184_1112NestingLimit9decrementEv))
<BR><BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[3e3]"></a>ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, storageservice.o(i._ZNK18ArduinoJson6184_1113StringAdapterIPKcLb0EvE7compareES2_))
<BR><BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringCopier::save()
</UL>

<P><STRONG><a name="[111]"></a>ArduinoJson6184_11::DeserializationError::safeBoolHelper() const</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, storageservice.o(i._ZNK18ArduinoJson6184_1120DeserializationError14safeBoolHelperEv))
<BR>[Address Reference Count : 1]<UL><LI> storageservice.o(.constdata)
</UL>
<P><STRONG><a name="[3a8]"></a>ArduinoJson6184_11::DeserializationError::operator void(ArduinoJson6184_11::DeserializationError::*)() const() const</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, storageservice.o(i._ZNK18ArduinoJson6184_1120DeserializationErrorcvMS0_KFvvEEv))
<BR><BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3)
</UL>

<P><STRONG><a name="[578]"></a>String::lastIndexOf(const String&, unsigned) const</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, wstring.o(i._ZNK6String11lastIndexOfERKS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = String::lastIndexOf(const String&, unsigned) const &rArr; std::strstr(char*, const char*) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[576]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::strstr(char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::replace(const String&, const String&)
</UL>

<P><STRONG><a name="[599]"></a>FatFile::isDir() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fatfile.o(i._ZNK7FatFile5isDirEv))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openNext(FatFile*, unsigned char)
</UL>

<P><STRONG><a name="[598]"></a>FatFile::isOpen() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fatfile.o(i._ZNK7FatFile6isOpenEv))
<BR><BR>[Called By]<UL><LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openNext(FatFile*, unsigned char)
</UL>

<P><STRONG><a name="[3b8]"></a>SPIClass::transfer(unsigned char) const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, spi.o(i._ZNK8SPIClass8transferEh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SPIClass::transfer(unsigned char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData(unsigned char)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeCommand(unsigned char)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::writeData16(unsigned short)
<LI><a href="#[5d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiSend(unsigned char)
<LI><a href="#[5d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiReceive()
<LI><a href="#[5d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::writeData(unsigned char, const unsigned char*)
<LI><a href="#[5d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::readData(unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[58d]"></a>FatVolume::clusterFirstBlock(unsigned) const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, fatvolume.o(i._ZNK9FatVolume17clusterFirstBlockEj))
<BR><BR>[Called By]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
<LI><a href="#[5a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, fname_t*)
<LI><a href="#[58c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::addDirCluster()
</UL>

<P><STRONG><a name="[16b]"></a>std::__rw_exception::what() const</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rwstdexcept.o(i._ZNKSt14__rw_exception4whatEv))
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[5e0]"></a>std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 114 bytes, Stack size 32 bytes, messages.o(i._ZNKSt18__rw_messages_base11_C_cat_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[5e4]"></a>std::__rw_messages_base::_C_get_locale(int) const</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, messages.o(i._ZNKSt18__rw_messages_base13_C_get_localeEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = std::__rw_messages_base::_C_get_locale(int) const &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[5e6]"></a>std::__rw_messages_base::_C_get_message(int, int, int) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, messages.o(i._ZNKSt18__rw_messages_base14_C_get_messageEiii))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::__rw_messages_base::_C_get_message(int, int, int) const &rArr; std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catgets(__rw::__rw_cat*, int, int, const char*)
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[5f0]"></a>std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(i._ZNKSt5ctypeIcE2isENSt10ctype_base4maskEc))
<BR><BR>[Called By]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[5e7]"></a>std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, locale.o(i._ZNKSt6locale13_C_make_facetERKNS_2idEbiPFPN4__rw15__rw_facet_baseEiPKcjE))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
</UL>

<P><STRONG><a name="[5ea]"></a>std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale16_C_install_facetEPN4__rw15__rw_facet_baseERKNS_2idE))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const &rArr; __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
</UL>

<P><STRONG><a name="[5eb]"></a>std::locale::name() const</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, locale.o(i._ZNKSt6locale4nameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>

<P><STRONG><a name="[5ec]"></a>std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(i._ZNSt11char_traitsIcE4copyEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[5ed]"></a>std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)</STRONG> (Thumb, 186 bytes, Stack size 24 bytes, char.o(i._ZNSt12ctype_bynameIcE17_C_get_mask_tableEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>

<P><STRONG><a name="[5ee]"></a>std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[8e0]"></a>std::ctype_byname&lang;char&rang;::ctype_byname__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, char.o(i._ZNSt12ctype_bynameIcEC1EPKcj), UNUSED)

<P><STRONG><a name="[168]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating() &rArr; std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[167]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = std::ctype_byname&lang;char&rang;::~ctype_byname() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[8e1]"></a>std::ctype_byname&lang;char&rang;::~ctype_byname__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt12ctype_bynameIcED1Ev), UNUSED)

<P><STRONG><a name="[55d]"></a>std::__rw_exception::_C_vformat(int, std::__va_list)</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, rwstdexcept.o(i._ZNSt14__rw_exception10_C_vformatEiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 628 + Unknown Stack Size
<LI>Call Chain = std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[5f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcat
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[55c]"></a>std::__rw_exception::__rw_exception()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_exception::__rw_exception()
</UL>
<BR>[Calls]<UL><LI><a href="#[5f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::exception::exception()
</UL>
<BR>[Called By]<UL><LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>

<P><STRONG><a name="[8e2]"></a>std::__rw_exception::__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionC1Ev), UNUSED)

<P><STRONG><a name="[16a]"></a>std::__rw_exception::~__rw_exception()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__rw_exception::~__rw_exception() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt14__rw_exception)
</UL>
<P><STRONG><a name="[8e3]"></a>std::__rw_exception::~__rw_exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt14__rw_exceptionD1Ev), UNUSED)

<P><STRONG><a name="[5f3]"></a>std::__rw_messages_base::~__rw_messages_base()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>

<P><STRONG><a name="[8e4]"></a>std::__rw_messages_base::~__rw_messages_base__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt18__rw_messages_baseD1Ev), UNUSED)

<P><STRONG><a name="[10a]"></a>std::__rw_open_cat_data::__rw_open_cat_data()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(const std::locale&)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
</UL>
<P><STRONG><a name="[8e5]"></a>std::__rw_open_cat_data::__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataC1Ev), UNUSED)

<P><STRONG><a name="[109]"></a>std::__rw_open_cat_data::~__rw_open_cat_data()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::__rw_open_cat_data::~__rw_open_cat_data() &rArr; std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj)
<LI> messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev)
</UL>
<P><STRONG><a name="[8e6]"></a>std::__rw_open_cat_data::~__rw_open_cat_data__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataD1Ev), UNUSED)

<P><STRONG><a name="[5f5]"></a>std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, messages.o(i._ZNSt18__rw_open_cat_dataaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&) &rArr; std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
</UL>

<P><STRONG><a name="[169]"></a>std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)</STRONG> (Thumb, 250 bytes, Stack size 40 bytes, char.o(i._ZNSt5ctypeIcE12_C_initfacetERKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = std::ctype&lang;char&rang;::_C_initfacet(const std::locale&) &rArr; std::locale::name() const &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
<LI> char.o(.constdata__ZTVSt12ctype_bynameIcE)
</UL>
<P><STRONG><a name="[5ef]"></a>std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 270 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[5f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::is(std::ctype_base::mask, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
</UL>

<P><STRONG><a name="[8e7]"></a>std::ctype&lang;char&rang;::ctype__sub_object(const std::ctype_base::mask*, bool, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, char.o(i._ZNSt5ctypeIcEC1EPKNSt10ctype_base4maskEbj), UNUSED)

<P><STRONG><a name="[16d]"></a>std::ctype&lang;char&rang;::~ctype__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = std::ctype&lang;char&rang;::~ctype__deallocating() &rArr; std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[16c]"></a>std::ctype&lang;char&rang;::~ctype()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::ctype&lang;char&rang;::~ctype() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> char.o(.constdata__ZTVSt5ctypeIcE)
</UL>
<P><STRONG><a name="[8e8]"></a>std::ctype&lang;char&rang;::~ctype__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(i._ZNSt5ctypeIcED1Ev), UNUSED)

<P><STRONG><a name="[165]"></a>std::locale::facet::~facet__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt6locale5facetD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::locale::facet::~facet__deallocating() &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVNSt6locale5facetE)
</UL>
<P><STRONG><a name="[5f6]"></a>std::locale::_C_init()</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, locale.o(i._ZNSt6locale7_C_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[5e5]"></a>std::locale::classic()</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, locale.o(i._ZNSt6locale7classicEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[5e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale(__rw::__rw_locale_imp*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[5e9]"></a>std::locale::locale(__rw::__rw_locale_imp*)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[8e9]"></a>std::locale::locale__sub_object(__rw::__rw_locale_imp*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeC1EPN4__rw15__rw_locale_impE), UNUSED)

<P><STRONG><a name="[5f4]"></a>std::locale::locale(const std::locale&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>

<P><STRONG><a name="[8ea]"></a>std::locale::locale__sub_object(const std::locale&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, messages.o(i._ZNSt6localeC1ERKS_), UNUSED)

<P><STRONG><a name="[45b]"></a>std::locale::locale()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = std::locale::locale() &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>
<BR>[Called By]<UL><LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[8eb]"></a>std::locale::locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, rwstdexcept.o(i._ZNSt6localeC1Ev), UNUSED)

<P><STRONG><a name="[d0]"></a>std::locale::~locale()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::locale::~locale() &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZNSt6locale7classicEv)
</UL>
<P><STRONG><a name="[8ec]"></a>std::locale::~locale__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(i._ZNSt6localeD1Ev), UNUSED)

<P><STRONG><a name="[5e3]"></a>std::locale::operator =(const std::locale&)</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, locale.o(i._ZNSt6localeaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::locale::operator =(const std::locale&) &rArr; __rw::__rw_locale_imp::~__rw_locale_imp() &rArr; __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
</UL>

<P><STRONG><a name="[16f]"></a>std::messages&lang;char&rang;::~messages__deallocating()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = std::messages&lang;char&rang;::~messages__deallocating() &rArr; std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[16e]"></a>std::messages&lang;char&rang;::~messages()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::messages&lang;char&rang;::~messages() &rArr; std::__rw_messages_base::~__rw_messages_base() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[8ed]"></a>std::messages&lang;char&rang;::~messages__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwstdexcept.o(i._ZNSt8messagesIcED1Ev), UNUSED)

<P><STRONG><a name="[5f2]"></a>std::exception::exception()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[55c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::__rw_exception()
</UL>

<P><STRONG><a name="[8ee]"></a>std::exception::exception__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, exception_ctor.o(i._ZNSt9exceptionC1Ev), UNUSED)

<P><STRONG><a name="[5e1]"></a>std::__rw_get_cats()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, messages.o(i._ZSt13__rw_get_catsv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::__rw_get_cats() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[3dd]"></a>std::abs(double)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, trackpointfilter.o(i._ZSt3absd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::abs(double) &rArr; __hardfp_fabs
</UL>
<BR>[Calls]<UL><LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetOffset(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[576]"></a>std::strstr(char*, const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, wstring.o(i._ZSt6strstrPcPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = std::strstr(char*, const char*) &rArr; strstr
</UL>
<BR>[Calls]<UL><LI><a href="#[5f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strstr
</UL>
<BR>[Called By]<UL><LI><a href="#[465]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::replace(const String&, const String&)
<LI><a href="#[578]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::lastIndexOf(const String&, unsigned) const
</UL>

<P><STRONG><a name="[d2]"></a>operator delete[] (void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::~__rw_exception()
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw_exception_noex(int, char*)
<LI><a href="#[563]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype()
<LI><a href="#[566]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> cxa_vec_new.o(i.__cxa_vec_new)
</UL>
<P><STRONG><a name="[2af]"></a>operator delete (void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, new.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*)
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::Remove(const char*)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
<LI><a href="#[506]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Deinit()
<LI><a href="#[501]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Deinit()
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Delete()
<LI><a href="#[51d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Deinit()
<LI><a href="#[4e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Deinit()
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_close(_lv_fs_drv_t*, void*)
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open(_lv_fs_drv_t*, const char*, unsigned char)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_close(_lv_fs_drv_t*, void*)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open(_lv_fs_drv_t*, const char*)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::~messages__deallocating()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::facet::~facet__deallocating()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
<LI><a href="#[5e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::operator =(const std::locale&)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::~ctype__deallocating()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::~ctype_byname__deallocating()
</UL>

<P><STRONG><a name="[456]"></a>operator new[] (unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, new.o(i._Znaj))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___10_rwcats_cpp_64e8068e
<LI><a href="#[5e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[565]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_use_c_lib_locale::__rw_use_c_lib_locale(const char*, int)
<LI><a href="#[5ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*)
</UL>

<P><STRONG><a name="[2ad]"></a>operator new(unsigned)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, new.o(i._Znwj))
<BR><BR>[Called By]<UL><LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc_Init()
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::Add(const char*, void*, unsigned short, StorageService::DataType_t)
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AppFactory::CreatePage(const char*)
<LI><a href="#[505]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupModel::Init()
<LI><a href="#[500]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::Init()
<LI><a href="#[51c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateModel::Init()
<LI><a href="#[4db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::Init()
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_open(_lv_fs_drv_t*, const char*, unsigned char)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fs_dir_open(_lv_fs_drv_t*, const char*)
<LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;catopen(const char*, int)
</UL>

<P><STRONG><a name="[466]"></a>operator +(const StringSumHelper&, const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, wstring.o(i._ZplRK15StringSumHelperPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = operator +(const StringSumHelper&, const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*, unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::invalidate()
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
</UL>

<P><STRONG><a name="[462]"></a>operator +(const StringSumHelper&, const String&)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, wstring.o(i._ZplRK15StringSumHelperRK6String))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = operator +(const StringSumHelper&, const String&) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[574]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::concat(const char*, unsigned)
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::invalidate()
</UL>
<BR>[Called By]<UL><LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
</UL>

<P><STRONG><a name="[5fb]"></a>__ARM_array_new_general</STRONG> (Thumb, 146 bytes, Stack size 56 bytes, array_new_general.o(i.__ARM_array_new_general))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[5fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup
<LI><a href="#[5fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>

<P><STRONG><a name="[1f2]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[613]"></a>__ARM_fpclassifyf</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, fpclassifyf.o(i.__ARM_fpclassifyf))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[20f]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor
</UL>
<BR>[Calls]<UL><LI><a href="#[5fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[560]"></a>__aeabi_vec_new_cookie</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, aeabi_vec_new_cookie.o(i.__aeabi_vec_new_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_new
</UL>
<BR>[Called By]<UL><LI><a href="#[5e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[2d8]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_DP_Recorder_Init(Account*)
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Update()
<LI><a href="#[5e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_get_cats()
<LI><a href="#[5e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::classic()
</UL>

<P><STRONG><a name="[126]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 1]<UL><LI> adafruit_gfx.o(.constdata__ZTV12Adafruit_GFX)
</UL>
<P><STRONG><a name="[5ff]"></a>__cxa_vec_new</STRONG> (Thumb, 18 bytes, Stack size 32 bytes, cxa_vec_new.o(i.__cxa_vec_new))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_array_new_general
</UL>
<BR>[Called By]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
</UL>

<P><STRONG><a name="[600]"></a>__hardfp___mathlib_tofloat</STRONG> (Thumb, 232 bytes, Stack size 32 bytes, narrow.o(i.__hardfp___mathlib_tofloat))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>
<BR>[Called By]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_narrow
</UL>

<P><STRONG><a name="[603]"></a>__hardfp_atan</STRONG> (Thumb, 622 bytes, Stack size 48 bytes, atan.o(i.__hardfp_atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
</UL>

<P><STRONG><a name="[35e]"></a>__hardfp_atan2</STRONG> (Thumb, 432 bytes, Stack size 48 bytes, atan2.o(i.__hardfp_atan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = __hardfp_atan2 &rArr; atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[609]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atan
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>
<BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
</UL>

<P><STRONG><a name="[26f]"></a>__hardfp_cos</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, cos.o(i.__hardfp_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_cos &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
</UL>

<P><STRONG><a name="[3d7]"></a>__hardfp_fabs</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, fabs.o(i.__hardfp_fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __hardfp_fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::abs(double)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
</UL>

<P><STRONG><a name="[60e]"></a>__hardfp_ldexp</STRONG> (Thumb, 200 bytes, Stack size 48 bytes, ldexp.o(i.__hardfp_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__support_ldexp
</UL>

<P><STRONG><a name="[3e6]"></a>__hardfp_log</STRONG> (Thumb, 872 bytes, Stack size 88 bytes, log.o(i.__hardfp_log))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = __hardfp_log &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
</UL>

<P><STRONG><a name="[26c]"></a>__hardfp_sin</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, sin.o(i.__hardfp_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
</UL>

<P><STRONG><a name="[5b4]"></a>__hardfp_sinf</STRONG> (Thumb, 344 bytes, Stack size 16 bytes, sinf.o(i.__hardfp_sinf))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __hardfp_sinf &rArr; __mathlib_rredf2
</UL>
<BR>[Calls]<UL><LI><a href="#[612]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_rredf2
<LI><a href="#[614]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[615]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[616]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[613]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassifyf
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[5b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::EnableAWT(short, short)
</UL>

<P><STRONG><a name="[26e]"></a>__hardfp_sqrt</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, sqrt.o(i.__hardfp_sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __hardfp_sqrt &rArr; _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
</UL>

<P><STRONG><a name="[60b]"></a>__ieee754_rem_pio2</STRONG> (Thumb, 938 bytes, Stack size 120 bytes, rred.o(i.__ieee754_rem_pio2))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[606]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fabs
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[60d]"></a>__kernel_cos</STRONG> (Thumb, 322 bytes, Stack size 64 bytes, cos_i.o(i.__kernel_cos))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = __kernel_cos &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[607]"></a>__kernel_poly</STRONG> (Thumb, 248 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[60c]"></a>__kernel_sin</STRONG> (Thumb, 280 bytes, Stack size 72 bytes, sin_i.o(i.__kernel_sin))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __kernel_sin &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[611]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
</UL>

<P><STRONG><a name="[604]"></a>__mathlib_dbl_infnan</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>

<P><STRONG><a name="[608]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[60a]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
</UL>

<P><STRONG><a name="[610]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_overflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[605]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[616]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[615]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[614]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[21d]"></a>__mathlib_narrow</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, narrow.o(i.__mathlib_narrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __mathlib_narrow &rArr; __hardfp___mathlib_tofloat &rArr; frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[612]"></a>__mathlib_rredf2</STRONG> (Thumb, 316 bytes, Stack size 20 bytes, rredf.o(i.__mathlib_rredf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __mathlib_rredf2
</UL>
<BR>[Called By]<UL><LI><a href="#[5b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sinf
</UL>

<P><STRONG><a name="[236]"></a>__support_ldexp</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, ldexp.o(i.__support_ldexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>
<BR>[Called By]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>

<P><STRONG><a name="[1d2]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[625]"></a>_lv_anim_core_init</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_anim.o(i._lv_anim_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _lv_anim_core_init &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[62f]"></a>_lv_area_intersect</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_area.o(i._lv_area_intersect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_area_intersect
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[628]"></a>_lv_area_is_in</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_is_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[7f0]"></a>_lv_area_is_on</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, lv_area.o(i._lv_area_is_on))
<BR><BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[62a]"></a>_lv_area_is_out</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, lv_area.o(i._lv_area_is_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _lv_area_is_out &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
</UL>

<P><STRONG><a name="[629]"></a>_lv_area_is_point_on</STRONG> (Thumb, 294 bytes, Stack size 32 bytes, lv_area.o(i._lv_area_is_point_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[62b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7f1]"></a>_lv_area_join</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, lv_area.o(i._lv_area_join))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_area_join
</UL>
<BR>[Called By]<UL><LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[62c]"></a>_lv_blend_fill</STRONG> (Thumb, 216 bytes, Stack size 80 bytes, lv_draw_blend.o(i._lv_blend_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_simple
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[634]"></a>_lv_blend_map</STRONG> (Thumb, 252 bytes, Stack size 80 bytes, lv_draw_blend.o(i._lv_blend_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = _lv_blend_map &rArr; map_blended
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[636]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_blended
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[f3]"></a>_lv_disp_refr_timer</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_refr.o(i._lv_disp_refr_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 1276<LI>Call Chain = _lv_disp_refr_timer &rArr; lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[63e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_font_clean_up_fmt_txt
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_disp.o(i.lv_disp_drv_register)
</UL>
<P><STRONG><a name="[63f]"></a>_lv_draw_mask_cleanup</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_draw_mask.o(i._lv_draw_mask_cleanup))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_draw_mask_cleanup &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[7af]"></a>_lv_event_mark_deleted</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_event.o(i._lv_event_mark_deleted))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[63e]"></a>_lv_font_clean_up_fmt_txt</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i._lv_font_clean_up_fmt_txt))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[640]"></a>_lv_fs_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_fs.o(i._lv_fs_init))
<BR><BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[641]"></a>_lv_group_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i._lv_group_init))
<BR><BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[642]"></a>_lv_img_buf_get_transformed_area</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, lv_img_buf.o(i._lv_img_buf_get_transformed_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _lv_img_buf_get_transformed_area
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[644]"></a>_lv_img_buf_transform</STRONG> (Thumb, 340 bytes, Stack size 48 bytes, lv_img_buf.o(i._lv_img_buf_transform))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = _lv_img_buf_transform &rArr; _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[649]"></a>_lv_img_buf_transform_anti_alias</STRONG> (Thumb, 644 bytes, Stack size 64 bytes, lv_img_buf.o(i._lv_img_buf_transform_anti_alias))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = _lv_img_buf_transform_anti_alias &rArr; lv_img_buf_get_px_color &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[648]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_alpha
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[64a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>

<P><STRONG><a name="[64b]"></a>_lv_img_buf_transform_init</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, lv_img_buf.o(i._lv_img_buf_transform_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_img_buf_transform_init
</UL>
<BR>[Calls]<UL><LI><a href="#[643]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_trigo_sin
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[64e]"></a>_lv_img_cache_open</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lv_img_cache.o(i._lv_img_cache_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = _lv_img_cache_open &rArr; lv_img_decoder_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[650]"></a>_lv_img_decoder_init</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(i._lv_img_decoder_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _lv_img_decoder_init &rArr; lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[652]"></a>_lv_indev_read</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_hal_indev.o(i._lv_indev_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_indev_read
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[653]"></a>_lv_indev_scroll_handler</STRONG> (Thumb, 280 bytes, Stack size 32 bytes, lv_indev_scroll.o(i._lv_indev_scroll_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = _lv_indev_scroll_handler &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_limit_diff
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[65d]"></a>_lv_indev_scroll_throw_handler</STRONG> (Thumb, 558 bytes, Stack size 48 bytes, lv_indev_scroll.o(i._lv_indev_scroll_throw_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[65c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_limit_diff
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[663]"></a>_lv_inv_area</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lv_refr.o(i._lv_inv_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_set_bg_color
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[666]"></a>_lv_ll_clear</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_clear))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lv_ll_clear &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_all_objs
</UL>

<P><STRONG><a name="[f9]"></a>_lv_ll_get_head</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_head))
<BR><BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_all_objs
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[668]"></a>_lv_ll_get_len</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lv_ll.o(i._lv_ll_get_len))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _lv_ll_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
</UL>

<P><STRONG><a name="[f8]"></a>_lv_ll_get_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_next))
<BR><BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_all_objs
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_next)
</UL>
<P><STRONG><a name="[fa]"></a>_lv_ll_get_prev</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_prev))
<BR><BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[fb]"></a>_lv_ll_get_tail</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_get_tail))
<BR><BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_group.o(i.lv_group_focus_prev)
</UL>
<P><STRONG><a name="[626]"></a>_lv_ll_init</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_create
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>

<P><STRONG><a name="[669]"></a>_lv_ll_ins_head</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_head))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_create
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_register
</UL>

<P><STRONG><a name="[66c]"></a>_lv_ll_ins_tail</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_ins_tail))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = _lv_ll_ins_tail &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
</UL>

<P><STRONG><a name="[73a]"></a>_lv_ll_is_empty</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_ll.o(i._lv_ll_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
</UL>

<P><STRONG><a name="[667]"></a>_lv_ll_remove</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_ll.o(i._lv_ll_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _lv_ll_remove
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[66a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_prev
<LI><a href="#[66b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_set_next
</UL>
<BR>[Called By]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[800]"></a>_lv_obj_destruct</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_obj_class.o(i._lv_obj_destruct))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_obj_destruct
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[79e]"></a>_lv_obj_get_ext_draw_size</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_draw.o(i._lv_obj_get_ext_draw_size))
<BR><BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[66d]"></a>_lv_obj_style_create_transition</STRONG> (Thumb, 288 bytes, Stack size 104 bytes, lv_obj_style.o(i._lv_obj_style_create_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[670]"></a>_lv_obj_style_init</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_style.o(i._lv_obj_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[671]"></a>_lv_obj_style_state_compare</STRONG> (Thumb, 576 bytes, Stack size 56 bytes, lv_obj_style.o(i._lv_obj_style_state_compare))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = _lv_obj_style_state_compare &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[62d]"></a>_lv_refr_get_disp_refreshing</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_get_disp_refreshing))
<BR><BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[635]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_set_px
<LI><a href="#[631]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_set_px
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[77b]"></a>_lv_refr_init</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_refr.o(i._lv_refr_init))
<BR><BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[71c]"></a>_lv_style_get_prop_group</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(i._lv_style_get_prop_group))
<BR><BR>[Called By]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
</UL>

<P><STRONG><a name="[673]"></a>_lv_timer_core_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(i._lv_timer_core_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _lv_timer_core_init
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[752]"></a>_lv_txt_encoded_letter_next_2</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, lv_txt.o(i._lv_txt_encoded_letter_next_2))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _lv_txt_encoded_letter_next_2
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[674]"></a>_lv_txt_get_next_line</STRONG> (Thumb, 210 bytes, Stack size 64 bytes, lv_txt.o(i._lv_txt_get_next_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[785]"></a>_lv_txt_is_cmd</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_txt.o(i._lv_txt_is_cmd))
<BR><BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[676]"></a>_lv_txt_set_text_vfmt</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_txt.o(i._lv_txt_set_text_vfmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
</UL>

<P><STRONG><a name="[716]"></a>_lv_utils_bsearch</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, lv_utils.o(i._lv_utils_bsearch))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>

<P><STRONG><a name="[22f]"></a>_sys_close</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, rt_sys.o(i._sys_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = _sys_close &rArr; FatFile::close() &rArr; FatFile::sync() &rArr; FatFile::cacheDirEntry(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[20b]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_sys.o(i._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[23a]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rt_sys.o(i._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[23b]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, rt_sys.o(i._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[22b]"></a>_sys_open</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, rt_sys.o(i._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 556<LI>Call Chain = _sys_open &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[23e]"></a>_sys_seek</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, rt_sys.o(i._sys_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = _sys_seek &rArr; FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[23f]"></a>_sys_write</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rt_sys.o(i._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _sys_write &rArr; FatFile::write(const void*, unsigned) &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::write(const void*, unsigned)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[228]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_sys.o(i._ttywrch))
<BR><BR>[Called By]<UL><LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[494]"></a>analogWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arduino.o(i.analogWrite))
<BR><BR>[Calls]<UL><LI><a href="#[67b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pwmWrite
</UL>
<BR>[Called By]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetValue(short)
</UL>

<P><STRONG><a name="[609]"></a>atan</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, atan.o(i.atan))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = atan &rArr; __hardfp_atan &rArr; __kernel_poly &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
</UL>

<P><STRONG><a name="[485]"></a>attachInterrupt</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, exti.o(i.attachInterrupt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = attachInterrupt &rArr; EXTIx_Init &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_Init()
</UL>

<P><STRONG><a name="[801]"></a>cm_backtrace_call_stack</STRONG> (Thumb, 202 bytes, Stack size 36 bytes, cm_backtrace.o(i.cm_backtrace_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = cm_backtrace_call_stack
</UL>
<BR>[Called By]<UL><LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
</UL>

<P><STRONG><a name="[1bc]"></a>cm_backtrace_fault</STRONG> (Thumb, 388 bytes, Stack size 88 bytes, cm_backtrace.o(i.cm_backtrace_fault))
<BR><BR>[Stack]<UL><LI>Max Depth = 592 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_fault &rArr; print_call_stack &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[6b1]"></a>cm_backtrace_firmware_info</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, cm_backtrace.o(i.cm_backtrace_firmware_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 416 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_firmware_info &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[490]"></a>cm_backtrace_init</STRONG> (Thumb, 90 bytes, Stack size 16 bytes, cm_backtrace.o(i.cm_backtrace_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = cm_backtrace_init &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[48f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::FaultHandle_Init()
</UL>

<P><STRONG><a name="[6b0]"></a>cmb_printf</STRONG> (Thumb, 34 bytes, Stack size 280 bytes, hal_faulthandle.o(i.cmb_printf))
<BR><BR>[Stack]<UL><LI>Max Depth = 408 + Unknown Stack Size
<LI>Call Chain = cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[47e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::print(const char*)
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__c89vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[490]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_init
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
<LI><a href="#[6b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_firmware_info
<LI><a href="#[6b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;print_call_stack
<LI><a href="#[6b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fault_diagnosis
<LI><a href="#[6b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dump_stack
</UL>

<P><STRONG><a name="[3be]"></a>delay_ms</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, delay.o(i.delay_ms))
<BR><BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
<LI><a href="#[4a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LSM6DSM::Init(unsigned char)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
</UL>

<P><STRONG><a name="[5be]"></a>delay_us</STRONG> (Thumb, 56 bytes, Stack size 20 bytes, delay.o(i.delay_us))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>

<P><STRONG><a name="[447]"></a>digitalRead</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, arduino.o(i.digitalRead))
<BR><BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_GetInfo(HAL::Power_Info_t*)
<LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Update()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vApplicationHardFaultHook
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_GetIsPush()
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Encoder_EventHandler_B()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Encoder_EventHandler_A()
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
<LI><a href="#[5b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_shift_in()
<LI><a href="#[5b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::i2c_get_ack()
</UL>

<P><STRONG><a name="[3bd]"></a>digitalWrite</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, arduino.o(i.digitalWrite))
<BR><BR>[Called By]<UL><LI><a href="#[470]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_EventMonitor()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_ForceLit(bool)
<LI><a href="#[5d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStart()
<LI><a href="#[5d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::spiStop()
<LI><a href="#[5b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_sda(bool)
<LI><a href="#[5b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::set_scl(bool)
</UL>

<P><STRONG><a name="[6cb]"></a>draw_border_generic</STRONG> (Thumb, 1218 bytes, Stack size 192 bytes, lv_draw_rect.o(i.draw_border_generic))
<BR><BR>[Stack]<UL><LI>Max Depth = 480<LI>Call Chain = draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[6cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_simple
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
</UL>

<P><STRONG><a name="[57a]"></a>dtostrf</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, dtostrf.o(i.dtostrf))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = dtostrf &rArr; __2sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(float, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(double, unsigned char)
</UL>

<P><STRONG><a name="[1bb]"></a>exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rt_sys.o(i.exit))
<BR><BR>[Calls]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[77]"></a>extend_SRAM</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, extend_sram.o(i.extend_SRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = extend_SRAM &rArr; FLASH_ProgramUserOptionByteData &rArr; FLASH_WaitForProcess
</UL>
<BR>[Calls]<UL><LI><a href="#[705]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_Unlock
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramUserOptionByteData
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_EraseUserOptionBytes
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_at32f403acgu7.o(.text)
</UL>
<P><STRONG><a name="[606]"></a>fabs</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, fabs.o(i.fabs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = fabs
</UL>
<BR>[Called By]<UL><LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[83]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[714]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[601]"></a>frexp</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, frexp.o(i.frexp))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = frexp &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[340]"></a>lv_anim_del</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_anim.o(i.lv_anim_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_stop
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_destructor
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[738]"></a>lv_anim_get</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_anim_get
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[335]"></a>lv_anim_init</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_anim.o(i.lv_anim_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_anim_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_onAnimHeightFinish(_lv_anim_t*)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)
<LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_add_wrapper
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_out
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::Appear(bool)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::AnimDefaultInit(_lv_anim_t*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetGradual(unsigned short, unsigned short)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[c9]"></a>lv_anim_path_bounce</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_anim.o(i.lv_anim_path_bounce))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_anim_path_bounce &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> template.o(i._ZN4Page8Template18onCustomAttrConfigEv)
</UL>
<P><STRONG><a name="[a4]"></a>lv_anim_path_ease_out</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_path_ease_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_anim_path_ease_out &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 12]<UL><LI> statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c216StatusBar_CreateEP9_lv_obj_t)
<LI> startup.o(i._ZN4Page7Startup18onCustomAttrConfigEv)
<LI> startupview.o(.constdata)
<LI> dialplateview.o(i._ZN4Page13DialplateView10Btn_CreateEP9_lv_obj_tPKvs)
<LI> livemapview.o(i._ZN4Page11LiveMapView15ZoomCtrl_CreateEP9_lv_obj_t)
<LI> pm_base.o(i._ZN11PageManagerC1EP11PageFactory)
<LI> app.o(i._Z8App_Initv)
<LI> statusbar.o(i._ZN9StatusBar6AppearEb)
<LI> dialplate.o(i._ZN4Page9Dialplate18onCustomAttrConfigEv)
<LI> dialplateview.o(.constdata)
<LI> hal_backlight.o(i._ZN3HAL20Backlight_SetGradualEtt)
<LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[ef]"></a>lv_anim_path_linear</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_path_linear))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_anim_path_linear &rArr; lv_map
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_anim.o(i.lv_anim_init)
<LI> lv_style.o(i.lv_style_transition_dsc_init)
</UL>
<P><STRONG><a name="[c0]"></a>lv_anim_path_overshoot</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_path_overshoot))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_anim_path_overshoot &rArr; lv_bezier3
</UL>
<BR>[Calls]<UL><LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[739]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bezier3
</UL>
<BR>[Address Reference Count : 1]<UL><LI> systeminfosview.o(i._ZN4Page15SystemInfosView10Style_InitEv)
</UL>
<P><STRONG><a name="[789]"></a>lv_anim_speed_to_time</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_anim.o(i.lv_anim_speed_to_time))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[344]"></a>lv_anim_start</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_anim.o(i.lv_anim_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[73a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_is_empty
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_onAnimHeightFinish(_lv_anim_t*)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)
<LI><a href="#[4e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_out
<LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_start
<LI><a href="#[550]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::Appear(bool)
<LI><a href="#[4e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_fade_in
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchAnimCreate(PageBase*)
<LI><a href="#[483]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetGradual(unsigned short, unsigned short)
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[73b]"></a>lv_anim_timeline_add</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_anim_timeline.o(i.lv_anim_timeline_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_anim_timeline_add &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[4d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_add_wrapper
</UL>

<P><STRONG><a name="[4d8]"></a>lv_anim_timeline_add_wrapper</STRONG> (Thumb, 84 bytes, Stack size 88 bytes, lv_anim_timeline_wrapper.o(i.lv_anim_timeline_add_wrapper))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_anim_timeline_add_wrapper &rArr; lv_anim_timeline_add &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_add
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4d6]"></a>lv_anim_timeline_create</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_anim_timeline.o(i.lv_anim_timeline_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_anim_timeline_create &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4da]"></a>lv_anim_timeline_del</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_anim_timeline.o(i.lv_anim_timeline_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_anim_timeline_del &rArr; lv_anim_timeline_stop &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[73c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_stop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Delete()
<LI><a href="#[518]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Delete()
</UL>

<P><STRONG><a name="[73d]"></a>lv_anim_timeline_get_playtime</STRONG> (Thumb, 52 bytes, Stack size 20 bytes, lv_anim_timeline.o(i.lv_anim_timeline_get_playtime))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_anim_timeline_get_playtime
</UL>
<BR>[Called By]<UL><LI><a href="#[512]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_start
</UL>

<P><STRONG><a name="[511]"></a>lv_anim_timeline_set_reverse</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_anim_timeline.o(i.lv_anim_timeline_set_reverse))
<BR><BR>[Called By]<UL><LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::AppearAnimStart(bool)
</UL>

<P><STRONG><a name="[512]"></a>lv_anim_timeline_start</STRONG> (Thumb, 102 bytes, Stack size 96 bytes, lv_anim_timeline.o(i.lv_anim_timeline_start))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_anim_timeline_start &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[73d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_get_playtime
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewWillAppear()
<LI><a href="#[510]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::AppearAnimStart(bool)
</UL>

<P><STRONG><a name="[73c]"></a>lv_anim_timeline_stop</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_anim_timeline.o(i.lv_anim_timeline_stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_anim_timeline_stop &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Called By]<UL><LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_del
</UL>

<P><STRONG><a name="[6f1]"></a>lv_area_get_size</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_get_size))
<BR><BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
<LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
</UL>

<P><STRONG><a name="[6fc]"></a>lv_area_increase</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_increase))
<BR><BR>[Called By]<UL><LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[630]"></a>lv_area_move</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_move))
<BR><BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[731]"></a>lv_area_set</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_area.o(i.lv_area_set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_area_set
</UL>
<BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_set_bg_color
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[e3]"></a>lv_area_set_height</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_height))
<BR><BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.children_repos)
</UL>
<P><STRONG><a name="[e2]"></a>lv_area_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_area.o(i.lv_area_set_width))
<BR><BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.children_repos)
</UL>
<P><STRONG><a name="[343]"></a>lv_async_call</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_async.o(i.lv_async_call))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[54f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_set_repeat_count
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del_async
</UL>

<P><STRONG><a name="[7f5]"></a>lv_bar_get_mode</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_get_mode))
<BR><BR>[Called By]<UL><LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
</UL>

<P><STRONG><a name="[7f4]"></a>lv_bar_get_start_value</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_get_start_value))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[53a]"></a>lv_bar_get_value</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_get_value))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[535]"></a>lv_bar_set_range</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lv_bar.o(i.lv_bar_set_range))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_bar_set_range &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
</UL>

<P><STRONG><a name="[741]"></a>lv_bar_set_start_value</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_bar.o(i.lv_bar_set_start_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_bar_set_start_value &rArr; lv_bar_set_value_with_anim &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4c7]"></a>lv_bar_set_value</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_bar.o(i.lv_bar_set_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
</UL>
<BR>[Called By]<UL><LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[739]"></a>lv_bezier3</STRONG> (Thumb, 78 bytes, Stack size 20 bytes, lv_math.o(i.lv_bezier3))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_bezier3
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_bounce
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_overshoot
</UL>

<P><STRONG><a name="[7dc]"></a>lv_clamp_height</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, lv_obj_pos.o(i.lv_clamp_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_clamp_height
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[7db]"></a>lv_clamp_width</STRONG> (Thumb, 106 bytes, Stack size 20 bytes, lv_obj_pos.o(i.lv_clamp_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_clamp_width
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[708]"></a>lv_color_fill</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_color.o(i.lv_color_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_color_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[2db]"></a>lv_disp_draw_buf_init</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_draw_buf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_disp_draw_buf_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init()
</UL>

<P><STRONG><a name="[2dc]"></a>lv_disp_drv_init</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_hal_disp.o(i.lv_disp_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_disp_drv_init &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init()
</UL>

<P><STRONG><a name="[2dd]"></a>lv_disp_drv_register</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lv_hal_disp.o(i.lv_disp_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = lv_disp_drv_register &rArr; lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[749]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_disp_init()
</UL>

<P><STRONG><a name="[2e9]"></a>lv_disp_flush_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_flush_ready))
<BR><BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;disp_send_finish_callback()
</UL>

<P><STRONG><a name="[303]"></a>lv_disp_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_set_bg_color
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillAppear()
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
</UL>

<P><STRONG><a name="[788]"></a>lv_disp_get_dpi</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_dpi))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[62e]"></a>lv_disp_get_draw_buf</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_draw_buf))
<BR><BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>

<P><STRONG><a name="[33b]"></a>lv_disp_get_hor_res</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_hor_res))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_set_bg_color
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[72f]"></a>lv_disp_get_layer_sys</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_sys))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_sys
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[309]"></a>lv_disp_get_layer_top</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_layer_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_layer_top
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[304]"></a>lv_disp_get_scr_act</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_act))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_act
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[74b]"></a>lv_disp_get_scr_prev</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_scr_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_scr_prev
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
</UL>

<P><STRONG><a name="[74c]"></a>lv_disp_get_theme</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_disp.o(i.lv_disp_get_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_disp_get_theme
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
</UL>
<BR>[Called By]<UL><LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
</UL>

<P><STRONG><a name="[33c]"></a>lv_disp_get_ver_res</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_hal_disp.o(i.lv_disp_get_ver_res))
<BR><BR>[Called By]<UL><LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_set_bg_color
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillAppear()
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[307]"></a>lv_disp_set_bg_color</STRONG> (Thumb, 66 bytes, Stack size 32 bytes, lv_disp.o(i.lv_disp_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_disp_set_bg_color &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
</UL>

<P><STRONG><a name="[6c9]"></a>lv_draw_img</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1012<LI>Call Chain = lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6c3]"></a>lv_draw_img_dsc_init</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_draw_img_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_draw_img_dsc_init &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6c8]"></a>lv_draw_label</STRONG> (Thumb, 1282 bytes, Stack size 224 bytes, lv_draw_label.o(i.lv_draw_label))
<BR><BR>[Stack]<UL><LI>Max Depth = 796 + In Cycle
<LI>Call Chain = lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
<LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[753]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hex_char_to_num
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6c7]"></a>lv_draw_label_dsc_init</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_draw_label.o(i.lv_draw_label_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = lv_draw_label_dsc_init &rArr; lv_palette_main &rArr; lv_color_black &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
<LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[754]"></a>lv_draw_letter</STRONG> (Thumb, 190 bytes, Stack size 64 bytes, lv_draw_label.o(i.lv_draw_letter))
<BR><BR>[Stack]<UL><LI>Max Depth = 372<LI>Call Chain = lv_draw_letter &rArr; draw_letter_normal &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
<LI><a href="#[758]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_bitmap
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[755]"></a>lv_draw_line</STRONG> (Thumb, 402 bytes, Stack size 96 bytes, lv_draw_line.o(i.lv_draw_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 572 + In Cycle
<LI>Call Chain = lv_draw_line &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[751]"></a>lv_draw_line_dsc_init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lv_draw_line.o(i.lv_draw_line_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_draw_line_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[6ba]"></a>lv_draw_mask_add</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_add))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_draw_mask_add
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6bd]"></a>lv_draw_mask_apply</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[6bf]"></a>lv_draw_mask_free_param</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_draw_mask.o(i.lv_draw_mask_free_param))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_draw_mask_free_param &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6b8]"></a>lv_draw_mask_is_any</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_draw_mask.o(i.lv_draw_mask_is_any))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_draw_mask_is_any &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
</UL>

<P><STRONG><a name="[6f0]"></a>lv_draw_mask_line_points_init</STRONG> (Thumb, 274 bytes, Stack size 32 bytes, lv_draw_mask.o(i.lv_draw_mask_line_points_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_draw_mask_line_points_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
</UL>

<P><STRONG><a name="[6b9]"></a>lv_draw_mask_radius_init</STRONG> (Thumb, 288 bytes, Stack size 24 bytes, lv_draw_mask.o(i.lv_draw_mask_radius_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[75e]"></a>lv_draw_mask_remove_custom</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_custom))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_draw_mask_remove_custom
</UL>
<BR>[Calls]<UL><LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[6be]"></a>lv_draw_mask_remove_id</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_draw_mask_remove_id))
<BR><BR>[Called By]<UL><LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6e6]"></a>lv_draw_rect</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_rect))
<BR><BR>[Stack]<UL><LI>Max Depth = 1108<LI>Call Chain = lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[6e4]"></a>lv_draw_rect_dsc_init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_draw_rect.o(i.lv_draw_rect_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_draw_rect_dsc_init &rArr; lv_color_black &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[33e]"></a>lv_event_get_code</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_code))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onEvent(_lv_event_t*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onEvent(_lv_event_t*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onEvent(_lv_event_t*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7bc]"></a>lv_event_get_indev</STRONG> (Thumb, 74 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_indev))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[6d8]"></a>lv_event_get_param</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_param))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[33d]"></a>lv_event_get_target</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_target))
<BR><BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onEvent(_lv_event_t*)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onEvent(_lv_event_t*)
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onEvent(_lv_event_t*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[559]"></a>lv_event_get_user_data</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_event.o(i.lv_event_get_user_data))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[34a]"></a>lv_event_send</STRONG> (Thumb, 52 bytes, Stack size 40 bytes, lv_event.o(i.lv_event_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_all_objs
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootAsyncLeave(void*)
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_anim_ready_cb
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[75f]"></a>lv_extra_init</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_extra.o(i.lv_extra_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_extra_init &rArr; lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[760]"></a>lv_flex_init</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lv_flex.o(i.lv_flex_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[110]"></a>lv_font_get_bitmap_fmt_txt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_font_fmt_txt.o(i.lv_font_get_bitmap_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_font_get_bitmap_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 7]<UL><LI> font_bahnschrift_32.o(.constdata)
<LI> font_agencyb_36.o(.constdata)
<LI> font_bahnschrift_13.o(.constdata)
<LI> font_bahnschrift_17.o(.constdata)
<LI> font_bahnschrift_65.o(.constdata)
<LI> lv_font_montserrat_10.o(.constdata)
<LI> lv_font_montserrat_14.o(.constdata)
</UL>
<P><STRONG><a name="[758]"></a>lv_font_get_glyph_bitmap</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_font.o(i.lv_font_get_glyph_bitmap))
<BR><BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[757]"></a>lv_font_get_glyph_dsc</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lv_font.o(i.lv_font_get_glyph_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[10f]"></a>lv_font_get_glyph_dsc_fmt_txt</STRONG> (Thumb, 152 bytes, Stack size 32 bytes, lv_font_fmt_txt.o(i.lv_font_get_glyph_dsc_fmt_txt))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_font_get_glyph_dsc_fmt_txt &rArr; get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[719]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_kern_value
<LI><a href="#[715]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_glyph_dsc_id
</UL>
<BR>[Address Reference Count : 7]<UL><LI> font_bahnschrift_32.o(.constdata)
<LI> font_agencyb_36.o(.constdata)
<LI> font_bahnschrift_13.o(.constdata)
<LI> font_bahnschrift_17.o(.constdata)
<LI> font_bahnschrift_65.o(.constdata)
<LI> lv_font_montserrat_10.o(.constdata)
<LI> lv_font_montserrat_14.o(.constdata)
</UL>
<P><STRONG><a name="[6f6]"></a>lv_font_get_glyph_width</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_font.o(i.lv_font_get_glyph_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[757]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[675]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_next_word
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[3a9]"></a>lv_fs_close</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_close
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
</UL>

<P><STRONG><a name="[420]"></a>lv_fs_dir_close</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_dir_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_dir_close
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::MapConvGetRange(const char*, short*, short*)
</UL>

<P><STRONG><a name="[41e]"></a>lv_fs_dir_open</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_fs.o(i.lv_fs_dir_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_dir_open &rArr; lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_real_path
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::MapConvGetRange(const char*, short*, short*)
</UL>

<P><STRONG><a name="[41f]"></a>lv_fs_dir_read</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_dir_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_dir_read
</UL>
<BR>[Called By]<UL><LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::MapConvGetRange(const char*, short*, short*)
</UL>

<P><STRONG><a name="[2d5]"></a>lv_fs_drv_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_drv_init))
<BR><BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init()
</UL>

<P><STRONG><a name="[2d6]"></a>lv_fs_drv_register</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_fs_drv_register &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_fs_init()
</UL>

<P><STRONG><a name="[764]"></a>lv_fs_get_drv</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_drv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_dir_open
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[766]"></a>lv_fs_get_ext</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_get_ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_fs_get_ext &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[326]"></a>lv_fs_open</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_fs_open &rArr; lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[764]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_drv
<LI><a href="#[765]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_real_path
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrapper::FileWrapper(const char*, unsigned char)
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
</UL>

<P><STRONG><a name="[76d]"></a>lv_fs_read</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[76f]"></a>lv_fs_seek</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_fs.o(i.lv_fs_seek))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[324]"></a>lv_fs_write</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_fs.o(i.lv_fs_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_fs_write
</UL>
<BR>[Called By]<UL><LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_FileWriteString(lv_fs_file_t*, const char*)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrapper::write(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[761]"></a>lv_grid_init</STRONG> (Thumb, 116 bytes, Stack size 8 bytes, lv_grid.o(i.lv_grid_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_grid_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[763]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_register_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
</UL>

<P><STRONG><a name="[522]"></a>lv_group_add_obj</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_add_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_group_add_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Group_Init()
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[2e2]"></a>lv_group_create</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lv_group.o(i.lv_group_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_group_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init()
</UL>

<P><STRONG><a name="[72b]"></a>lv_group_focus_next</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_group_focus_next &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[523]"></a>lv_group_focus_obj</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_focus_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_group_focus_obj &rArr; lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Group_Init()
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
</UL>

<P><STRONG><a name="[72a]"></a>lv_group_focus_prev</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_focus_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
</UL>

<P><STRONG><a name="[4df]"></a>lv_group_get_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_default))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillDisappear()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
<LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Delete()
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewDidAppear()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Group_Init()
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[728]"></a>lv_group_get_editing</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_editing))
<BR><BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[531]"></a>lv_group_get_focused</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_focused))
<BR><BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillDisappear()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::onFocus(_lv_group_t*)
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
</UL>

<P><STRONG><a name="[729]"></a>lv_group_get_obj_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_get_obj_count))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_group_get_obj_count &rArr; _lv_ll_get_len
</UL>
<BR>[Calls]<UL><LI><a href="#[668]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_len
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[558]"></a>lv_group_remove_all_objs</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_remove_all_objs))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_group_remove_all_objs &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillDisappear()
</UL>

<P><STRONG><a name="[769]"></a>lv_group_remove_obj</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lv_group.o(i.lv_group_remove_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = lv_group_remove_obj &rArr; lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[767]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_refocus
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[726]"></a>lv_group_send_data</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_group_send_data &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
</UL>

<P><STRONG><a name="[2e4]"></a>lv_group_set_default</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_set_default))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init()
</UL>

<P><STRONG><a name="[543]"></a>lv_group_set_editing</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_set_editing))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[521]"></a>lv_group_set_focus_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_set_focus_cb))
<BR><BR>[Called By]<UL><LI><a href="#[4e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Delete()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Group_Init()
</UL>

<P><STRONG><a name="[520]"></a>lv_group_set_wrap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_group.o(i.lv_group_set_wrap))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
<LI><a href="#[51f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Group_Init()
</UL>

<P><STRONG><a name="[648]"></a>lv_img_buf_get_px_alpha</STRONG> (Thumb, 186 bytes, Stack size 36 bytes, lv_img_buf.o(i.lv_img_buf_get_px_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_img_buf_get_px_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[647]"></a>lv_img_buf_get_px_color</STRONG> (Thumb, 248 bytes, Stack size 40 bytes, lv_img_buf.o(i.lv_img_buf_get_px_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = lv_img_buf_get_px_color &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[645]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy_small
<LI><a href="#[646]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[76a]"></a>lv_img_cf_get_px_size</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_get_px_size))
<BR><BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
</UL>

<P><STRONG><a name="[64d]"></a>lv_img_cf_has_alpha</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_has_alpha))
<BR><BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[64c]"></a>lv_img_cf_is_chroma_keyed</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_cf_is_chroma_keyed))
<BR><BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
</UL>

<P><STRONG><a name="[40e]"></a>lv_img_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_img.o(i.lv_img_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_img_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[dd]"></a>lv_img_decoder_built_in_close</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_img_decoder_built_in_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[da]"></a>lv_img_decoder_built_in_info</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = lv_img_decoder_built_in_info &rArr; lv_fs_open &rArr; lv_fs_get_drv
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[db]"></a>lv_img_decoder_built_in_open</STRONG> (Thumb, 382 bytes, Stack size 32 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_img_decoder_built_in_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[766]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_get_ext
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[771]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[dc]"></a>lv_img_decoder_built_in_read_line</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_img_decoder_built_in_read_line &rArr; lv_img_decoder_built_in_line_alpha &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img_decoder.o(i._lv_img_decoder_init)
</UL>
<P><STRONG><a name="[772]"></a>lv_img_decoder_close</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_close))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_img_decoder_close &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[651]"></a>lv_img_decoder_create</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_img_decoder.o(i.lv_img_decoder_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_img_decoder_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
</UL>

<P><STRONG><a name="[6c2]"></a>lv_img_decoder_get_info</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_img_decoder.o(i.lv_img_decoder_get_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_img_decoder_get_info
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[64f]"></a>lv_img_decoder_open</STRONG> (Thumb, 182 bytes, Stack size 40 bytes, lv_img_decoder.o(i.lv_img_decoder_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_img_decoder_open &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
</UL>

<P><STRONG><a name="[773]"></a>lv_img_decoder_read_line</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, lv_img_decoder.o(i.lv_img_decoder_read_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_img_decoder_read_line
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[548]"></a>lv_img_set_angle</STRONG> (Thumb, 244 bytes, Stack size 48 bytes, lv_img.o(i.lv_img_set_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = lv_img_set_angle &rArr; lv_obj_refresh_ext_draw_size &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
</UL>

<P><STRONG><a name="[40f]"></a>lv_img_set_src</STRONG> (Thumb, 338 bytes, Stack size 48 bytes, lv_img.o(i.lv_img_set_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_img_set_src &rArr; lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetArrowTheme(const char*)
<LI><a href="#[544]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContReload()
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[6c1]"></a>lv_img_src_get_type</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_img_src_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_info
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
</UL>

<P><STRONG><a name="[2e0]"></a>lv_indev_drv_init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_hal_indev.o(i.lv_indev_drv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_indev_drv_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init()
</UL>

<P><STRONG><a name="[2e1]"></a>lv_indev_drv_register</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_hal_indev.o(i.lv_indev_drv_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_indev_drv_register &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init()
</UL>

<P><STRONG><a name="[341]"></a>lv_indev_get_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_act))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::RootGetDragPredict(short*, short*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[718]"></a>lv_indev_get_next</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_hal_indev.o(i.lv_indev_get_next))
<BR><BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[6fe]"></a>lv_indev_get_obj_act</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_obj_act))
<BR><BR>[Called By]<UL><LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[7f3]"></a>lv_indev_get_point</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_point))
<BR><BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7cc]"></a>lv_indev_get_scroll_dir</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[7b9]"></a>lv_indev_get_scroll_obj</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_scroll_obj))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[717]"></a>lv_indev_get_type</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_type))
<BR><BR>[Called By]<UL><LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[342]"></a>lv_indev_get_vect</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_get_vect))
<BR><BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::RootGetDragPredict(short*, short*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::onRootDragEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[fc]"></a>lv_indev_read_timer_cb</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, lv_indev.o(i.lv_indev_read_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 400<LI>Call Chain = lv_indev_read_timer_cb &rArr; indev_encoder_proc &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[777]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_reset_query_handler
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_hal_indev.o(i.lv_indev_drv_register)
</UL>
<P><STRONG><a name="[778]"></a>lv_indev_reset</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, lv_indev.o(i.lv_indev_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_indev_reset
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
</UL>
<BR>[Called By]<UL><LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[730]"></a>lv_indev_search_obj</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_indev.o(i.lv_indev_search_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = lv_indev_search_obj &rArr;  lv_indev_search_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[2e3]"></a>lv_indev_set_group</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_set_group))
<BR><BR>[Called By]<UL><LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_indev_init()
</UL>

<P><STRONG><a name="[557]"></a>lv_indev_wait_release</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_indev.o(i.lv_indev_wait_release))
<BR><BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillAppear()
</UL>

<P><STRONG><a name="[2ac]"></a>lv_init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, lv_obj.o(i.lv_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_init &rArr; lv_extra_init &rArr; lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[626]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_init
<LI><a href="#[641]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_group_init
<LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
<LI><a href="#[75f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_extra_init
<LI><a href="#[673]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_timer_core_init
<LI><a href="#[77b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_init
<LI><a href="#[670]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_init
<LI><a href="#[650]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_decoder_init
<LI><a href="#[640]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_fs_init
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_alloc(unsigned)
</UL>

<P><STRONG><a name="[2ab]"></a>lv_is_initialized</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj.o(i.lv_is_initialized))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_alloc(unsigned)
</UL>

<P><STRONG><a name="[411]"></a>lv_label_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_label_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::TemplateView::Create(_lv_obj_t*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[783]"></a>lv_label_get_letter_on</STRONG> (Thumb, 496 bytes, Stack size 112 bytes, lv_label.o(i.lv_label_get_letter_on))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[77c]"></a>lv_label_set_long_mode</STRONG> (Thumb, 106 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_long_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lv_label_set_long_mode &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[413]"></a>lv_label_set_text</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, lv_label.o(i.lv_label_set_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::SportInfoUpdate()
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::Update()
<LI><a href="#[4ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetRTC(const char*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::TemplateView::Create(_lv_obj_t*)
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewLoad()
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
</UL>

<P><STRONG><a name="[41a]"></a>lv_label_set_text_fmt</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, lv_label.o(i.lv_label_set_text_fmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 624<LI>Call Chain = lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::SportInfoUpdate()
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::Update()
<LI><a href="#[4f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetSystem(const char*, const char*, const char*, const char*, const char*, const char*)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetSport(float, const char*, float)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetMAG(float, int, int, int)
<LI><a href="#[4ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetIMU(int, const char*)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetGPS(float, float, float, const char*, float, float)
<LI><a href="#[4f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetStorage(const char*, const char*, const char*, const char*)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetBattery(int, float, const char*)
<LI><a href="#[552]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::Update()
</UL>

<P><STRONG><a name="[762]"></a>lv_layout_register</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_layout_register))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>

<P><STRONG><a name="[385]"></a>lv_line_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_line.o(i.lv_line_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_line_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
</UL>

<P><STRONG><a name="[378]"></a>lv_line_set_points</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_line.o(i.lv_line_set_points))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_line_set_points &rArr; lv_obj_refresh_self_size &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
</UL>
<BR>[Called By]<UL><LI><a href="#[4cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetLineActivePoint(short, short)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::start()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::reset()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::stop()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append_to_end(const lv_point_t*)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::refresh_line()
</UL>

<P><STRONG><a name="[41c]"></a>lv_map</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_math.o(i.lv_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_map
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_ease_out
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_bounce
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_overshoot
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_path_linear
</UL>

<P><STRONG><a name="[84]"></a>lv_mem_alloc</STRONG> (Thumb, 38 bytes, Stack size 40 bytes, lv_mem.o(i.lv_mem_alloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>
<BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_create
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;first_alloc(unsigned)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(i._Z11first_allocj)
</UL>
<P><STRONG><a name="[63d]"></a>lv_mem_buf_free_all</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_mem.o(i.lv_mem_buf_free_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_mem_buf_free_all &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[69f]"></a>lv_mem_buf_get</STRONG> (Thumb, 148 bytes, Stack size 24 bytes, lv_mem.o(i.lv_mem_buf_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[6af]"></a>lv_mem_buf_release</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_buf_release))
<BR><BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[770]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_indexed
<LI><a href="#[76e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_line_alpha
</UL>

<P><STRONG><a name="[34b]"></a>lv_mem_free</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[4da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_del
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Delete()
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUnloadExecute(PageBase*)
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[666]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_clear
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[63d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_free_all
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_close
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_timer_cb
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_destructor
<LI><a href="#[56e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::invalidate()
</UL>

<P><STRONG><a name="[77a]"></a>lv_mem_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_mem_init &rArr; lv_tlsf_create_with_pool &rArr; lv_tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
</UL>

<P><STRONG><a name="[78d]"></a>lv_mem_monitor</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_monitor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_mem_monitor &rArr; lv_tlsf_walk_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[790]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_get_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>

<P><STRONG><a name="[570]"></a>lv_mem_realloc</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_mem.o(i.lv_mem_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[73b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_add
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[762]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_layout_register
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[56f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::changeBuffer(unsigned)
</UL>

<P><STRONG><a name="[67d]"></a>lv_memcpy</STRONG> (Thumb, 296 bytes, Stack size 12 bytes, lv_mem.o(i.lv_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[6bc]"></a>lv_memset</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, lv_mem.o(i.lv_memset))
<BR><BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
<LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[63c]"></a>lv_memset_00</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, lv_mem.o(i.lv_memset_00))
<BR><BR>[Called By]<UL><LI><a href="#[4d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_timeline_create
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_init
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[652]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_read
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[63f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_draw_mask_cleanup
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[651]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_create
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
<LI><a href="#[64f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_open
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_draw_buf_init
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_drv_init
</UL>

<P><STRONG><a name="[6cd]"></a>lv_memset_ff</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, lv_mem.o(i.lv_memset_ff))
<BR><BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_ver
<LI><a href="#[6ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_skew
<LI><a href="#[6ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_line_hor
</UL>

<P><STRONG><a name="[333]"></a>lv_obj_add_event_cb</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lv_event.o(i.lv_obj_add_event_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_add_event_cb &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[536]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::AttachEvent(_lv_obj_t*)
<LI><a href="#[553]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::AttachEvent(_lv_obj_t*)
<LI><a href="#[4dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::AttachEvent(_lv_obj_t*)
<LI><a href="#[551]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::AttachEvent(_lv_obj_t*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::RootEnableDrag(_lv_obj_t*)
</UL>

<P><STRONG><a name="[34f]"></a>lv_obj_add_flag</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_add_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_obj_add_flag &rArr; lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::reset()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillDisappear()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateDidDisappearExecute(PageBase*)
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
</UL>

<P><STRONG><a name="[4c5]"></a>lv_obj_add_state</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_add_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_add_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::SetStyle(StatusBar::Style_t)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::Update()
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[386]"></a>lv_obj_add_style</STRONG> (Thumb, 172 bytes, Stack size 32 bytes, lv_obj_style.o(i.lv_obj_add_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_obj_add_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
</UL>

<P><STRONG><a name="[410]"></a>lv_obj_align</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[454]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StartupView_cpp]::lv_obj_center(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
<LI><a href="#[508]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::TemplateView::Create(_lv_obj_t*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[412]"></a>lv_obj_align_to</STRONG> (Thumb, 728 bytes, Stack size 56 bytes, lv_obj_pos.o(i.lv_obj_align_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ImgLabel_Create(_lv_obj_t*, const void*, short, short)
</UL>

<P><STRONG><a name="[768]"></a>lv_obj_allocate_spec_attr</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_allocate_spec_attr))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_event_cb
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>

<P><STRONG><a name="[79c]"></a>lv_obj_area_is_visible</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_obj_area_is_visible))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_obj_area_is_visible &rArr; _lv_area_intersect
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[74b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_prev
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
</UL>

<P><STRONG><a name="[73f]"></a>lv_obj_calculate_ext_draw_size</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_calculate_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_obj_calculate_ext_draw_size &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[784]"></a>lv_obj_calculate_style_text_align</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj_style.o(i.lv_obj_calculate_style_text_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_obj_calculate_style_text_align &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[76b]"></a>lv_obj_class_create_obj</STRONG> (Thumb, 216 bytes, Stack size 24 bytes, lv_obj_class.o(i.lv_obj_class_create_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_obj_class_create_obj &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
</UL>

<P><STRONG><a name="[76c]"></a>lv_obj_class_init_obj</STRONG> (Thumb, 106 bytes, Stack size 8 bytes, lv_obj_class.o(i.lv_obj_class_init_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_default
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
<LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[4c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_create
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_create
</UL>

<P><STRONG><a name="[306]"></a>lv_obj_clear_flag</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_clear_flag))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_obj_clear_flag &rArr; lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::start()
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateWillAppearExecute(PageBase*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_constructor
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_constructor
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[54d]"></a>lv_obj_clear_state</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_clear_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>
<BR>[Called By]<UL><LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::SetStyle(StatusBar::Style_t)
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[347]"></a>lv_obj_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[38c]"></a>lv_obj_del</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_obj_tree.o(i.lv_obj_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = lv_obj_del &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::~lv_poly_line()
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del_async_cb
</UL>

<P><STRONG><a name="[34c]"></a>lv_obj_del_async</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_del_async))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_obj_del_async &rArr; lv_async_call &rArr; lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>
<BR>[Called By]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateUnloadExecute(PageBase*)
</UL>

<P><STRONG><a name="[6e3]"></a>lv_obj_draw_dsc_init</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_draw.o(i.lv_obj_draw_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_draw_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[7a8]"></a>lv_obj_enable_style_refresh</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(i.lv_obj_enable_style_refresh))
<BR><BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
</UL>

<P><STRONG><a name="[6d7]"></a>lv_obj_event_base</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_event.o(i.lv_obj_event_base))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_obj_event_base
</UL>
<BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[4e3]"></a>lv_obj_fade_in</STRONG> (Thumb, 52 bytes, Stack size 88 bytes, lv_obj_style.o(i.lv_obj_fade_in))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_fade_in &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillAppear()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillAppear()
</UL>

<P><STRONG><a name="[4e5]"></a>lv_obj_fade_out</STRONG> (Thumb, 48 bytes, Stack size 88 bytes, lv_obj_style.o(i.lv_obj_fade_out))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_fade_out &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewDidLoad()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillDisappear()
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillDisappear()
</UL>

<P><STRONG><a name="[691]"></a>lv_obj_get_child</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_get_child))
<BR><BR>[Called By]<UL><LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[400]"></a>lv_obj_get_child_cnt</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_get_child_cnt))
<BR><BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to PM_Router_cpp]::lv_obj_move_foreground(_lv_obj_t*)
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[775]"></a>lv_obj_get_click_area</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_click_area
</UL>
<BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[6f4]"></a>lv_obj_get_content_coords</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_content_coords))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[69b]"></a>lv_obj_get_content_height</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_content_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_obj_get_content_height &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[699]"></a>lv_obj_get_content_width</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_content_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_obj_get_content_width &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[6da]"></a>lv_obj_get_coords</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(i.lv_obj_get_coords))
<BR><BR>[Calls]<UL><LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[787]"></a>lv_obj_get_disp</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_obj_tree.o(i.lv_obj_get_disp))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[724]"></a>lv_obj_get_group</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_group))
<BR><BR>[Called By]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[eb]"></a>lv_obj_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(i.lv_obj_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.find_track_end)
</UL>
<P><STRONG><a name="[7c1]"></a>lv_obj_get_index</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_obj_tree.o(i.lv_obj_get_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_obj_get_index
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
</UL>
<BR>[Called By]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[7c2]"></a>lv_obj_get_local_style_prop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj_style.o(i.lv_obj_get_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = lv_obj_get_local_style_prop &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[3ff]"></a>lv_obj_get_parent</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_get_parent))
<BR><BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::onFocus(_lv_group_t*)
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to PM_Router_cpp]::lv_obj_move_foreground(_lv_obj_t*)
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[79d]"></a>lv_obj_get_screen</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lv_obj_tree.o(i.lv_obj_get_screen))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
</UL>

<P><STRONG><a name="[657]"></a>lv_obj_get_scroll_bottom</STRONG> (Thumb, 154 bytes, Stack size 32 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lv_obj_get_scroll_bottom &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[7c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_height
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
</UL>
<BR>[Called By]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[659]"></a>lv_obj_get_scroll_dir</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_dir))
<BR><BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
</UL>

<P><STRONG><a name="[65b]"></a>lv_obj_get_scroll_left</STRONG> (Thumb, 186 bytes, Stack size 40 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[65a]"></a>lv_obj_get_scroll_right</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lv_obj_get_scroll_right &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[7ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_self_width
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[65f]"></a>lv_obj_get_scroll_snap_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_snap_x))
<BR><BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[660]"></a>lv_obj_get_scroll_snap_y</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_snap_y))
<BR><BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[656]"></a>lv_obj_get_scroll_top</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_top))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[70f]"></a>lv_obj_get_scroll_x</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_x))
<BR><BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[52d]"></a>lv_obj_get_scroll_y</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scroll_y))
<BR><BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetScrollToY(_lv_obj_t*, short, lv_anim_enable_t)
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[6f9]"></a>lv_obj_get_scrollbar_area</STRONG> (Thumb, 1592 bytes, Stack size 96 bytes, lv_obj_scroll.o(i.lv_obj_get_scrollbar_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[7cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_mode
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[7cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_dir
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[7cb]"></a>lv_obj_get_scrollbar_mode</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.lv_obj_get_scrollbar_mode))
<BR><BR>[Called By]<UL><LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
</UL>

<P><STRONG><a name="[7c6]"></a>lv_obj_get_self_height</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_self_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_get_self_height &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[7ca]"></a>lv_obj_get_self_width</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_self_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_obj_get_self_width &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[712]"></a>lv_obj_get_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_get_state))
<BR><BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[416]"></a>lv_obj_get_style_prop</STRONG> (Thumb, 208 bytes, Stack size 48 bytes, lv_obj_style.o(i.lv_obj_get_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 132 + In Cycle
<LI>Call Chain = lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
</UL>
<BR>[Called By]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_obj_get_style_height(const _lv_obj_t*, unsigned)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[452]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_get_style_width(const _lv_obj_t*, unsigned)
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 3)]::_FUN(void*)
<LI><a href="#[784]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_style_text_align
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[7c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_constructor
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_speed
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
</UL>

<P><STRONG><a name="[ea]"></a>lv_obj_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_pos.o(i.lv_obj_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_constructor
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.find_track_end)
</UL>
<P><STRONG><a name="[5f9]"></a>lv_obj_get_x</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_obj_get_x &rArr; lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 1)]::_FUN(void*)
</UL>

<P><STRONG><a name="[4d7]"></a>lv_obj_get_y</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_get_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_obj_get_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::onFocus(_lv_group_t*)
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 2)]::_FUN(void*)
</UL>

<P><STRONG><a name="[65e]"></a>lv_obj_has_flag</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_has_flag))
<BR><BR>[Called By]<UL><LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[654]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_scroll_obj
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
<LI><a href="#[779]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_hit_test
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[6a0]"></a>lv_obj_has_flag_any</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_has_flag_any))
<BR><BR>[Called By]<UL><LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[4f7]"></a>lv_obj_has_state</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj.o(i.lv_obj_has_state))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onEvent(_lv_event_t*)
</UL>

<P><STRONG><a name="[779]"></a>lv_obj_hit_test</STRONG> (Thumb, 72 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_obj_hit_test))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_obj_hit_test &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
</UL>

<P><STRONG><a name="[6db]"></a>lv_obj_init_draw_img_dsc</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_img_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_obj_init_draw_img_dsc &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6dc]"></a>lv_obj_init_draw_label_dsc</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_label_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_obj_init_draw_label_dsc &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[78a]"></a>lv_obj_init_draw_line_dsc</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lv_obj_draw.o(i.lv_obj_init_draw_line_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_obj_init_draw_line_dsc &rArr; lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[6e5]"></a>lv_obj_init_draw_rect_dsc</STRONG> (Thumb, 608 bytes, Stack size 32 bytes, lv_obj_draw.o(i.lv_obj_init_draw_rect_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lv_obj_init_draw_rect_dsc &rArr; lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[7d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[7d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_color_filtered
<LI><a href="#[7a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_width
<LI><a href="#[7a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_spread
<LI><a href="#[7a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_opa
<LI><a href="#[7a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_y
<LI><a href="#[7a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_shadow_ofs_x
<LI><a href="#[7a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_width
<LI><a href="#[7a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_pad
<LI><a href="#[7a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_outline_opa
<LI><a href="#[7cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_blend_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[6aa]"></a>lv_obj_invalidate</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, lv_obj_pos.o(i.lv_obj_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[535]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_range
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_all_objs
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[74a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_scrollbar_mode
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[742]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value_with_anim
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim_ready
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_anim
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_y_anim
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_ofs_x_anim
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[740]"></a>lv_obj_invalidate_area</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_invalidate_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[79f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[727]"></a>lv_obj_is_editable</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, lv_obj_class.o(i.lv_obj_is_editable))
<BR><BR>[Calls]<UL><LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
</UL>
<BR>[Called By]<UL><LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
</UL>

<P><STRONG><a name="[7ab]"></a>lv_obj_is_group_def</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_obj_class.o(i.lv_obj_is_group_def))
<BR><BR>[Calls]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
</UL>
<BR>[Called By]<UL><LI><a href="#[7ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_group_def
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[793]"></a>lv_obj_is_layout_positioned</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_is_layout_positioned))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[794]"></a>lv_obj_mark_layout_as_dirty</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_mark_layout_as_dirty))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_obj_mark_layout_as_dirty &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
</UL>
<BR>[Called By]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[6ab]"></a>lv_obj_move_children_by</STRONG> (Thumb, 102 bytes, Stack size 32 bytes, lv_obj_pos.o(i.lv_obj_move_children_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = lv_obj_move_children_by &rArr;  lv_obj_move_children_by (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[7da]"></a>lv_obj_move_to</STRONG> (Thumb, 282 bytes, Stack size 48 bytes, lv_obj_pos.o(i.lv_obj_move_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 348<LI>Call Chain = lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[79a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[799]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[798]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_width
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
</UL>
<BR>[Called By]<UL><LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[401]"></a>lv_obj_move_to_index</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_obj_tree.o(i.lv_obj_move_to_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_move_to_index &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
</UL>
<BR>[Called By]<UL><LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to PM_Router_cpp]::lv_obj_move_foreground(_lv_obj_t*)
</UL>

<P><STRONG><a name="[7ae]"></a>lv_obj_readjust_scroll</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_readjust_scroll))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_readjust_scroll &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[733]"></a>lv_obj_refr_pos</STRONG> (Thumb, 462 bytes, Stack size 40 bytes, lv_obj_pos.o(i.lv_obj_refr_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 388<LI>Call Chain = lv_obj_refr_pos &rArr; lv_obj_move_to &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[710]"></a>lv_obj_refr_size</STRONG> (Thumb, 600 bytes, Stack size 96 bytes, lv_obj_pos.o(i.lv_obj_refr_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 396<LI>Call Chain = lv_obj_refr_size &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scrollbar_invalidate
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[7db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_width
<LI><a href="#[7dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_clamp_height
<LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[79b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[69c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_auto_size
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[774]"></a>lv_obj_refresh_ext_draw_size</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_obj_draw.o(i.lv_obj_refresh_ext_draw_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_refresh_ext_draw_size &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[776]"></a>lv_obj_refresh_self_size</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_refresh_self_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = lv_obj_refresh_self_size &rArr; lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[7ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_set_points
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[797]"></a>lv_obj_refresh_style</STRONG> (Thumb, 182 bytes, Stack size 32 bytes, lv_obj_style.o(i.lv_obj_refresh_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[706]"></a>lv_obj_remove_local_style_prop</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj_style.o(i.lv_obj_remove_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_obj_remove_local_style_prop &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fade_in_anim_ready
</UL>

<P><STRONG><a name="[305]"></a>lv_obj_remove_style</STRONG> (Thumb, 252 bytes, Stack size 40 bytes, lv_obj_style.o(i.lv_obj_remove_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_reset
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>
<BR>[Called By]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[460]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[453]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_destructor
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[52e]"></a>lv_obj_scroll_by</STRONG> (Thumb, 262 bytes, Stack size 96 bytes, lv_obj_scroll.o(i.lv_obj_scroll_by))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
</UL>
<BR>[Called By]<UL><LI><a href="#[4e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetScrollToY(_lv_obj_t*, short, lv_anim_enable_t)
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[7dd]"></a>lv_obj_scroll_to</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = lv_obj_scroll_to &rArr; lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[7bb]"></a>lv_obj_scroll_to_view_recursive</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to_view_recursive))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = lv_obj_scroll_to_view_recursive &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[7ba]"></a>lv_obj_scroll_to_x</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_scroll_to_x &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[7c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Called By]<UL><LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[532]"></a>lv_obj_scroll_to_y</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_scroll_to_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_obj_scroll_to_y &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::onFocus(_lv_group_t*)
<LI><a href="#[7dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[7ac]"></a>lv_obj_scrollbar_invalidate</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_obj_scroll.o(i.lv_obj_scrollbar_invalidate))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
</UL>

<P><STRONG><a name="[7e2]"></a>lv_obj_set_ext_click_area</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_ext_click_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_set_ext_click_area &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_constructor
</UL>

<P><STRONG><a name="[515]"></a>lv_obj_set_flex_align</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_flex.o(i.lv_obj_set_flex_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_flex_align &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_track_place
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_main_place
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_cross_place
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[514]"></a>lv_obj_set_flex_flow</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_set_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = lv_obj_set_flex_flow &rArr; lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_flow
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[10e]"></a>lv_obj_set_height</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dialplateview.o(.constdata)
</UL>
<P><STRONG><a name="[7e8]"></a>lv_obj_set_local_style_prop</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, lv_obj_style.o(i.lv_obj_set_local_style_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>
<BR>[Called By]<UL><LI><a href="#[4ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_font
<LI><a href="#[4cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_text_color
<LI><a href="#[4d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_width
<LI><a href="#[4d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_side
<LI><a href="#[4d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_post
<LI><a href="#[4d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_border_color
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_transition
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[4c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_radius
<LI><a href="#[50c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_height
<LI><a href="#[50a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_img_src
<LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[52f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_top
<LI><a href="#[530]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_pad_bottom
<LI><a href="#[52b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_align
<LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[7e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_layout
<LI><a href="#[7e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_track_place
<LI><a href="#[7e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_main_place
<LI><a href="#[7e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_flow
<LI><a href="#[7e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_flex_cross_place
</UL>

<P><STRONG><a name="[4b4]"></a>lv_obj_set_pos</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetMapTile(unsigned, unsigned)
<LI><a href="#[53d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::MapTileContUpdate(int, int, float)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
<LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
</UL>

<P><STRONG><a name="[74a]"></a>lv_obj_set_scrollbar_mode</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.lv_obj_set_scrollbar_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_obj_set_scrollbar_mode &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[348]"></a>lv_obj_set_size</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = lv_obj_set_size &rArr; lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[4b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SetMapTile(unsigned, unsigned)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::StateLoadExecute(PageBase*)
</UL>

<P><STRONG><a name="[52b]"></a>lv_obj_set_style_align</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_align &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>

<P><STRONG><a name="[406]"></a>lv_obj_set_style_bg_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_style_bg_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewWillAppear()
</UL>

<P><STRONG><a name="[50a]"></a>lv_obj_set_style_bg_img_src</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_bg_img_src))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_bg_img_src &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[556]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::SetBtnRecImgSrc(const char*)
</UL>

<P><STRONG><a name="[2e8]"></a>lv_obj_set_style_bg_opa</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_opa_scale(_lv_obj_t*, short)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 3)]::_FUN(void*, int)
</UL>

<P><STRONG><a name="[4d2]"></a>lv_obj_set_style_border_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_style_border_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4d5]"></a>lv_obj_set_style_border_post</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_border_post &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4d3]"></a>lv_obj_set_style_border_side</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_border_side &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4d4]"></a>lv_obj_set_style_border_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_border_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[7e4]"></a>lv_obj_set_style_flex_cross_place</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_obj_set_style_flex_cross_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_flex_cross_place &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[7e7]"></a>lv_obj_set_style_flex_flow</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_obj_set_style_flex_flow))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_flex_flow &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
</UL>

<P><STRONG><a name="[7e3]"></a>lv_obj_set_style_flex_main_place</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_obj_set_style_flex_main_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_flex_main_place &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[7e5]"></a>lv_obj_set_style_flex_track_place</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_obj_set_style_flex_track_place))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_flex_track_place &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[50c]"></a>lv_obj_set_style_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
</UL>

<P><STRONG><a name="[7e6]"></a>lv_obj_set_style_layout</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_layout &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[514]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_flow
<LI><a href="#[515]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_flex_align
</UL>

<P><STRONG><a name="[414]"></a>lv_obj_set_style_opa</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_ConBattSetOpa(_lv_obj_t*, int)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fade_anim_cb
</UL>

<P><STRONG><a name="[530]"></a>lv_obj_set_style_pad_bottom</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_pad_bottom &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[52f]"></a>lv_obj_set_style_pad_top</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_pad_top &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4c9]"></a>lv_obj_set_style_radius</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_radius &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[407]"></a>lv_obj_set_style_shadow_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_style_shadow_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[408]"></a>lv_obj_set_style_shadow_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_shadow_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4cb]"></a>lv_obj_set_style_text_color</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_style_text_color &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[4ca]"></a>lv_obj_set_style_text_font</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_text_font &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
<LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[40a]"></a>lv_obj_set_style_transition</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_transition &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[50b]"></a>lv_obj_set_style_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_width
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
</UL>

<P><STRONG><a name="[4c4]"></a>lv_obj_set_style_x</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>

<P><STRONG><a name="[7eb]"></a>lv_obj_set_style_y</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style_gen.o(i.lv_obj_set_style_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>

<P><STRONG><a name="[10c]"></a>lv_obj_set_width</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_width &rArr; lv_obj_set_style_width &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[50b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_width
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startupview.o(.constdata)
</UL>
<P><STRONG><a name="[5fa]"></a>lv_obj_set_x</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_x
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
</UL>
<BR>[Called By]<UL><LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int)
</UL>

<P><STRONG><a name="[cf]"></a>lv_obj_set_y</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_set_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_y
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 2)]::_FUN(void*, int)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> startupview.o(.constdata)
<LI> statusbar.o(i._ZN9StatusBar6AppearEb)
<LI> dialplateview.o(.constdata)
</UL>
<P><STRONG><a name="[7ea]"></a>lv_obj_style_get_selector_part</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_obj_style.o(i.lv_obj_style_get_selector_part))
<BR><BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[7e9]"></a>lv_obj_style_get_selector_state</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_style.o(i.lv_obj_style_get_selector_state))
<BR><BR>[Called By]<UL><LI><a href="#[795]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_state
</UL>

<P><STRONG><a name="[50d]"></a>lv_obj_update_layout</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_obj_pos.o(i.lv_obj_update_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 428<LI>Call Chain = lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[79d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_screen
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[52a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Item_Create(Page::SystemInfosView::item_t*, _lv_obj_t*, const char*, const char*, const char*)
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[756]"></a>lv_palette_main</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_color.o(i.lv_palette_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_palette_main &rArr; lv_color_black &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>

<P><STRONG><a name="[4c6]"></a>lv_slider_create</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_slider.o(i.lv_slider_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = lv_slider_create &rArr; lv_obj_class_init_obj &rArr; lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
<LI><a href="#[76b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_create_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[5bf]"></a>lv_snprintf</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, lv_printf.o(i.lv_snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = lv_snprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[4f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::MakeTimeString(unsigned long long, char*, unsigned short)
</UL>

<P><STRONG><a name="[672]"></a>lv_style_get_prop</STRONG> (Thumb, 98 bytes, Stack size 20 bytes, lv_style.o(i.lv_style_get_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_style_get_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[71b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_prop_core
<LI><a href="#[7c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_local_style_prop
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
</UL>

<P><STRONG><a name="[40b]"></a>lv_style_init</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_init))
<BR><BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
<LI><a href="#[71a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_local_style
</UL>

<P><STRONG><a name="[804]"></a>lv_style_is_empty</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
</UL>

<P><STRONG><a name="[7d4]"></a>lv_style_prop_get_default</STRONG> (Thumb, 236 bytes, Stack size 16 bytes, lv_style.o(i.lv_style_prop_get_default))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = lv_style_prop_get_default &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[7f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[763]"></a>lv_style_register_prop</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_style.o(i.lv_style_register_prop))
<BR><BR>[Called By]<UL><LI><a href="#[760]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_flex_init
<LI><a href="#[761]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_grid_init
</UL>

<P><STRONG><a name="[7df]"></a>lv_style_remove_prop</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lv_style.o(i.lv_style_remove_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
</UL>
<BR>[Called By]<UL><LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_ready_cb
<LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
</UL>

<P><STRONG><a name="[4cf]"></a>lv_style_reset</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_style.o(i.lv_style_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_style_reset &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[4ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Delete()
<LI><a href="#[52c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Reset()
</UL>

<P><STRONG><a name="[4b7]"></a>lv_style_set_bg_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_bg_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_style_set_bg_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[4b8]"></a>lv_style_set_bg_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_bg_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[528]"></a>lv_style_set_border_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_border_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_style_set_border_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[526]"></a>lv_style_set_border_side</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_border_side))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_border_side &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[527]"></a>lv_style_set_border_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_border_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[4bc]"></a>lv_style_set_line_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_line_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_style_set_line_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[4be]"></a>lv_style_set_line_opa</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_line_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_line_opa &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[4bf]"></a>lv_style_set_line_rounded</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_line_rounded))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_line_rounded &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[4bd]"></a>lv_style_set_line_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_line_width))
<BR><BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[66f]"></a>lv_style_set_prop</STRONG> (Thumb, 214 bytes, Stack size 24 bytes, lv_style.o(i.lv_style_set_prop))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[4ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_width
<LI><a href="#[4bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_shadow_color
<LI><a href="#[4b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_radius
<LI><a href="#[4bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_rounded
<LI><a href="#[4be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_opa
<LI><a href="#[4bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_line_color
<LI><a href="#[4b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_opa
<LI><a href="#[4b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_bg_color
<LI><a href="#[525]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_width
<LI><a href="#[529]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_transition
<LI><a href="#[527]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_width
<LI><a href="#[526]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_side
<LI><a href="#[528]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_border_color
<LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[4b9]"></a>lv_style_set_radius</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_radius &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[4bb]"></a>lv_style_set_shadow_color</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_shadow_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_style_set_shadow_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[4ba]"></a>lv_style_set_shadow_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_shadow_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[40c]"></a>lv_style_set_text_color</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lv_style_gen.o(i.lv_style_set_text_color))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = lv_style_set_text_color &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[40d]"></a>lv_style_set_text_font</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_text_font &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[529]"></a>lv_style_set_transition</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_transition))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_transition &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[525]"></a>lv_style_set_width</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_style_gen.o(i.lv_style_set_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = lv_style_set_width &rArr; lv_style_set_prop &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[409]"></a>lv_style_transition_dsc_init</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, lv_style.o(i.lv_style_transition_dsc_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = lv_style_transition_dsc_init
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[7a9]"></a>lv_theme_apply</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lv_theme.o(i.lv_theme_apply))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_theme_apply &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[7f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_get_from_obj
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[7f7]"></a>lv_theme_get_from_obj</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_theme.o(i.lv_theme_get_from_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_theme_get_from_obj &rArr; lv_obj_get_disp &rArr; lv_obj_get_screen
</UL>
<BR>[Calls]<UL><LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[74c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
</UL>

<P><STRONG><a name="[54c]"></a>lv_tick_elaps</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_hal_tick.o(i.lv_tick_elaps))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::GetTickElaps(unsigned)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::Update()
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
</UL>

<P><STRONG><a name="[4f4]"></a>lv_tick_get</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_hal_tick.o(i.lv_tick_get))
<BR><BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::GetTick()
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onEvent(_lv_event_t*)
<LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::Update()
<LI><a href="#[538]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::UpdateDelay(unsigned)
<LI><a href="#[4de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::Update()
<LI><a href="#[519]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::TemplateModel::GetData()
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
</UL>

<P><STRONG><a name="[418]"></a>lv_timer_create</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, lv_timer.o(i.lv_timer_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_timer_create &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetTimerPeriod(unsigned)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewLoad()
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewDidAppear()
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewDidAppear()
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillAppear()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewWillAppear()
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_drv_register
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[4e4]"></a>lv_timer_del</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_timer.o(i.lv_timer_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::SetTimerPeriod(unsigned)
<LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewWillDisappear()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::onViewWillDisappear()
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewDidDisappear()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Template::onViewDidDisappear()
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
</UL>

<P><STRONG><a name="[7fa]"></a>lv_timer_handler</STRONG> (Thumb, 222 bytes, Stack size 24 bytes, lv_timer.o(i.lv_timer_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = lv_timer_handler &rArr; lv_timer_exec &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
</UL>
<BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[638]"></a>lv_timer_pause</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_timer.o(i.lv_timer_pause))
<BR><BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[419]"></a>lv_timer_ready</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_timer.o(i.lv_timer_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_timer_ready
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfos::onViewWillAppear()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
</UL>

<P><STRONG><a name="[665]"></a>lv_timer_resume</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_timer.o(i.lv_timer_resume))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>

<P><STRONG><a name="[54f]"></a>lv_timer_set_repeat_count</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_timer.o(i.lv_timer_set_repeat_count))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Startup::onViewLoad()
<LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_async_call
</UL>

<P><STRONG><a name="[7fb]"></a>lv_tlsf_add_pool</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_add_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[7fc]"></a>lv_tlsf_create</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_tlsf_create
</UL>
<BR>[Called By]<UL><LI><a href="#[78f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create_with_pool
</UL>

<P><STRONG><a name="[78f]"></a>lv_tlsf_create_with_pool</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_create_with_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_tlsf_create_with_pool &rArr; lv_tlsf_add_pool &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[7fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_create
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
</UL>
<BR>[Called By]<UL><LI><a href="#[77a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_init
</UL>

<P><STRONG><a name="[78e]"></a>lv_tlsf_free</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[790]"></a>lv_tlsf_get_pool</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_tlsf.o(i.lv_tlsf_get_pool))
<BR><BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[78c]"></a>lv_tlsf_malloc</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_malloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
</UL>

<P><STRONG><a name="[792]"></a>lv_tlsf_realloc</STRONG> (Thumb, 218 bytes, Stack size 40 bytes, lv_tlsf.o(i.lv_tlsf_realloc))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = lv_tlsf_realloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_can_split
<LI><a href="#[7fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>

<P><STRONG><a name="[791]"></a>lv_tlsf_walk_pool</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lv_tlsf.o(i.lv_tlsf_walk_pool))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_tlsf_walk_pool
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[78d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_monitor
</UL>

<P><STRONG><a name="[643]"></a>lv_trigo_sin</STRONG> (Thumb, 78 bytes, Stack size 0 bytes, lv_math.o(i.lv_trigo_sin))
<BR><BR>[Called By]<UL><LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
</UL>

<P><STRONG><a name="[6c4]"></a>lv_txt_get_size</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, lv_txt.o(i.lv_txt_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_txt_get_size &rArr; _lv_txt_get_next_line &rArr; lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[750]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_width
<LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>
<BR>[Called By]<UL><LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[750]"></a>lv_txt_get_width</STRONG> (Thumb, 120 bytes, Stack size 48 bytes, lv_txt.o(i.lv_txt_get_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = lv_txt_get_width &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[752]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_encoded_letter_next_2
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
</UL>

<P><STRONG><a name="[677]"></a>lv_vsnprintf</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_printf.o(i.lv_vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[676]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_set_text_vfmt
</UL>

<P><STRONG><a name="[1ba]"></a>main</STRONG> (Thumb, 56 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1036 + Unknown Stack Size
<LI>Call Chain = main &rArr; App_Init() &rArr; PageManager::Push(const char*, const PageBase::Stash_t*) &rArr; PageManager::FindPageInStack(const char*) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[49e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Init()
<LI><a href="#[7ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_SetEventCallback(void(*)())
<LI><a href="#[46f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Memory_DumpInfo()
<LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Update()
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_Init()
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_port_init()
<LI><a href="#[7fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_PriorityGroupConfig
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_JTAG_Disable
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[48b]"></a>map</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, arduino.o(i.map))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = map
</UL>
<BR>[Called By]<UL><LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_GetInfo(HAL::Power_Info_t*)
</UL>

<P><STRONG><a name="[2de]"></a>millis</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, delay.o(i.millis))
<BR><BR>[Called By]<UL><LI><a href="#[46c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::HAL_Update()
<LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Update()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_Update()
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime(unsigned long)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;now()
<LI><a href="#[499]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_HandleTimeUpdate()
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::EventMonitor(bool)
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Buzz_Handler(int)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone(unsigned char, unsigned, unsigned)
<LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::GetTickElaps(unsigned)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::commit()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSInteger::commit()
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDecimal::commit()
<LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSCustom::commit()
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSTime::commit()
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSDate::commit()
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;curTimeMS()
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tone_TimerHandler()
</UL>

<P><STRONG><a name="[272]"></a>pinMode</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, arduino.o(i.pinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + In Cycle
<LI>Call Chain = pinMode &rArr;  pinMode (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIOx_Init
<LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Register
</UL>
<BR>[Called By]<UL><LI><a href="#[49f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_init()
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
<LI><a href="#[484]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_Init()
<LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
<LI><a href="#[56b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdSpiCard::begin(SdSpiLibDriver*, unsigned char, SPISettings)
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::begin(unsigned char)
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::begin()
<LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pinMode
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PWM_Init
<LI><a href="#[491]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_ForceLit(bool)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPIClass::begin()
</UL>

<P><STRONG><a name="[67b]"></a>pwmWrite</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, pwm.o(i.pwmWrite))
<BR><BR>[Called By]<UL><LI><a href="#[494]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;analogWrite
</UL>

<P><STRONG><a name="[493]"></a>timer_get_compare</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, pwm.o(i.timer_get_compare))
<BR><BR>[Called By]<UL><LI><a href="#[492]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_GetValue()
</UL>

<P><STRONG><a name="[1bd]"></a>vApplicationHardFaultHook</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, hal_faulthandle.o(i.vApplicationHardFaultHook))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = vApplicationHardFaultHook &rArr; HAL::Display_DumpCrashInfo(const char*) &rArr; Print::printf(const char*, ...) &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[495]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_DumpCrashInfo(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[7a]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[1b1]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
</UL>

<P><STRONG><a name="[806]"></a>ArduinoJson6184_11::FloatParts&lang;float&rang;::normalize(float&)</STRONG> (Thumb, 152 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1110FloatPartsIfE9normalizeERf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6184_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::FloatParts&lang;float&rang;::FloatParts(float)
</UL>

<P><STRONG><a name="[805]"></a>ArduinoJson6184_11::FloatParts&lang;float&rang;::FloatParts(float)</STRONG> (Thumb, 192 bytes, Stack size 32 bytes, storageservice.o(t._ZN18ArduinoJson6184_1110FloatPartsIfEC1Ef))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson6184_11::FloatParts&lang;float&rang;::FloatParts(float) &rArr; ArduinoJson6184_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>
<BR>[Calls]<UL><LI><a href="#[806]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::FloatParts&lang;float&rang;::normalize(float&)
</UL>
<BR>[Called By]<UL><LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[8ef]"></a>ArduinoJson6184_11::FloatParts&lang;float&rang;::FloatParts__sub_object(float)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, storageservice.o(t._ZN18ArduinoJson6184_1110FloatPartsIfEC1Ef), UNUSED)

<P><STRONG><a name="[3a7]"></a>ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3)</STRONG> (Thumb, 130 bytes, Stack size 344 bytes, storageservice.o(t._ZN18ArduinoJson6184_1111deserializeINS_16JsonDeserializerE11FileWrapperNS_14AllowAllFilterEEENS_20DeserializationErrorERNS_12JsonDocumentERT0_NS_12NestingLimitET1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 512<LI>Call Chain = ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::DeserializationError::operator void(ArduinoJson6184_11::DeserializationError::*)() const() const
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
</UL>

<P><STRONG><a name="[808]"></a>void ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeFloat&lang;float&rang;(T1)</STRONG> (Thumb, 268 bytes, Stack size 64 bytes, storageservice.o(t._ZN18ArduinoJson6184_1113TextFormatterINS_6WriterI11FileWrappervEEE10writeFloatIfEEvT_))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = void ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeFloat&lang;float&rang;(T1) &rArr; ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(char)
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*, const char*)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*)
<LI><a href="#[805]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::FloatParts&lang;float&rang;::FloatParts(float)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[80c]"></a>ArduinoJson6184_11::enable_if&lang;ArduinoJson6184_11::is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)</STRONG> (Thumb, 46 bytes, Stack size 40 bytes, storageservice.o(t._ZN18ArduinoJson6184_1113TextFormatterINS_6WriterI11FileWrappervEEE12writeIntegerImEENS_9enable_ifIXsr18ArduinoJson6184_1111is_unsignedIT_EE5valueEvE4typeET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ArduinoJson6184_11::enable_if&lang;ArduinoJson6184_11::is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1) &rArr; ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[809]"></a>ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1113TextFormatterINS_6WriterI11FileWrappervEEE8writeRawEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned)
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitNull()
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const char*)
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[80b]"></a>ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*, const char*)</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, storageservice.o(t._ZN18ArduinoJson6184_1113TextFormatterINS_6WriterI11FileWrappervEEE8writeRawEPKcS6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*, const char*) &rArr; ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::enable_if&lang;ArduinoJson6184_11::is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[80a]"></a>ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(char)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1113TextFormatterINS_6WriterI11FileWrappervEEE8writeRawEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(char) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrapper::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitString(const char*)
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
</UL>

<P><STRONG><a name="[3b0]"></a>ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getOrAddMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6184_11::MemoryPool*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1114CollectionData14getOrAddMemberINS_13StringAdapterIPKcLb0EvEEEEPNS_11VariantDataET_PNS_10MemoryPoolE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getOrAddMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6184_11::MemoryPool*) &rArr; ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::CollectionData::addSlot(ArduinoJson6184_11::MemoryPool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
</UL>

<P><STRONG><a name="[810]"></a>ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitString(const char*)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, storageservice.o(t._ZN18ArduinoJson6184_1114JsonSerializerINS_6WriterI11FileWrappervEEE11visitStringEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitString(const char*) &rArr; ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(char) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(char)
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::EscapeSequence::escapeTable(bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)
</UL>

<P><STRONG><a name="[812]"></a>ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const char*)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, storageservice.o(t._ZN18ArduinoJson6184_1114JsonSerializerINS_6WriterI11FileWrappervEEE5writeEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const char*) &rArr; ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::indent()
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)
</UL>

<P><STRONG><a name="[813]"></a>ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitNull()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, storageservice.o(t._ZN18ArduinoJson6184_1114JsonSerializerINS_6WriterI11FileWrappervEEE9visitNullEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitNull() &rArr; ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[814]"></a>bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)</STRONG> (Thumb, 126 bytes, Stack size 32 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE10parseArrayINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + In Cycle
<LI>Call Chain = bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::eat(char)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::skipSpacesAndComments()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::NestingLimit::decrement() const
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::CollectionData::addSlot(ArduinoJson6184_11::MemoryPool*)
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[818]"></a>bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)</STRONG> (Thumb, 204 bytes, Stack size 32 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE11parseObjectINS_14AllowAllFilterEEEbRNS_14CollectionDataET_NS_12NestingLimitE))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + In Cycle
<LI>Call Chain = bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey()
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::eat(char)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::skipSpacesAndComments()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[817]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::NestingLimit::decrement() const
<LI><a href="#[80f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::CollectionData::addSlot(ArduinoJson6184_11::MemoryPool*)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringCopier::save()
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[807]"></a>bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE12parseVariantINS_14AllowAllFilterEEEbRNS_11VariantDataET_NS_12NestingLimitE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::skipSpacesAndComments()
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString()
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseNumericValue(ArduinoJson6184_11::VariantData&)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringCopier::save()
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringCopier::startString()
<LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::toObject()
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3)
</UL>

<P><STRONG><a name="[81c]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseNumericValue(ArduinoJson6184_11::VariantData&)</STRONG> (Thumb, 142 bytes, Stack size 24 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE17parseNumericValueERNS_11VariantDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseNumericValue(ArduinoJson6184_11::VariantData&) &rArr; ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current() &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::canBeInNonQuotedString(char)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&)
<LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData::setType(unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[81e]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString()</STRONG> (Thumb, 364 bytes, Stack size 48 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE17parseQuotedStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString() &rArr; ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current() &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()
<LI><a href="#[811]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::EscapeSequence::escapeTable(bool)
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringCopier::append(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey()
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[815]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::skipSpacesAndComments()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE21skipSpacesAndCommentsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::skipSpacesAndComments() &rArr; ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current() &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()
</UL>
<BR>[Called By]<UL><LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[81f]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::canBeInNonQuotedString(char)</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE22canBeInNonQuotedStringEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::canBeInNonQuotedString(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[821]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::isBetween(char, char, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey()
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseNumericValue(ArduinoJson6184_11::VariantData&)
</UL>

<P><STRONG><a name="[816]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::eat(char)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE3eatEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::eat(char) &rArr; ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current() &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
<LI><a href="#[814]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseArray&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[81b]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE7currentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current() &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
</UL>
<BR>[Called By]<UL><LI><a href="#[819]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey()
<LI><a href="#[816]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::eat(char)
<LI><a href="#[815]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::skipSpacesAndComments()
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString()
<LI><a href="#[81c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseNumericValue(ArduinoJson6184_11::VariantData&)
<LI><a href="#[807]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[819]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey()</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE8parseKeyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseKey() &rArr; ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString() &rArr; ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current() &rArr; lv_fs_read
</UL>
<BR>[Calls]<UL><LI><a href="#[81b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::current()
<LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::canBeInNonQuotedString(char)
<LI><a href="#[81e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseQuotedString()
<LI><a href="#[820]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringCopier::append(char)
<LI><a href="#[81d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringCopier::startString()
</UL>
<BR>[Called By]<UL><LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[821]"></a>ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::isBetween(char, char, char)</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, storageservice.o(t._ZN18ArduinoJson6184_1116JsonDeserializerINS_6ReaderI11FileWrappervEENS_12StringCopierEE9isBetweenEccc))
<BR><BR>[Called By]<UL><LI><a href="#[81f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::canBeInNonQuotedString(char)
</UL>

<P><STRONG><a name="[80d]"></a>ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, storageservice.o(t._ZN18ArduinoJson6184_1117CountingDecoratorINS_6WriterI11FileWrappervEEE5writeEPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FileWrapper::write(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[80b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*, const char*)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*)
</UL>

<P><STRONG><a name="[3a6]"></a>ArduinoJson6184_11::StaticJsonDocument&lang;(unsigned)2048&rang;::StaticJsonDocument()</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, storageservice.o(t._ZN18ArduinoJson6184_1118StaticJsonDocumentILj2048EEC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
</UL>

<P><STRONG><a name="[8f0]"></a>ArduinoJson6184_11::StaticJsonDocument&lang;(unsigned)2048&rang;::StaticJsonDocument__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, storageservice.o(t._ZN18ArduinoJson6184_1118StaticJsonDocumentILj2048EEC1Ev), UNUSED)

<P><STRONG><a name="[822]"></a>ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1120PrettyJsonSerializerINS_6WriterI11FileWrappervEEE11visitObjectERKNS_14CollectionDataE))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + In Cycle
<LI>Call Chain = ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&) &rArr;  T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::indent()
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const char*)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitString(const char*)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantSlot::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
</UL>

<P><STRONG><a name="[823]"></a>ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::indent()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_1120PrettyJsonSerializerINS_6WriterI11FileWrappervEEE6indentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::indent() &rArr; ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const char*) &rArr; ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*) &rArr; ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned) &rArr; FileWrapper::write(const unsigned char*, unsigned) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)
</UL>

<P><STRONG><a name="[3ad]"></a>ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, storageservice.o(t._ZN18ArduinoJson6184_119ConverterIdvE8fromJsonENS_15VariantConstRefE))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) &rArr; T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const &rArr;  ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const
</UL>

<P><STRONG><a name="[3ac]"></a>ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, storageservice.o(t._ZN18ArduinoJson6184_119ConverterIfvE8fromJsonENS_15VariantConstRefE))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) &rArr;  ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;float, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
</UL>

<P><STRONG><a name="[3ab]"></a>ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, storageservice.o(t._ZN18ArduinoJson6184_119ConverterIivE8fromJsonENS_15VariantConstRefE))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) &rArr; T1 ArduinoJson6184_11::VariantData::asIntegral&lang;int&rang;() const &rArr;  ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asIntegral&lang;int&rang;() const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[826]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asIntegral&lang;int&rang;() const
</UL>

<P><STRONG><a name="[831]"></a>__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, char.o(t._ZN4__rw12__string_refIcSt11char_traitsIcESaIcEE10_C_inc_refEv))
<BR><BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>

<P><STRONG><a name="[10b]"></a>__rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, rwstdexcept.o(t._ZN4__rw16__rw_facet_makerISt5ctypeIcEE13_C_maker_funcEiPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __rw::__rw_facet_maker&lang;std::ctype&lang;char&rang;&rang;::_C_maker_func(int, const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned) &rArr; std::ctype_byname&lang;char&rang;::_C_get_mask_table(const char*) &rArr; __rw::__rw_use_c_lib_locale::~__rw_use_c_lib_locale() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[5ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::ctype(const std::ctype_base::mask*, bool, unsigned)
<LI><a href="#[5ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype_byname&lang;char&rang;::ctype_byname(const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs)
</UL>
<P><STRONG><a name="[833]"></a>unsigned __rw::__rw_new_capacity&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;(unsigned, const T1*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pm_base.o(t._ZN4__rw17__rw_new_capacityISt5dequeIP8PageBaseSaIS3_EEEEjjPKT_))
<BR><BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2)
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>

<P><STRONG><a name="[83e]"></a>unsigned __rw::__rw_new_capacity&lang;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&rang;(unsigned, const T1*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZN4__rw17__rw_new_capacityISt6vectorI10lv_point_tSaIS2_EEEEjjPKT_))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)
</UL>

<P><STRONG><a name="[5e8]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &)</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEE6resizeEjRKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::resize(unsigned, __rw::__rw_facet_base*const &) &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[5ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_install_facet(__rw::__rw_facet_base*, const std::locale::id&) const
</UL>

<P><STRONG><a name="[563]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[8f1]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_facet_base*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorIPNS_15__rw_facet_baseEED1Ev), UNUSED)

<P><STRONG><a name="[d3]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector() &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(i.__sti___10_rwcats_cpp_64e8068e)
</UL>
<P><STRONG><a name="[8f2]"></a>__rw::__rw_locale_vector&lang;__rw::__rw_cat*&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rwcats.o(t._ZN4__rw18__rw_locale_vectorIPNS_8__rw_catEED1Ev), UNUSED)

<P><STRONG><a name="[564]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[562]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::~__rw_locale_imp()
</UL>

<P><STRONG><a name="[8f3]"></a>__rw::__rw_locale_vector&lang;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev), UNUSED)

<P><STRONG><a name="[5e2]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned)</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataE6resizeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[560]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_new_cookie
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[5f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::operator =(const std::__rw_open_cat_data&)
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::~__rw_open_cat_data()
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_open_cat_data::__rw_open_cat_data()
</UL>
<BR>[Called By]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>

<P><STRONG><a name="[d1]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector() &rArr; __aeabi_vec_delete &rArr; operator delete[] (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Address Reference Count : 1]<UL><LI> messages.o(i._ZSt13__rw_get_catsv)
</UL>
<P><STRONG><a name="[8f4]"></a>__rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::~__rw_locale_vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, messages.o(t._ZN4__rw18__rw_locale_vectorISt18__rw_open_cat_dataED1Ev), UNUSED)

<P><STRONG><a name="[163]"></a>Filter::Hysteresis&lang;short&rang;::GetNext(short)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, dp_power.o(t._ZN6Filter10HysteresisIsE7GetNextEs))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_power.o(.constdata__ZTVN6Filter10HysteresisIsEE)
</UL>
<P><STRONG><a name="[164]"></a>Filter::MedianQueue&lang;short, (unsigned)10&rang;::GetNext(short)</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, dp_power.o(t._ZN6Filter11MedianQueueIsLj10EE7GetNextEs))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = Filter::MedianQueue&lang;short, (unsigned)10&rang;::GetNext(short) &rArr; void std::sort&lang;short*&rang;(T1, T1) &rArr; void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) &rArr;  void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::sort&lang;short*&rang;(T1, T1)
<LI><a href="#[827]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Median&lang;short, (unsigned)10&rang;::FillBuffer(short)
</UL>
<BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_power.o(.constdata__ZTVN6Filter11MedianQueueIsLj10EEE)
</UL>
<P><STRONG><a name="[827]"></a>Filter::Median&lang;short, (unsigned)10&rang;::FillBuffer(short)</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, dp_power.o(t._ZN6Filter6MedianIsLj10EE10FillBufferEs))
<BR><BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::MedianQueue&lang;short, (unsigned)10&rang;::GetNext(short)
</UL>

<P><STRONG><a name="[826]"></a>T1 ArduinoJson6184_11::VariantData::asIntegral&lang;int&rang;() const</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, storageservice.o(t._ZNK18ArduinoJson6184_1111VariantData10asIntegralIiEET_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + In Cycle
<LI>Call Chain = T1 ArduinoJson6184_11::VariantData::asIntegral&lang;int&rang;() const &rArr;  ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;int, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
</UL>

<P><STRONG><a name="[3b4]"></a>T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const</STRONG> (Thumb, 270 bytes, Stack size 16 bytes, storageservice.o(t._ZNK18ArduinoJson6184_1111VariantData6acceptINS_20PrettyJsonSerializerINS_6WriterI11FileWrappervEEEEEENT_11result_typeERS7_))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const &rArr;  T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[823]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::indent()
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)
<LI><a href="#[80d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::CountingDecorator&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const unsigned char*, unsigned)
<LI><a href="#[813]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitNull()
<LI><a href="#[812]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::write(const char*)
<LI><a href="#[810]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::JsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitString(const char*)
<LI><a href="#[80a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(char)
<LI><a href="#[809]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeRaw(const char*)
<LI><a href="#[80c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::enable_if&lang;ArduinoJson6184_11::is_unsigned&lang;T1&rang;::value, void&rang;::type ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeInteger&lang;unsigned long&rang;(T1)
<LI><a href="#[808]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void ArduinoJson6184_11::TextFormatter&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::writeFloat&lang;float&rang;(T1)
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantSlot::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1::result_type ArduinoJson6184_11::VariantData::accept&lang;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;&rang;(T1&) const
<LI><a href="#[822]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::PrettyJsonSerializer&lang;ArduinoJson6184_11::Writer&lang;FileWrapper, void&rang;&rang;::visitObject(const ArduinoJson6184_11::CollectionData&)
</UL>

<P><STRONG><a name="[825]"></a>T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, storageservice.o(t._ZNK18ArduinoJson6184_1111VariantData7asFloatIdEET_v))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + In Cycle
<LI>Call Chain = T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const &rArr;  ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::parseNumber(const char*, ArduinoJson6184_11::VariantData&)
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::Converter&lang;double, void&rang;::fromJson(ArduinoJson6184_11::VariantConstRef)
</UL>

<P><STRONG><a name="[3aa]"></a>ArduinoJson6184_11::VariantData* ArduinoJson6184_11::VariantData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, storageservice.o(t._ZNK18ArduinoJson6184_1111VariantData9getMemberINS_13StringAdapterIPKcLb0EvEEEEPS0_T_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ArduinoJson6184_11::VariantData* ArduinoJson6184_11::VariantData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const &rArr; ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const &rArr; ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
</UL>
<BR>[Calls]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
</UL>

<P><STRONG><a name="[80e]"></a>ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, storageservice.o(t._ZNK18ArduinoJson6184_1114CollectionData7getSlotINS_13StringAdapterIPKcLb0EvEEEEPNS_11VariantSlotET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
</UL>
<BR>[Calls]<UL><LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;::compare(const char*) const
<LI><a href="#[824]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantSlot::next()
</UL>
<BR>[Called By]<UL><LI><a href="#[81a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getOrAddMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1, ArduinoJson6184_11::MemoryPool*)
</UL>

<P><STRONG><a name="[81a]"></a>ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, storageservice.o(t._ZNK18ArduinoJson6184_1114CollectionData9getMemberINS_13StringAdapterIPKcLb0EvEEEEPNS_11VariantDataET_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ArduinoJson6184_11::VariantData* ArduinoJson6184_11::CollectionData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const &rArr; ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
</UL>
<BR>[Calls]<UL><LI><a href="#[80e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantSlot* ArduinoJson6184_11::CollectionData::getSlot&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ArduinoJson6184_11::VariantData* ArduinoJson6184_11::VariantData::getMember&lang;ArduinoJson6184_11::StringAdapter&lang;const char*, (bool)0, void&rang;&rang;(T1) const
<LI><a href="#[818]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit)
</UL>

<P><STRONG><a name="[84f]"></a>__rw::__rw_lt&lang;short&rang;::operator ()(const short&, const short&) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, dp_power.o(t._ZNK4__rw7__rw_ltIsEclERKsS3_))
<BR><BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)
</UL>

<P><STRONG><a name="[83a]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_make_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;&) const</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, pm_base.o(t._ZNKSt5dequeIP8PageBaseSaIS1_EE12_C_make_iterERKSt15__rw_deque_iterIS1_iPKS1_RS5_S2_E))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_make_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)
</UL>

<P><STRONG><a name="[836]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::empty() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pm_base.o(t._ZNKSt5dequeIP8PageBaseSaIS1_EE5emptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque()
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()
</UL>

<P><STRONG><a name="[328]"></a>std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::empty() const</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pm_base.o(t._ZNKSt5stackIP8PageBaseSt5dequeIS1_SaIS1_EEE5emptyEv))
<BR><BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInStack(const char*)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTop()
</UL>

<P><STRONG><a name="[374]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZNKSt6vectorI10lv_point_tSaIS0_EE4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::stop()
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append_to_end(const lv_point_t*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_end_point(lv_point_t*)
<LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::refresh_line()
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_points(lv_poly_line::single_line_t*)
</UL>

<P><STRONG><a name="[83d]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::capacity() const</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZNKSt6vectorI10lv_point_tSaIS0_EE8capacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)
</UL>

<P><STRONG><a name="[376]"></a>std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZNKSt6vectorIN12lv_poly_line13single_line_tESaIS1_EE4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append(const lv_point_t*)
<LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::start()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::reset()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::stop()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::refresh_line()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::get_end_line()
</UL>

<P><STRONG><a name="[399]"></a>std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::size() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pointcontainer.o(t._ZNKSt6vectorIN14PointContainer11DiffPoint_tESaIS1_EE4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PushPoint(const PointContainer::FullPoint_t*)
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PopPoint(PointContainer::FullPoint_t*)
<LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&)
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PopFullPoint(PointContainer::FullPoint_t*)
</UL>

<P><STRONG><a name="[171]"></a>std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE6do_getEiiiRKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const &rArr; std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[5e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_make_facet(const std::locale::id&, bool, int, __rw::__rw_facet_base*(*)(int, const char*, unsigned)) const
<LI><a href="#[5e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_message(int, int, int) const
<LI><a href="#[5e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_get_locale(int) const
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[170]"></a>std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rwstdexcept.o(t._ZNKSt8messagesIcE7do_openERKSsRKSt6locale))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = std::messages&lang;char&rang;::do_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const &rArr; __rw::__rw_locale_vector&lang;std::__rw_open_cat_data&rang;::resize(unsigned) &rArr; std::__rw_open_cat_data::__rw_open_cat_data() &rArr; std::locale::classic() &rArr; std::locale::locale(__rw::__rw_locale_imp*) &rArr; std::locale::_C_init() &rArr; __rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned) &rArr; __aeabi_vec_new_cookie &rArr; __cxa_vec_new &rArr; __ARM_array_new_general &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[5e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::_C_cat_open(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&, const std::locale&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwstdexcept.o(.constdata__ZTVSt8messagesIcE)
</UL>
<P><STRONG><a name="[829]"></a>std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZNSaI10lv_point_tE10deallocateEPS_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned) &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector()
<LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)
</UL>

<P><STRONG><a name="[388]"></a>std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_poly_line.o(t._ZNSaIN12lv_poly_line13single_line_tEE9constructEPS0_RKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 732 + Unknown Stack Size
<LI>Call Chain = std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
</UL>

<P><STRONG><a name="[3c3]"></a>std::allocator&lang;ResourceManager::ResourceNode&rang;::construct(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, resourcemanager.o(t._ZNSaIN15ResourceManager12ResourceNodeEE9constructEPS0_RKS0_))
<BR><BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::AddResource(const char*, void*)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;ResourceManager::ResourceNode*, ResourceManager::ResourceNode*, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
</UL>

<P><STRONG><a name="[359]"></a>std::allocator&lang;PageBase*&rang;::deallocate(PageBase**, unsigned)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pm_base.o(t._ZNSaIP8PageBaseE10deallocateEPS0_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = std::allocator&lang;PageBase*&rang;::deallocate(PageBase**, unsigned) &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::~PageManager()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &)
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()
</UL>

<P><STRONG><a name="[82a]"></a>std::allocator&lang;PageBase**&rang;::allocate(unsigned, const void*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pm_base.o(t._ZNSaIPP8PageBaseE8allocateEjPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = std::allocator&lang;PageBase**&rang;::allocate(unsigned, const void*) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
</UL>

<P><STRONG><a name="[82b]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, locale.o(t._ZNSs11_C_allocateEjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
</UL>

<P><STRONG><a name="[82e]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, locale.o(t._ZNSs7replaceEjjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
</UL>

<P><STRONG><a name="[82f]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, char.o(t._ZNSs7replaceEjjPKcjjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
<LI><a href="#[577]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[82d]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, char.o(t._ZNSs9_C_getRepEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + In Cycle
<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[55b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_throw(int, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[830]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, char.o(t._ZNSs9_C_unlinkEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[561]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
<LI><a href="#[5f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[459]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[5eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::name() const
</UL>

<P><STRONG><a name="[8f5]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const char*, const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, locale.o(t._ZNSsC1EPKcRKSaIcE), UNUSED)

<P><STRONG><a name="[246]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func5&rang;
</UL>

<P><STRONG><a name="[8f6]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::allocator&lang;char&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, locale.o(t._ZNSsC1ERKSaIcE), UNUSED)

<P><STRONG><a name="[45a]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned) &rArr;  __rw::__rw_allocate(unsigned, int) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_getRep(unsigned, unsigned)
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
<LI><a href="#[5ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::char_traits&lang;char&rang;::copy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[8f7]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string__sub_object(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, char.o(t._ZNSsC1ERKSs), UNUSED)

<P><STRONG><a name="[cc]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string() &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::messages&lang;char&rang;::do_get(int, int, int, const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) const
<LI><a href="#[5f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_messages_base::~__rw_messages_base()
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
<LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::ctype&lang;char&rang;::_C_initfacet(const std::locale&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
<LI> locale.o(t._ZN4__rw18__rw_locale_vectorISsED1Ev)
</UL>
<P><STRONG><a name="[8f8]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, char.o(t._ZNSsD1Ev), UNUSED)

<P><STRONG><a name="[5f7]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const char*) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
</UL>
<BR>[Called By]<UL><LI><a href="#[5f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::_C_init()
</UL>

<P><STRONG><a name="[561]"></a>std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, locale.o(t._ZNSsaSERKSs))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::operator =(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned) &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned) &rArr;  __rw::__rw_throw(int, ...) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[82e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned)
<LI><a href="#[830]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_unlink()
<LI><a href="#[831]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__string_ref&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_inc_ref()
</UL>
<BR>[Called By]<UL><LI><a href="#[55f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_locale_imp::__rw_locale_imp(const char*, unsigned, unsigned)
</UL>

<P><STRONG><a name="[839]"></a>std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pm_base.o(t._ZNSt15__rw_deque_iterIP8PageBaseiPKS1_RS2_SaIS1_EEC1ERKS_IS1_iPS1_RS1_S5_E))
<BR><BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)
</UL>

<P><STRONG><a name="[8f9]"></a>std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter__sub_object(const std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pm_base.o(t._ZNSt15__rw_deque_iterIP8PageBaseiPKS1_RS2_SaIS1_EEC1ERKS_IS1_iPS1_RS1_S5_E), UNUSED)

<P><STRONG><a name="[832]"></a>std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pm_base.o(t._ZNSt15__rw_deque_iterIP8PageBaseiPS1_RS1_SaIS1_EE10_C_bufsizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;(unsigned, const T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::back()
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***)
</UL>

<P><STRONG><a name="[838]"></a>std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;&)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, pm_base.o(t._ZNSt15__rw_deque_iterIP8PageBaseiPS1_RS1_SaIS1_EEC1ERKS5_))
<BR><BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::back()
</UL>

<P><STRONG><a name="[8fa]"></a>std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter__sub_object(const std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, pm_base.o(t._ZNSt15__rw_deque_iterIP8PageBaseiPS1_RS1_SaIS1_EEC1ERKS5_), UNUSED)

<P><STRONG><a name="[834]"></a>std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, pm_base.o(t._ZNSt15__rw_deque_iterIP8PageBaseiPS1_RS1_SaIS1_EEC1ES2_PS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***) &rArr; std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Calls]<UL><LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_init()
<LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()
</UL>

<P><STRONG><a name="[8fb]"></a>std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter__sub_object(PageBase**, PageBase***)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, pm_base.o(t._ZNSt15__rw_deque_iterIP8PageBaseiPS1_RS1_SaIS1_EEC1ES2_PS2_), UNUSED)

<P><STRONG><a name="[835]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EE10_C_bufsizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Calls]<UL><LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;(unsigned, const T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()
</UL>

<P><STRONG><a name="[352]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()</STRONG> (Thumb, 108 bytes, Stack size 32 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EE14_C_free_at_endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;PageBase*&rang;::deallocate(PageBase**, unsigned)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Pop()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::pop()
</UL>

<P><STRONG><a name="[354]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()</STRONG> (Thumb, 286 bytes, Stack size 56 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EE15_C_alloc_at_endEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***)
<LI><a href="#[82a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;PageBase**&rang;::allocate(unsigned, const void*)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Push(const char*, const PageBase::Stash_t*)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &)
</UL>

<P><STRONG><a name="[837]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin()</STRONG> (Thumb, 88 bytes, Stack size 32 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EE16_C_free_at_beginEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[835]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
<LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;PageBase*&rang;::deallocate(PageBase**, unsigned)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque()
</UL>

<P><STRONG><a name="[329]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::back()</STRONG> (Thumb, 134 bytes, Stack size 72 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EE4backEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::back() &rArr; std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Calls]<UL><LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;&)
<LI><a href="#[832]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Called By]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInStack(const char*)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTop()
</UL>

<P><STRONG><a name="[358]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_init()</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EE7_C_initEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_init() &rArr; std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***) &rArr; std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::_C_bufsize()
</UL>
<BR>[Calls]<UL><LI><a href="#[834]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(PageBase**, PageBase***)
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(PageFactory*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)
</UL>

<P><STRONG><a name="[346]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 764 + Unknown Stack Size
<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end()
</UL>
<BR>[Called By]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2)
<LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTopAfter()
</UL>

<P><STRONG><a name="[337]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)</STRONG> (Thumb, 88 bytes, Stack size 72 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EEC1ERKS3_))
<BR><BR>[Stack]<UL><LI>Max Depth = 876 + Unknown Stack Size
<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&) &rArr; T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[83b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2)
<LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_init()
<LI><a href="#[839]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;&)
<LI><a href="#[83a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_make_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(PageFactory*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInStack(const char*)
</UL>

<P><STRONG><a name="[8fc]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque__sub_object(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 72 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EEC1ERKS3_), UNUSED)

<P><STRONG><a name="[339]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque()</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[837]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_begin()
<LI><a href="#[838]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;::__rw_deque_iter(const std::__rw_deque_iter&lang;PageBase*, int, PageBase**, PageBase*&, std::allocator&lang;PageBase*&rang;&rang;&)
<LI><a href="#[836]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::empty() const
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::~PageManager()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::PageManager(PageFactory*)
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInStack(const char*)
</UL>

<P><STRONG><a name="[8fd]"></a>std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::~deque__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, pm_base.o(t._ZNSt5dequeIP8PageBaseSaIS1_EED1Ev), UNUSED)

<P><STRONG><a name="[338]"></a>std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::pop()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, pm_base.o(t._ZNSt5stackIP8PageBaseSt5dequeIS1_SaIS1_EEE3popEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = std::stack&lang;PageBase*, std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;::pop() &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_free_at_end()
</UL>
<BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::GetStackTopAfter()
<LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::FindPageInStack(const char*)
</UL>

<P><STRONG><a name="[83c]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)</STRONG> (Thumb, 198 bytes, Stack size 24 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EE13_C_insert_auxEPS0_RKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[83f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;lv_point_t*, lv_point_t*, std::allocator&lang;lv_point_t&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::capacity() const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&rang;(unsigned, const T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&)
</UL>

<P><STRONG><a name="[37a]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EE9push_backERKS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append(const lv_point_t*)
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::append_to_end(const lv_point_t*)
</UL>

<P><STRONG><a name="[387]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::allocator&lang;lv_point_t&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EEC1ERKS1_))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::~lv_poly_line()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
</UL>

<P><STRONG><a name="[8fe]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector__sub_object(const std::allocator&lang;lv_point_t&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EEC1ERKS1_), UNUSED)

<P><STRONG><a name="[37d]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EEC1ERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const lv_point_t*, lv_point_t*, std::allocator&lang;lv_point_t&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&rang;(unsigned, const T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&)
</UL>

<P><STRONG><a name="[8ff]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector__sub_object(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EEC1ERKS2_), UNUSED)

<P><STRONG><a name="[38a]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector() &rArr; std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned) &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::~lv_poly_line()
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_destroy(lv_poly_line::single_line_t*, lv_poly_line::single_line_t*)
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
</UL>

<P><STRONG><a name="[900]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EED1Ev), UNUSED)

<P><STRONG><a name="[37f]"></a>std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)</STRONG> (Thumb, 250 bytes, Stack size 32 bytes, lv_poly_line.o(t._ZNSt6vectorI10lv_point_tSaIS0_EEaSERKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[841]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::copy&lang;const lv_point_t*, lv_point_t*&rang;(T1, T1, T2)
<LI><a href="#[82c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)
<LI><a href="#[840]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;const lv_point_t*, lv_point_t*, std::allocator&lang;lv_point_t&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[829]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned)
<LI><a href="#[83d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::capacity() const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::size() const
<LI><a href="#[83e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&rang;(unsigned, const T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::single_line_t::operator =(const lv_poly_line::single_line_t&)
</UL>

<P><STRONG><a name="[38d]"></a>std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_destroy(lv_poly_line::single_line_t*, lv_poly_line::single_line_t*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, lv_poly_line.o(t._ZNSt6vectorIN12lv_poly_line13single_line_tESaIS1_EE10_C_destroyEPS1_S4_))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_destroy(lv_poly_line::single_line_t*, lv_poly_line::single_line_t*) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector() &rArr; std::allocator&lang;lv_point_t&rang;::deallocate(lv_point_t*, unsigned) &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::~vector()
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::~lv_poly_line()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
</UL>

<P><STRONG><a name="[389]"></a>std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lv_poly_line.o(t._ZNSt6vectorIN12lv_poly_line13single_line_tESaIS1_EE13_C_insert_auxEPS1_RKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 780 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&) &rArr; std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[842]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_destroy(lv_poly_line::single_line_t*, lv_poly_line::single_line_t*)
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::size() const
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::single_line_t::operator =(const lv_poly_line::single_line_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_poly_line::add_line()
</UL>

<P><STRONG><a name="[843]"></a>std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&)</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, pointcontainer.o(t._ZNSt6vectorIN14PointContainer11DiffPoint_tESaIS1_EE13_C_insert_auxEPS1_RKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[844]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;PointContainer::DiffPoint_t*, PointContainer::DiffPoint_t*, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&)
</UL>

<P><STRONG><a name="[39b]"></a>std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, pointcontainer.o(t._ZNSt6vectorIN14PointContainer11DiffPoint_tESaIS1_EE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&) &rArr; std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PushPoint(const PointContainer::FullPoint_t*)
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PushFullPoint(const PointContainer::FullPoint_t*)
</UL>

<P><STRONG><a name="[3c4]"></a>std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, resourcemanager.o(t._ZNSt6vectorIN15ResourceManager12ResourceNodeESaIS1_EE13_C_insert_auxEPS1_RKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[845]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;ResourceManager::ResourceNode*, ResourceManager::ResourceNode*, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;ResourceManager::ResourceNode&rang;::construct(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::AddResource(const char*, void*)
</UL>

<P><STRONG><a name="[318]"></a>std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, account.o(t._ZNSt6vectorIP7AccountSaIS1_EE13_C_insert_auxEPS1_RKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[846]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;Account**, Account**, std::allocator&lang;Account*&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[582]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::AddAccount(Account*)
</UL>

<P><STRONG><a name="[582]"></a>std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, account.o(t._ZNSt6vectorIP7AccountSaIS1_EE9push_backERKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 724 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Subscribe(const char*)
</UL>

<P><STRONG><a name="[583]"></a>std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::vector(const std::allocator&lang;Account*&rang;&)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, account.o(t._ZNSt6vectorIP7AccountSaIS1_EEC1ERKS2_))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Account(const char*, DataCenter*, unsigned, void*)
</UL>

<P><STRONG><a name="[901]"></a>std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::vector__sub_object(const std::allocator&lang;Account*&rang;&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, account.o(t._ZNSt6vectorIP7AccountSaIS1_EEC1ERKS2_), UNUSED)

<P><STRONG><a name="[585]"></a>std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::~vector()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, account.o(t._ZNSt6vectorIP7AccountSaIS1_EED1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::~vector() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::~Account()
</UL>

<P><STRONG><a name="[902]"></a>std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::~vector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, account.o(t._ZNSt6vectorIP7AccountSaIS1_EED1Ev), UNUSED)

<P><STRONG><a name="[356]"></a>std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, pm_base.o(t._ZNSt6vectorIP8PageBaseSaIS1_EE13_C_insert_auxEPS1_RKS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[847]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;PageBase**, PageBase**, std::allocator&lang;PageBase*&rang;&rang;(T1, T1, T2, T3&)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;PageBase*&rang;::deallocate(PageBase**, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::Register(PageBase*, const char*)
</UL>

<P><STRONG><a name="[3a3]"></a>std::vector&lang;StorageService::Node_t*, std::allocator&lang;StorageService::Node_t*&rang;&rang;::_C_insert_aux(StorageService::Node_t**, StorageService::Node_t*const &)</STRONG> (Thumb, 194 bytes, Stack size 24 bytes, storageservice.o(t._ZNSt6vectorIPN14StorageService6Node_tESaIS2_EE13_C_insert_auxEPS2_RKS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 716 + Unknown Stack Size
<LI>Call Chain = std::vector&lang;StorageService::Node_t*, std::allocator&lang;StorageService::Node_t*&rang;&rang;::_C_insert_aux(StorageService::Node_t**, StorageService::Node_t*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_deallocate(void*, unsigned, int)
<LI><a href="#[55e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_allocate(unsigned, int)
<LI><a href="#[848]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T2 std::uninitialized_copy&lang;StorageService::Node_t**, StorageService::Node_t**, std::allocator&lang;StorageService::Node_t*&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::Add(const char*, void*, unsigned short, StorageService::DataType_t)
</UL>

<P><STRONG><a name="[849]"></a>void std::__pop_heap&lang;short*, short, __rw::__rw_lt&lang;short&rang;, int&rang;(T1, T1, T1, T2, T3, T4*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, dp_power.o(t._ZSt10__pop_heapIPssN4__rw7__rw_ltIsEEiEvT_S4_S4_T0_T1_PT2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = void std::__pop_heap&lang;short*, short, __rw::__rw_lt&lang;short&rang;, int&rang;(T1, T1, T1, T2, T3, T4*) &rArr; void std::__adjust_heap&lang;short*, int, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T2, T3, T4)
</UL>
<BR>[Calls]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__adjust_heap&lang;short*, int, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T2, T3, T4)
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__partial_sort&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T1, T2*, T3)
</UL>

<P><STRONG><a name="[84a]"></a>void std::__adjust_heap&lang;short*, int, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T2, T3, T4)</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, dp_power.o(t._ZSt13__adjust_heapIPsisN4__rw7__rw_ltIsEEEvT_T0_S5_T1_T2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = void std::__adjust_heap&lang;short*, int, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T2, T3, T4)
</UL>
<BR>[Called By]<UL><LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__partial_sort&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T1, T2*, T3)
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__pop_heap&lang;short*, short, __rw::__rw_lt&lang;short&rang;, int&rang;(T1, T1, T1, T2, T3, T4*)
</UL>

<P><STRONG><a name="[84b]"></a>void std::__partial_sort&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T1, T2*, T3)</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, dp_power.o(t._ZSt14__partial_sortIPssN4__rw7__rw_ltIsEEEvT_S4_S4_PT0_T1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = void std::__partial_sort&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T1, T2*, T3) &rArr; void std::__pop_heap&lang;short*, short, __rw::__rw_lt&lang;short&rang;, int&rang;(T1, T1, T1, T2, T3, T4*) &rArr; void std::__adjust_heap&lang;short*, int, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T2, T3, T4)
</UL>
<BR>[Calls]<UL><LI><a href="#[84a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__adjust_heap&lang;short*, int, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T2, T3, T4)
<LI><a href="#[849]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__pop_heap&lang;short*, short, __rw::__rw_lt&lang;short&rang;, int&rang;(T1, T1, T1, T2, T3, T4*)
</UL>
<BR>[Called By]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)
</UL>

<P><STRONG><a name="[84c]"></a>void std::__insertion_sort&lang;short*, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2)</STRONG> (Thumb, 70 bytes, Stack size 24 bytes, dp_power.o(t._ZSt16__insertion_sortIPsN4__rw7__rw_ltIsEEEvT_S4_T0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = void std::__insertion_sort&lang;short*, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2) &rArr; void std::__unguarded_linear_insert&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T3)
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__unguarded_linear_insert&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T3)
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::sort&lang;short*&rang;(T1, T1)
</UL>

<P><STRONG><a name="[84e]"></a>void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)</STRONG> (Thumb, 206 bytes, Stack size 56 bytes, dp_power.o(t._ZSt16__introsort_loopIPsiN4__rw7__rw_ltIsEEEvT_S4_T0_T1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + In Cycle
<LI>Call Chain = void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) &rArr;  void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)
<LI><a href="#[84b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__partial_sort&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T1, T2*, T3)
<LI><a href="#[84f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rw::__rw_lt&lang;short&rang;::operator ()(const short&, const short&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::sort&lang;short*&rang;(T1, T1)
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)
</UL>

<P><STRONG><a name="[83f]"></a>T2 std::uninitialized_copy&lang;lv_point_t*, lv_point_t*, std::allocator&lang;lv_point_t&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_poly_line.o(t._ZSt18uninitialized_copyIP10lv_point_tS1_SaIS0_EET0_T_S4_S3_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T2 std::uninitialized_copy&lang;lv_point_t*, lv_point_t*, std::allocator&lang;lv_point_t&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[83c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&)
</UL>

<P><STRONG><a name="[840]"></a>T2 std::uninitialized_copy&lang;const lv_point_t*, lv_point_t*, std::allocator&lang;lv_point_t&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lv_poly_line.o(t._ZSt18uninitialized_copyIPK10lv_point_tPS0_SaIS0_EET0_T_S6_S5_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T2 std::uninitialized_copy&lang;const lv_point_t*, lv_point_t*, std::allocator&lang;lv_point_t&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
</UL>

<P><STRONG><a name="[842]"></a>T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, lv_poly_line.o(t._ZSt18uninitialized_copyIPN12lv_poly_line13single_line_tES2_SaIS1_EET0_T_S5_S4_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 756 + Unknown Stack Size
<LI>Call Chain = T2 std::uninitialized_copy&lang;lv_poly_line::single_line_t*, lv_poly_line::single_line_t*, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;(T1, T1, T2, T3&) &rArr; std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&) &rArr; lv_poly_line::single_line_t::single_line_t(const lv_poly_line::single_line_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;lv_poly_line::single_line_t&rang;::construct(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_poly_line::single_line_t, std::allocator&lang;lv_poly_line::single_line_t&rang;&rang;::_C_insert_aux(lv_poly_line::single_line_t*, const lv_poly_line::single_line_t&)
</UL>

<P><STRONG><a name="[844]"></a>T2 std::uninitialized_copy&lang;PointContainer::DiffPoint_t*, PointContainer::DiffPoint_t*, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pointcontainer.o(t._ZSt18uninitialized_copyIPN14PointContainer11DiffPoint_tES2_SaIS1_EET0_T_S5_S4_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T2 std::uninitialized_copy&lang;PointContainer::DiffPoint_t*, PointContainer::DiffPoint_t*, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[843]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&)
</UL>

<P><STRONG><a name="[845]"></a>T2 std::uninitialized_copy&lang;ResourceManager::ResourceNode*, ResourceManager::ResourceNode*, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, resourcemanager.o(t._ZSt18uninitialized_copyIPN15ResourceManager12ResourceNodeES2_SaIS1_EET0_T_S5_S4_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = T2 std::uninitialized_copy&lang;ResourceManager::ResourceNode*, ResourceManager::ResourceNode*, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::allocator&lang;ResourceManager::ResourceNode&rang;::construct(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&)
</UL>

<P><STRONG><a name="[846]"></a>T2 std::uninitialized_copy&lang;Account**, Account**, std::allocator&lang;Account*&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, account.o(t._ZSt18uninitialized_copyIPP7AccountS2_SaIS1_EET0_T_S5_S4_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T2 std::uninitialized_copy&lang;Account**, Account**, std::allocator&lang;Account*&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &)
</UL>

<P><STRONG><a name="[847]"></a>T2 std::uninitialized_copy&lang;PageBase**, PageBase**, std::allocator&lang;PageBase*&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, pm_base.o(t._ZSt18uninitialized_copyIPP8PageBaseS2_SaIS1_EET0_T_S5_S4_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T2 std::uninitialized_copy&lang;PageBase**, PageBase**, std::allocator&lang;PageBase*&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_insert_aux(PageBase**, PageBase*const &)
</UL>

<P><STRONG><a name="[848]"></a>T2 std::uninitialized_copy&lang;StorageService::Node_t**, StorageService::Node_t**, std::allocator&lang;StorageService::Node_t*&rang;&rang;(T1, T1, T2, T3&)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, storageservice.o(t._ZSt18uninitialized_copyIPPN14StorageService6Node_tES3_SaIS2_EET0_T_S6_S5_RT1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = T2 std::uninitialized_copy&lang;StorageService::Node_t**, StorageService::Node_t**, std::allocator&lang;StorageService::Node_t*&rang;&rang;(T1, T1, T2, T3&)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;StorageService::Node_t*, std::allocator&lang;StorageService::Node_t*&rang;&rang;::_C_insert_aux(StorageService::Node_t**, StorageService::Node_t*const &)
</UL>

<P><STRONG><a name="[84d]"></a>void std::__unguarded_linear_insert&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T3)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, dp_power.o(t._ZSt25__unguarded_linear_insertIPssN4__rw7__rw_ltIsEEEvT_T0_T1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = void std::__unguarded_linear_insert&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T3)
</UL>
<BR>[Called By]<UL><LI><a href="#[828]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::sort&lang;short*&rang;(T1, T1)
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__insertion_sort&lang;short*, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2)
</UL>

<P><STRONG><a name="[82c]"></a>const T1& std::max&lang;unsigned&rang;(const T1&, const T1&)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZSt3maxIjERKT_S2_S2_))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::vector(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
<LI><a href="#[82b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::_C_allocate(unsigned, unsigned, unsigned)
<LI><a href="#[82f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::replace(unsigned, unsigned, const char*, unsigned, unsigned, unsigned)
</UL>

<P><STRONG><a name="[841]"></a>T2 std::copy&lang;const lv_point_t*, lv_point_t*&rang;(T1, T1, T2)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_poly_line.o(t._ZSt4copyIPK10lv_point_tPS0_ET0_T_S5_S4_))
<BR><BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::operator =(const std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;&)
</UL>

<P><STRONG><a name="[83b]"></a>T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2)</STRONG> (Thumb, 140 bytes, Stack size 40 bytes, pm_base.o(t._ZSt4copyISt15__rw_deque_iterIP8PageBaseiPKS2_RS3_SaIS2_EESt20back_insert_iteratorISt5dequeIS2_S6_EEET0_T_SD_SC_))
<BR><BR>[Stack]<UL><LI>Max Depth = 804 + Unknown Stack Size
<LI>Call Chain = T2 std::copy&lang;std::__rw_deque_iter&lang;PageBase*, int, PageBase*const *, PageBase*const &, std::allocator&lang;PageBase*&rang;&rang;, std::back_insert_iterator&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;&rang;(T1, T1, T2) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &) &rArr; std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::_C_alloc_at_end() &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::push_back(PageBase*const &)
<LI><a href="#[833]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unsigned __rw::__rw_new_capacity&lang;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&rang;(unsigned, const T1*)
</UL>
<BR>[Called By]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;::deque(const std::deque&lang;PageBase*, std::allocator&lang;PageBase*&rang;&rang;&)
</UL>

<P><STRONG><a name="[828]"></a>void std::sort&lang;short*&rang;(T1, T1)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, dp_power.o(t._ZSt4sortIPsEvT_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = void std::sort&lang;short*&rang;(T1, T1) &rArr; void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) &rArr;  void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[84d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__unguarded_linear_insert&lang;short*, short, __rw::__rw_lt&lang;short&rang;&rang;(T1, T2, T3)
<LI><a href="#[84e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3)
<LI><a href="#[84c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;void std::__insertion_sort&lang;short*, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2)
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::MedianQueue&lang;short, (unsigned)10&rang;::GetNext(short)
</UL>

<P><STRONG><a name="[3c9]"></a>__aeabi_dneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic))
<BR><BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetVerticalLine(TrackPointFilter::Line_t*, const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lng()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lat()
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_cos
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[903]"></a>_dneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[904]"></a>__aeabi_fneg</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[905]"></a>_fneg</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[906]"></a>_dabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[907]"></a>_fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, basic.o(x$fpl$basic), UNUSED)

<P><STRONG><a name="[3b3]"></a>__aeabi_d2f</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SysConfig_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
<LI><a href="#[4e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetGPSInfo(float*, float*, float*, char*, unsigned, float*, float*)
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::QuickSort(double)
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[850]"></a>_d2f</STRONG> (Thumb, 98 bytes, Stack size 32 bytes, d2f.o(x$fpl$d2f), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[851]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fretinf
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[270]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetOffset(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetIsOnSameSide(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lng()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lat()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[608]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[604]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan
</UL>

<P><STRONG><a name="[853]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[856]"></a>__fpl_dcheck_NaN1</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, dcheck1.o(x$fpl$dcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[60f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>

<P><STRONG><a name="[85a]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[26a]"></a>__aeabi_ddiv</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lng()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lat()
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[611]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[858]"></a>_ddiv</STRONG> (Thumb, 552 bytes, Stack size 32 bytes, ddiv.o(x$fpl$ddiv), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[602]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmpeq
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[859]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[3e7]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::onViewLoad()::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[85b]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[623]"></a>__aeabi_d2uiz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[85c]"></a>_dfixu</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, dfixu.o(x$fpl$dfixu), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[475]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*)
<LI><a href="#[4f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::TrackReload(void(*)(TrackPointFilter*, const TrackPointFilter::Point_t*), void*)
<LI><a href="#[539]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::CheckPosition()
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[908]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[3c8]"></a>__aeabi_ui2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu))
<BR><BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lng()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSLocation::lat()
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
</UL>

<P><STRONG><a name="[909]"></a>_dfltu</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dfltu), UNUSED)

<P><STRONG><a name="[3d4]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
<LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to TileSystem_cpp]::Clip(double, double, double)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetIsOnSameSide(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[85d]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[85a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[860]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[85f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drcmple
</UL>

<P><STRONG><a name="[26b]"></a>__aeabi_dmul</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dmul
</UL>
<BR>[Called By]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetOffset(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetVerticalLine(TrackPointFilter::Line_t*, const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetIsOnSameSide(const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[607]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[605]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[610]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
<LI><a href="#[601]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;frexp
</UL>

<P><STRONG><a name="[85e]"></a>_dmul</STRONG> (Thumb, 332 bytes, Stack size 32 bytes, dmul.o(x$fpl$dmul), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[852]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[85d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[85c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfixu
<LI><a href="#[85b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[859]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
<LI><a href="#[617]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>

<P><STRONG><a name="[855]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
<LI><a href="#[85e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dmul
<LI><a href="#[858]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ddiv
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[3d8]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLon(double, double)
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to GPS_Transform_c]::transformLat(double, double)
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[600]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp___mathlib_tofloat
</UL>

<P><STRONG><a name="[85f]"></a>_drcmple</STRONG> (Thumb, 108 bytes, Stack size 16 bytes, drleqf.o(x$fpl$drleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[860]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmple_InfNaN
</UL>

<P><STRONG><a name="[26d]"></a>__aeabi_drsub</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_drsub
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[861]"></a>_drsb</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, daddsub_clz.o(x$fpl$drsb), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[854]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
</UL>

<P><STRONG><a name="[617]"></a>_dsqrt</STRONG> (Thumb, 404 bytes, Stack size 24 bytes, dsqrt_umaal.o(x$fpl$dsqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __fpl_dnaninf
</UL>
<BR>[Calls]<UL><LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>
<BR>[Called By]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
</UL>

<P><STRONG><a name="[267]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
<LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetLine(TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::GetVerticalLine(TrackPointFilter::Line_t*, const TrackPointFilter::Line_t*, const TrackPointFilter::Point_t*)
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::distanceBetween(double, double, double, double)
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_log
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan2
<LI><a href="#[603]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_atan
<LI><a href="#[60c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_sin
<LI><a href="#[60b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee754_rem_pio2
<LI><a href="#[60d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_cos
</UL>

<P><STRONG><a name="[863]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[862]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[852]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3df]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(float, unsigned char)
<LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
<LI><a href="#[4f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapModel::GetGPS_Info(HAL::GPS_Info_t*)
<LI><a href="#[53e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::SportInfoUpdate()
<LI><a href="#[555]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::Dialplate::Update()
<LI><a href="#[4f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosModel::GetStorageInfo(bool*, const char**, char*, unsigned)
<LI><a href="#[4e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetSport(float, const char*, float)
<LI><a href="#[4eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetMAG(float, int, int, int)
<LI><a href="#[4e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetGPS(float, float, float, const char*, float, float)
<LI><a href="#[4f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::SetBattery(int, float, const char*)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::QuickSort(double)
<LI><a href="#[825]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;T1 ArduinoJson6184_11::VariantData::asFloat&lang;double&rang;() const
</UL>

<P><STRONG><a name="[864]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[865]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[855]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[4aa]"></a>__aeabi_ul2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll))
<BR><BR>[Called By]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
</UL>

<P><STRONG><a name="[90a]"></a>_ll_uto_f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[90b]"></a>__aeabi_l2f</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[90c]"></a>_ll_sto_f</STRONG> (Thumb, 90 bytes, Stack size 0 bytes, ffltll_clz.o(x$fpl$ffltll), UNUSED)

<P><STRONG><a name="[865]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[864]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[1aa]"></a>_fp_init</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[90d]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[90e]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[851]"></a>__fpl_fretinf</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, fretinf.o(x$fpl$fretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[850]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2f
</UL>

<P><STRONG><a name="[9]"></a>__ieee_status</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, istatus.o(x$fpl$ieeestatus))
<BR><BR>[Called By]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_value
</UL>

<P><STRONG><a name="[18c]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[190]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>

<P><STRONG><a name="[857]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[866]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>

<P><STRONG><a name="[60f]"></a>__ARM_scalbn</STRONG> (Thumb, 92 bytes, Stack size 0 bytes, scalbn.o(x$fpl$scalbn))
<BR><BR>[Calls]<UL><LI><a href="#[856]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[60e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexp
</UL>

<P><STRONG><a name="[203]"></a>_scanf_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf1.o(x$fpl$scanf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 340<LI>Call Chain = _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__vfscanf
</UL>

<P><STRONG><a name="[21c]"></a>_scanf_hex_real</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _scanf_hex_real &rArr; _scanf_really_hex_real &rArr; __support_ldexp &rArr; __hardfp_ldexp &rArr; __mathlib_dbl_underflow &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[21b]"></a>_scanf_infnan</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, scanf2.o(x$fpl$scanf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _scanf_infnan &rArr; _scanf_really_infnan
</UL>
<BR>[Calls]<UL><LI><a href="#[867]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[866]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[857]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[172]"></a>__sti___12_DataProc_cpp_e3929772</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, dataproc.o(i.__sti___12_DataProc_cpp_e3929772))
<BR><BR>[Stack]<UL><LI>Max Depth = 820 + Unknown Stack Size
<LI>Call Chain = __sti___12_DataProc_cpp_e3929772 &rArr; DataCenter::DataCenter(const char*) &rArr; Account::Account(const char*, DataCenter*, unsigned, void*) &rArr; DataCenter::AddAccount(Account*) &rArr; Account::Subscribe(const char*) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::push_back(Account*const &) &rArr; std::vector&lang;Account*, std::allocator&lang;Account*&rang;&rang;::_C_insert_aux(Account**, Account*const &) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataCenter::DataCenter(const char*)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dataproc.o(.init_array)
</UL>
<P><STRONG><a name="[88]"></a>[local to DP_Clock_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, dp_clock.o(i._ZN34_INTERNAL_12_DP_Clock_cpp_484d96a67onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = [local to DP_Clock_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; HAL::Clock_SetInfo(const HAL::Clock_Info_t*) &rArr; RTC_Set &rArr; RTC_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[3f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Unsubscribe(const char*)
<LI><a href="#[3f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_SetInfo(const HAL::Clock_Info_t*)
<LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_GetInfo(HAL::Clock_Info_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_clock.o(i._Z14_DP_Clock_InitP7Account)
</UL>
<P><STRONG><a name="[85]"></a>[local to DP_GPS_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, dp_gps.o(i._ZN32_INTERNAL_10_DP_GPS_cpp_3fe63fd77onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = [local to DP_GPS_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; [local to DP_GPS_cpp]::onTimer(Account*) &rArr; HAL::GPS_GetInfo(HAL::GPS_Info_t*) &rArr; TinyGPSLocation::lng() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
<LI><a href="#[3eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_GPS_cpp]::onTimer(Account*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_gps.o(i._Z12_DP_GPS_InitP7Account)
</UL>
<P><STRONG><a name="[3eb]"></a>[local to DP_GPS_cpp]::onTimer(Account*)</STRONG> (Thumb, 110 bytes, Stack size 88 bytes, dp_gps.o(i._ZN32_INTERNAL_10_DP_GPS_cpp_3fe63fd77onTimerEP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to DP_GPS_cpp]::onTimer(Account*) &rArr; HAL::GPS_GetInfo(HAL::GPS_Info_t*) &rArr; TinyGPSLocation::lng() &rArr; __aeabi_ddiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Publish()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Commit(const void*, unsigned)
<LI><a href="#[3ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetInfo(HAL::GPS_Info_t*)
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_GPS_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[89]"></a>[local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 214 bytes, Stack size 40 bytes, dp_power.o(i._ZN34_INTERNAL_12_DP_Power_cpp_e593e1547onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to DP_Power_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; Filter::MedianQueue&lang;short, (unsigned)10&rang;::GetNext(short) &rArr; void std::sort&lang;short*&rang;(T1, T1) &rArr; void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) &rArr;  void std::__introsort_loop&lang;short*, int, __rw::__rw_lt&lang;short&rang;&rang;(T1, T1, T2, T3) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::MedianQueue&lang;short, (unsigned)10&rang;::GetNext(short)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Filter::Hysteresis&lang;short&rang;::GetNext(short)
<LI><a href="#[3f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_GetInfo(HAL::Power_Info_t*)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_power.o(i._Z14_DP_Power_InitP7Account)
</UL>
<P><STRONG><a name="[a0]"></a>[local to DP_SportStatus_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, dp_sportstatus.o(i._ZN40_INTERNAL_18_DP_SportStatus_cpp_a5c82bb67onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = [local to DP_SportStatus_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; [local to DP_SportStatus_cpp]::onTimer(Account*) &rArr; HAL::GPS_GetDistanceOffset(HAL::GPS_Info_t*, double, double) &rArr; TinyGPSPlus::distanceBetween(double, double, double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[4a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onTimer(Account*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_sportstatus.o(i._Z20_DP_SportStatus_InitP7Account)
</UL>
<P><STRONG><a name="[4a8]"></a>[local to DP_SportStatus_cpp]::onTimer(Account*)</STRONG> (Thumb, 402 bytes, Stack size 104 bytes, dp_sportstatus.o(i._ZN40_INTERNAL_18_DP_SportStatus_cpp_a5c82bb67onTimerEP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = [local to DP_SportStatus_cpp]::onTimer(Account*) &rArr; HAL::GPS_GetDistanceOffset(HAL::GPS_Info_t*, double, double) &rArr; TinyGPSPlus::distanceBetween(double, double, double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[3ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Publish()
<LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Commit(const void*, unsigned)
<LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::GetTick()
<LI><a href="#[4a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::GetTickElaps(unsigned)
<LI><a href="#[498]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::GPS_GetDistanceOffset(HAL::GPS_Info_t*, double, double)
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_fabs
<LI><a href="#[4aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ul2f
<LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_SportStatus_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[424]"></a>[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, dp_recorder.o(i._ZN37_INTERNAL_15_DP_Recorder_cpp_4f9bfee816Recorder_RecStopEP10Recorder_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = [local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*) &rArr; GPX::getClose() &rArr; String::String(const char*) &rArr; String::copy(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_close
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[428]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getClose()
<LI><a href="#[425]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakSegClose()
<LI><a href="#[427]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakClose()
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_FileWriteString(lv_fs_file_t*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[429]"></a>[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)</STRONG> (Thumb, 154 bytes, Stack size 136 bytes, dp_recorder.o(i._ZN37_INTERNAL_15_DP_Recorder_cpp_4f9bfee817Recorder_RecPointEP10Recorder_tPN3HAL10GPS_Info_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 440 + Unknown Stack Size
<LI>Call Chain = [local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*) &rArr; GPX::getPt(String, String, String) &rArr; GPX::wrapCDATA(String) &rArr; String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[42b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(float, unsigned char)
<LI><a href="#[42f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(double, unsigned char)
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[42e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setTime(String)
<LI><a href="#[42c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setEle(String)
<LI><a href="#[430]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getPt(String, String, String)
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_FileWriteString(lv_fs_file_t*, const char*)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_GetTimeConv(Recorder_t*, const char*, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[431]"></a>[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)</STRONG> (Thumb, 242 bytes, Stack size 160 bytes, dp_recorder.o(i._ZN37_INTERNAL_15_DP_Recorder_cpp_4f9bfee817Recorder_RecStartEP10Recorder_tt))
<BR><BR>[Stack]<UL><LI>Max Depth = 456 + Unknown Stack Size
<LI>Call Chain = [local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short) &rArr; GPX::getMetaData() &rArr; GPX::wrapCDATA(String) &rArr; String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::~String()
<LI><a href="#[42d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;String::String(const char*)
<LI><a href="#[434]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setName(String)
<LI><a href="#[435]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setDesc(String)
<LI><a href="#[436]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getOpen()
<LI><a href="#[439]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getInfo()
<LI><a href="#[43a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakSegOpen()
<LI><a href="#[432]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setMetaName(String)
<LI><a href="#[433]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::setMetaDesc(String)
<LI><a href="#[438]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getTrakOpen()
<LI><a href="#[437]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPX::getMetaData()
<LI><a href="#[426]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_FileWriteString(lv_fs_file_t*, const char*)
<LI><a href="#[42a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_GetTimeConv(Recorder_t*, const char*, char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[42a]"></a>[local to DP_Recorder_cpp]::Recorder_GetTimeConv(Recorder_t*, const char*, char*, unsigned)</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, dp_recorder.o(i._ZN37_INTERNAL_15_DP_Recorder_cpp_4f9bfee820Recorder_GetTimeConvEP10Recorder_tPKcPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192 + Unknown Stack Size
<LI>Call Chain = [local to DP_Recorder_cpp]::Recorder_GetTimeConv(Recorder_t*, const char*, char*, unsigned) &rArr; __2snprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
</UL>

<P><STRONG><a name="[426]"></a>[local to DP_Recorder_cpp]::Recorder_FileWriteString(lv_fs_file_t*, const char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, dp_recorder.o(i._ZN37_INTERNAL_15_DP_Recorder_cpp_4f9bfee824Recorder_FileWriteStringEP12lv_fs_file_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to DP_Recorder_cpp]::Recorder_FileWriteString(lv_fs_file_t*, const char*) &rArr; lv_fs_write
</UL>
<BR>[Calls]<UL><LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_write
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)
</UL>

<P><STRONG><a name="[98]"></a>[local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 160 bytes, Stack size 32 bytes, dp_recorder.o(i._ZN37_INTERNAL_15_DP_Recorder_cpp_4f9bfee87onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 488 + Unknown Stack Size
<LI>Call Chain = [local to DP_Recorder_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; [local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short) &rArr; GPX::getMetaData() &rArr; GPX::wrapCDATA(String) &rArr; String::operator +=(const char*) &rArr; String::concat(const char*) &rArr; String::concat(const char*, unsigned) &rArr; String::reserve(unsigned) &rArr; String::changeBuffer(unsigned) &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
<LI><a href="#[431]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStart(Recorder_t*, unsigned short)
<LI><a href="#[429]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecPoint(Recorder_t*, HAL::GPS_Info_t*)
<LI><a href="#[424]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Recorder_cpp]::Recorder_RecStop(Recorder_t*)
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_recorder.o(i._Z17_DP_Recorder_InitP7Account)
</UL>
<P><STRONG><a name="[86]"></a>_DP_IMU_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dp_imu.o(i._ZZ12_DP_IMU_InitP7AccountENUlPvS1_E_4_FUNES1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DP_IMU_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*) &rArr; Account::Commit(const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Commit(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_imu.o(i._Z12_DP_IMU_InitP7Account)
</UL>
<P><STRONG><a name="[87]"></a>_DP_MAG_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*)</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dp_mag.o(i._ZZ12_DP_MAG_InitP7AccountENUlPvS1_E_4_FUNES1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _DP_MAG_Init(Account*)::[lambda(void*, void*) (instance 1)]::_FUN(void*, void*) &rArr; Account::Commit(const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Commit(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_mag.o(i._Z12_DP_MAG_InitP7Account)
</UL>
<P><STRONG><a name="[41d]"></a>[local to DP_Storage_cpp]::MapConvGetRange(const char*, short*, short*)</STRONG> (Thumb, 102 bytes, Stack size 168 bytes, dp_storage.o(i._ZN36_INTERNAL_14_DP_Storage_cpp_d0a046f315MapConvGetRangeEPKcPsS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = [local to DP_Storage_cpp]::MapConvGetRange(const char*, short*, short*) &rArr; atoi &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[41f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_dir_read
<LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_dir_open
<LI><a href="#[420]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_dir_close
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onLoad(Account*)
</UL>

<P><STRONG><a name="[421]"></a>[local to DP_Storage_cpp]::onLoad(Account*)</STRONG> (Thumb, 100 bytes, Stack size 80 bytes, dp_storage.o(i._ZN36_INTERNAL_14_DP_Storage_cpp_d0a046f36onLoadEP7Account))
<BR><BR>[Stack]<UL><LI>Max Depth = 2720<LI>Call Chain = [local to DP_Storage_cpp]::onLoad(Account*) &rArr; StorageService::LoadFile() &rArr; ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::LoadFile()
<LI><a href="#[41d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::MapConvGetRange(const char*, short*, short*)
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strncpy
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[95]"></a>[local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, dp_storage.o(i._ZN36_INTERNAL_14_DP_Storage_cpp_d0a046f37onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 2736 + Unknown Stack Size
<LI>Call Chain = [local to DP_Storage_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; [local to DP_Storage_cpp]::onLoad(Account*) &rArr; StorageService::LoadFile() &rArr; ArduinoJson6184_11::DeserializationError ArduinoJson6184_11::deserialize&lang;ArduinoJson6184_11::JsonDeserializer, FileWrapper, ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::JsonDocument&, T2&, ArduinoJson6184_11::NestingLimit, T3) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) &rArr; bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseObject&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::CollectionData&, T1, ArduinoJson6184_11::NestingLimit) &rArr;  bool ArduinoJson6184_11::JsonDeserializer&lang;ArduinoJson6184_11::Reader&lang;FileWrapper, void&rang;, ArduinoJson6184_11::StringCopier&rang;::parseVariant&lang;ArduinoJson6184_11::AllowAllFilter&rang;(ArduinoJson6184_11::VariantData&, T1, ArduinoJson6184_11::NestingLimit) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[422]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_GetCardSizeMB()
<LI><a href="#[423]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_GetTypeName()
<LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_GetReady()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::SaveFile()
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::Remove(const char*)
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::Add(const char*, void*, unsigned short, StorageService::DataType_t)
<LI><a href="#[421]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_Storage_cpp]::onLoad(Account*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_storage.o(i._Z16_DP_Storage_InitP7Account)
</UL>
<P><STRONG><a name="[96]"></a>[local to DP_Storage_cpp]::onSDEvent(bool)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, dp_storage.o(i._ZN36_INTERNAL_14_DP_Storage_cpp_d0a046f39onSDEventEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to DP_Storage_cpp]::onSDEvent(bool) &rArr; Account::Notify(const char*, const void*, unsigned) &rArr; Account::Notify(Account*, const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DataProc::Center()
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Notify(const char*, const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_storage.o(i._Z16_DP_Storage_InitP7Account)
</UL>
<P><STRONG><a name="[173]"></a>__sti___14_DP_Storage_cpp_d0a046f3</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, dp_storage.o(i.__sti___14_DP_Storage_cpp_d0a046f3))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___14_DP_Storage_cpp_d0a046f3 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[61a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StorageService::StorageService(const char*, unsigned)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_storage.o(.init_array)
</UL>
<P><STRONG><a name="[9f]"></a>[local to DP_MusicPlayer_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, dp_musicplayer.o(i._ZN40_INTERNAL_18_DP_MusicPlayer_cpp_a05c14dc7onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = [local to DP_MusicPlayer_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; HAL::Audio_PlayMusic(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_PlayMusic(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_musicplayer.o(i._Z20_DP_MusicPlayer_InitP7Account)
</UL>
<P><STRONG><a name="[8a]"></a>[local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 160 bytes, Stack size 136 bytes, dp_tzconv.o(i._ZN35_INTERNAL_13_DP_TzConv_cpp_8dd0f0727onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = [local to DP_TzConv_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; Account::Pull(const char*, void*, unsigned) &rArr; Account::Pull(Account*, void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setTime(int, int, int, int, int, int)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;second()
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;minute()
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;month()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;year()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hour()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;day()
<LI><a href="#[3f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adjustTime(long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_tzconv.o(i._Z15_DP_TzConv_InitP7Account)
</UL>
<P><STRONG><a name="[9d]"></a>[local to DP_SysConfig_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 118 bytes, Stack size 64 bytes, dp_sysconfig.o(i._ZN38_INTERNAL_16_DP_SysConfig_cpp_fa9ade947onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = [local to DP_SysConfig_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; HAL::Buzz_SetEnable(bool) &rArr; HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[45c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_SetEnable(bool)
<LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_sysconfig.o(i._Z18_DP_SysConfig_InitP7Account)
</UL>
<P><STRONG><a name="[a1]"></a>[local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 160 bytes, Stack size 48 bytes, dp_trackfilter.o(i._ZN40_INTERNAL_18_DP_TrackFilter_cpp_a5ac639c7onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 812 + Unknown Stack Size
<LI>Call Chain = [local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; PointContainer::PushPoint(const PointContainer::FullPoint_t*) &rArr; PointContainer::PushFullPoint(const PointContainer::FullPoint_t*) &rArr; std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::push_back(const PointContainer::DiffPoint_t&) &rArr; std::vector&lang;PointContainer::DiffPoint_t, std::allocator&lang;PointContainer::DiffPoint_t&rang;&rang;::_C_insert_aux(PointContainer::DiffPoint_t*, const PointContainer::DiffPoint_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[4ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::ConvertMapCoordinate(double, double, int*, int*)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::PushPoint(const TrackPointFilter::Point_t*)
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PushPoint(const PointContainer::FullPoint_t*)
<LI><a href="#[4ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*)
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_trackfilter.o(i._Z20_DP_TrackFilter_InitP7Account)
</UL>
<P><STRONG><a name="[4ac]"></a>[local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*)</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, dp_trackfilter.o(i._ZN40_INTERNAL_18_DP_TrackFilter_cpp_a5ac639c8onNotifyEP7AccountPN8DataProc18TrackFilter_Info_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = [local to DP_TrackFilter_cpp]::onNotify(Account*, DataProc::TrackFilter_Info_t*) &rArr; PointContainer::~PointContainer() &rArr; __rw::__rw_deallocate(void*, unsigned, int) &rArr; operator delete (void*) &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[4ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::Reset()
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::~PointContainer()
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PointContainer::PointContainer()
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DP_TrackFilter_cpp]::onEvent(Account*, Account::EventParam_t*)
</UL>

<P><STRONG><a name="[174]"></a>__sti___18_DP_TrackFilter_cpp_a5ac639c</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, dp_trackfilter.o(i.__sti___18_DP_TrackFilter_cpp_a5ac639c))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___18_DP_TrackFilter_cpp_a5ac639c &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[503]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MapConv::MapConv()
<LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackPointFilter::TrackPointFilter()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> dp_trackfilter.o(.init_array)
</UL>
<P><STRONG><a name="[403]"></a>[local to StatusBar_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c213lv_color_makeEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to StatusBar_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_color_white()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_color_black()
</UL>

<P><STRONG><a name="[402]"></a>[local to StatusBar_cpp]::lv_color_black()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c214lv_color_blackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to StatusBar_cpp]::lv_color_black() &rArr; [local to StatusBar_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[404]"></a>[local to StatusBar_cpp]::lv_color_white()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c214lv_color_whiteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to StatusBar_cpp]::lv_color_white() &rArr; [local to StatusBar_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[405]"></a>[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)</STRONG> (Thumb, 630 bytes, Stack size 32 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c216StatusBar_CreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 516<LI>Call Chain = [local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*) &rArr; lv_obj_align_to &rArr; lv_obj_update_layout &rArr; layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_default
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_obj_get_style_height(const _lv_obj_t*, unsigned)
<LI><a href="#[404]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_color_white()
<LI><a href="#[402]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_color_black()
<LI><a href="#[403]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
<LI><a href="#[419]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_ready
<LI><a href="#[418]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_create
<LI><a href="#[409]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_transition_dsc_init
<LI><a href="#[40d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_font
<LI><a href="#[40c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_text_color
<LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
<LI><a href="#[40a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_transition
<LI><a href="#[408]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_width
<LI><a href="#[407]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_shadow_color
<LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
<LI><a href="#[406]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_color
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_size
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_create
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[411]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_create
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[40e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_create
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetImage(const char*)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::GetFont(const char*)
<LI><a href="#[417]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::SetStyle(StatusBar::Style_t)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StatusBar::Init(_lv_obj_t*)
</UL>

<P><STRONG><a name="[af]"></a>[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)</STRONG> (Thumb, 208 bytes, Stack size 104 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c216StatusBar_UpdateEP11_lv_timer_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 728<LI>Call Chain = [local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*) &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Account::Pull(const char*, void*, unsigned)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_obj_get_style_height(const _lv_obj_t*, unsigned)
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_ConBattSetOpa(_lv_obj_t*, int)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[41c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_map
<LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c216StatusBar_CreateEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[41b]"></a>[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)</STRONG> (Thumb, 58 bytes, Stack size 80 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c220StatusBar_AnimCreateEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[415]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::lv_obj_get_style_height(const _lv_obj_t*, unsigned)
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_onAnimOpaFinish(_lv_anim_t*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
</UL>

<P><STRONG><a name="[b2]"></a>[local to StatusBar_cpp]::StatusBar_ConBattSetOpa(_lv_obj_t*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c223StatusBar_ConBattSetOpaEP9_lv_obj_ti))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = [local to StatusBar_cpp]::StatusBar_ConBattSetOpa(_lv_obj_t*, int) &rArr; lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_onAnimOpaFinish(_lv_anim_t*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c228StatusBar_onAnimHeightFinishEP10_lv_anim_t)
</UL>
<P><STRONG><a name="[415]"></a>[local to StatusBar_cpp]::lv_obj_get_style_height(const _lv_obj_t*, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c223lv_obj_get_style_heightEPK9_lv_obj_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = [local to StatusBar_cpp]::lv_obj_get_style_height(const _lv_obj_t*, unsigned) &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Update(_lv_timer_t*)
<LI><a href="#[405]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[b3]"></a>[local to StatusBar_cpp]::StatusBar_onAnimOpaFinish(_lv_anim_t*)</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c225StatusBar_onAnimOpaFinishEP10_lv_anim_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = [local to StatusBar_cpp]::StatusBar_onAnimOpaFinish(_lv_anim_t*) &rArr; [local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_ConBattSetOpa(_lv_obj_t*, int)
<LI><a href="#[41b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c228StatusBar_onAnimHeightFinishEP10_lv_anim_t)
</UL>
<P><STRONG><a name="[b1]"></a>[local to StatusBar_cpp]::StatusBar_onAnimHeightFinish(_lv_anim_t*)</STRONG> (Thumb, 68 bytes, Stack size 80 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c228StatusBar_onAnimHeightFinishEP10_lv_anim_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = [local to StatusBar_cpp]::StatusBar_onAnimHeightFinish(_lv_anim_t*) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c220StatusBar_AnimCreateEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[9c]"></a>[local to StatusBar_cpp]::onEvent(Account*, Account::EventParam_t*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c27onEventEP7AccountPNS0_12EventParam_tE))
<BR><BR>[Stack]<UL><LI>Max Depth = 444<LI>Call Chain = [local to StatusBar_cpp]::onEvent(Account*, Account::EventParam_t*) &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusbar.o(i._Z18_DP_StatusBar_InitP7Account)
</UL>
<P><STRONG><a name="[b0]"></a>[local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, statusbar.o(i._ZZN35_INTERNAL_13_StatusBar_cpp_381581c220StatusBar_AnimCreateEP9_lv_obj_tENUlPviE_4_FUNES2_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = [local to StatusBar_cpp]::StatusBar_AnimCreate(_lv_obj_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int) &rArr; lv_obj_set_height &rArr; lv_obj_set_style_height &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> statusbar.o(i._ZN35_INTERNAL_13_StatusBar_cpp_381581c220StatusBar_AnimCreateEP9_lv_obj_t)
</UL>
<P><STRONG><a name="[4d1]"></a>[local to StartupView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, startupview.o(i._ZN37_INTERNAL_15_StartupView_cpp_6896854213lv_color_makeEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to StartupView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[454]"></a>[local to StartupView_cpp]::lv_obj_center(_lv_obj_t*)</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startupview.o(i._ZN37_INTERNAL_15_StartupView_cpp_6896854213lv_obj_centerEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = [local to StartupView_cpp]::lv_obj_center(_lv_obj_t*) &rArr; lv_obj_align &rArr; lv_obj_set_pos &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[410]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align
</UL>
<BR>[Called By]<UL><LI><a href="#[4d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::StartupView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[45d]"></a>[local to DialplateView_cpp]::lv_color_hex(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, dialplateview.o(i._ZN39_INTERNAL_17_DialplateView_cpp_ef33934712lv_color_hexEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to DialplateView_cpp]::lv_color_hex(unsigned) &rArr; [local to DialplateView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
</UL>

<P><STRONG><a name="[45e]"></a>[local to DialplateView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, dialplateview.o(i._ZN39_INTERNAL_17_DialplateView_cpp_ef33934713lv_color_makeEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to DialplateView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[45f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_white()
<LI><a href="#[45d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_hex(unsigned)
</UL>

<P><STRONG><a name="[45f]"></a>[local to DialplateView_cpp]::lv_color_white()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, dialplateview.o(i._ZN39_INTERNAL_17_DialplateView_cpp_ef33934714lv_color_whiteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to DialplateView_cpp]::lv_color_white() &rArr; [local to DialplateView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[45e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to DialplateView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[460]"></a>[local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, dialplateview.o(i._ZN39_INTERNAL_17_DialplateView_cpp_ef33934723lv_obj_remove_style_allEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = [local to DialplateView_cpp]::lv_obj_remove_style_all(_lv_obj_t*) &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[516]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::SubInfoGrp_Create(_lv_obj_t*, Page::DialplateView::SubInfo_t*, const char*)
<LI><a href="#[513]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BottomInfo_Create(_lv_obj_t*)
<LI><a href="#[50f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::TopInfo_Create(_lv_obj_t*)
<LI><a href="#[50e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::BtnCont_Create(_lv_obj_t*)
<LI><a href="#[509]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Btn_Create(_lv_obj_t*, const void*, short)
<LI><a href="#[517]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::DialplateView::Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[c1]"></a>Page::LiveMap::onViewLoad()::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, livemap.o(i._ZZN4Page7LiveMap10onViewLoadEvENUlP16TrackPointFilterPKNS1_7Point_tEE_4_FUNES2_S5_))
<BR><BR>[Stack]<UL><LI>Max Depth = 788 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::onViewLoad()::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*) &rArr; Page::LiveMap::TrackLineAppendToEnd(int, int) &rArr; lv_poly_line::append_to_end(const lv_point_t*) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::push_back(const lv_point_t&) &rArr; std::vector&lang;lv_point_t, std::allocator&lang;lv_point_t&rang;&rang;::_C_insert_aux(lv_point_t*, const lv_point_t&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[54a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::TrackLineAppendToEnd(int, int)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(i._ZN4Page7LiveMap10onViewLoadEv)
</UL>
<P><STRONG><a name="[c4]"></a>Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, livemap.o(i._ZZN4Page7LiveMap15TrackLineReloadEPKN15TrackLineFilter6Area_tEiiENUlP16TrackPointFilterPKNS5_7Point_tEE_4_FUNES6_S9_))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = Page::LiveMap::TrackLineReload(const TrackLineFilter::Area_t*, int, int)::[lambda(TrackPointFilter*, const TrackPointFilter::Point_t*) (instance 1)]::_FUN(TrackPointFilter*, const TrackPointFilter::Point_t*) &rArr; TrackLineFilter::PushPoint(int, int) &rArr; TrackLineFilter::PushPoint(const TrackLineFilter::Point_t*) &rArr; TrackLineFilter::OutputPoint(const TrackLineFilter::Point_t*) &rArr; TrackLineFilter::SendEvent(TrackLineFilter::EventCode_t, const TrackLineFilter::Point_t*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TrackLineFilter::PushPoint(int, int)
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(i._ZN4Page7LiveMap15TrackLineReloadEPKN15TrackLineFilter6Area_tEii)
</UL>
<P><STRONG><a name="[c5]"></a>Page::LiveMap::onViewDidAppear()::[lambda(_lv_timer_t*) (instance 1)]::_FUN(_lv_timer_t*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, livemap.o(i._ZZN4Page7LiveMap15onViewDidAppearEvENUlP11_lv_timer_tE_4_FUNES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 656 + Unknown Stack Size
<LI>Call Chain = Page::LiveMap::onViewDidAppear()::[lambda(_lv_timer_t*) (instance 1)]::_FUN(_lv_timer_t*) &rArr; Page::LiveMap::Update() &rArr; Page::LiveMap::SportInfoUpdate() &rArr; lv_label_set_text_fmt &rArr; _lv_txt_set_text_vfmt &rArr; lv_vsnprintf &rArr; _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[54b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMap::Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> livemap.o(i._ZN4Page7LiveMap15onViewDidAppearEv)
</UL>
<P><STRONG><a name="[450]"></a>[local to LiveMapView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, livemapview.o(i._ZN37_INTERNAL_15_LiveMapView_cpp_76fd96df13lv_color_makeEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to LiveMapView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
<LI><a href="#[451]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_white()
<LI><a href="#[44f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_black()
</UL>

<P><STRONG><a name="[44f]"></a>[local to LiveMapView_cpp]::lv_color_black()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, livemapview.o(i._ZN37_INTERNAL_15_LiveMapView_cpp_76fd96df14lv_color_blackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to LiveMapView_cpp]::lv_color_black() &rArr; [local to LiveMapView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[451]"></a>[local to LiveMapView_cpp]::lv_color_white()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, livemapview.o(i._ZN37_INTERNAL_15_LiveMapView_cpp_76fd96df14lv_color_whiteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to LiveMapView_cpp]::lv_color_white() &rArr; [local to LiveMapView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[450]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to LiveMapView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Style_Create()
</UL>

<P><STRONG><a name="[452]"></a>[local to LiveMapView_cpp]::lv_obj_get_style_width(const _lv_obj_t*, unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, livemapview.o(i._ZN37_INTERNAL_15_LiveMapView_cpp_76fd96df22lv_obj_get_style_widthEPK9_lv_obj_tj))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = [local to LiveMapView_cpp]::lv_obj_get_style_width(const _lv_obj_t*, unsigned) &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
</UL>

<P><STRONG><a name="[453]"></a>[local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, livemapview.o(i._ZN37_INTERNAL_15_LiveMapView_cpp_76fd96df23lv_obj_remove_style_allEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = [local to LiveMapView_cpp]::lv_obj_remove_style_all(_lv_obj_t*) &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
</UL>
<BR>[Called By]<UL><LI><a href="#[4cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Create(_lv_obj_t*, unsigned)
<LI><a href="#[4c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::SportInfo_Create(_lv_obj_t*)
<LI><a href="#[4c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::ZoomCtrl_Create(_lv_obj_t*)
<LI><a href="#[4b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Track_Create(_lv_obj_t*)
<LI><a href="#[4b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::LiveMapView::Map_Create(_lv_obj_t*, unsigned)
</UL>

<P><STRONG><a name="[4ae]"></a>[local to SystemInfosView_cpp]::lv_color_hex(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, systeminfosview.o(i._ZN41_INTERNAL_19_SystemInfosView_cpp_a9e948da12lv_color_hexEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to SystemInfosView_cpp]::lv_color_hex(unsigned) &rArr; [local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[4af]"></a>[local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, systeminfosview.o(i._ZN41_INTERNAL_19_SystemInfosView_cpp_a9e948da13lv_color_makeEhhh))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = [local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_white()
<LI><a href="#[4b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_black()
<LI><a href="#[4ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_hex(unsigned)
</UL>

<P><STRONG><a name="[4b0]"></a>[local to SystemInfosView_cpp]::lv_color_black()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, systeminfosview.o(i._ZN41_INTERNAL_19_SystemInfosView_cpp_a9e948da14lv_color_blackEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to SystemInfosView_cpp]::lv_color_black() &rArr; [local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[4dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Create(_lv_obj_t*)
<LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[4b1]"></a>[local to SystemInfosView_cpp]::lv_color_white()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, systeminfosview.o(i._ZN41_INTERNAL_19_SystemInfosView_cpp_a9e948da14lv_color_whiteEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = [local to SystemInfosView_cpp]::lv_color_white() &rArr; [local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[4af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to SystemInfosView_cpp]::lv_color_make(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[524]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Page::SystemInfosView::Style_Init()
</UL>

<P><STRONG><a name="[36e]"></a>[local to ResourcePool_cpp]::Resource_Init()</STRONG> (Thumb, 332 bytes, Stack size 8 bytes, resourcepool.o(i._ZN38_INTERNAL_16_ResourcePool_cpp_3959e92913Resource_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 748 + Unknown Stack Size
<LI>Call Chain = [local to ResourcePool_cpp]::Resource_Init() &rArr; ResourceManager::AddResource(const char*, void*) &rArr; std::vector&lang;ResourceManager::ResourceNode, std::allocator&lang;ResourceManager::ResourceNode&rang;&rang;::_C_insert_aux(ResourceManager::ResourceNode*, const ResourceManager::ResourceNode&) &rArr; __rw::__rw_allocate(unsigned, int) &rArr; __rw::__rw_throw(int, ...) &rArr; std::__rw_exception::_C_vformat(int, std::__va_list) &rArr; [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::AddResource(const char*, void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourcePool::Init()
</UL>

<P><STRONG><a name="[175]"></a>__sti___16_ResourcePool_cpp_3959e929</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, resourcepool.o(i.__sti___16_ResourcePool_cpp_3959e929))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___16_ResourcePool_cpp_3959e929 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[61b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ResourceManager::ResourceManager()
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> resourcepool.o(.init_array)
</UL>
<P><STRONG><a name="[268]"></a>[local to GPS_Transform_c]::transformLat(double, double)</STRONG> (Thumb, 620 bytes, Stack size 80 bytes, gps_transform.o(i._ZN37_INTERNAL_15_GPS_Transform_c_49f8fa3d12transformLatEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = [local to GPS_Transform_c]::transformLat(double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
</UL>

<P><STRONG><a name="[269]"></a>[local to GPS_Transform_c]::transformLon(double, double)</STRONG> (Thumb, 604 bytes, Stack size 80 bytes, gps_transform.o(i._ZN37_INTERNAL_15_GPS_Transform_c_49f8fa3d12transformLonEdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = [local to GPS_Transform_c]::transformLon(double, double) &rArr; __hardfp_sin &rArr; __ieee754_rem_pio2 &rArr; __aeabi_dmul
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sqrt
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_sin
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPS_Transform
</UL>

<P><STRONG><a name="[3e5]"></a>[local to TileSystem_cpp]::Clip(double, double, double)</STRONG> (Thumb, 64 bytes, Stack size 40 bytes, tilesystem.o(i._ZN36_INTERNAL_14_TileSystem_cpp_f1c413004ClipEddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = [local to TileSystem_cpp]::Clip(double, double, double) &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Microsoft_MapPoint::TileSystem::LatLongToPixelXY(double, double, int, int*, int*)
</UL>

<P><STRONG><a name="[1d]"></a>first_alloc(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, new.o(i._Z11first_allocj))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = first_alloc(unsigned) &rArr; lv_init &rArr; lv_extra_init &rArr; lv_flex_init &rArr; lv_layout_register &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_is_initialized
</UL>
<BR>[Address Reference Count : 1]<UL><LI> new.o(.data)
</UL>
<P><STRONG><a name="[a9]"></a>PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 2)]::_FUN(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPvE0_4_FUNES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 2)]::_FUN(void*) &rArr; lv_obj_get_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
</UL>
<P><STRONG><a name="[ab]"></a>PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 3)]::_FUN(void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPvE1_4_FUNES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 3)]::_FUN(void*) &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
</UL>
<P><STRONG><a name="[a7]"></a>PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 1)]::_FUN(void*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPvE_4_FUNES2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*) (instance 1)]::_FUN(void*) &rArr; lv_obj_get_x &rArr; lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
</UL>
<P><STRONG><a name="[a8]"></a>PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 2)]::_FUN(void*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPviE0_4_FUNES2_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 2)]::_FUN(void*, int) &rArr; lv_obj_set_y &rArr; lv_obj_set_style_y &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_y
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
</UL>
<P><STRONG><a name="[aa]"></a>PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 3)]::_FUN(void*, int)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPviE1_4_FUNES2_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 3)]::_FUN(void*, int) &rArr; lv_obj_set_style_bg_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_bg_opa
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
</UL>
<P><STRONG><a name="[a6]"></a>PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pm_anim.o(i._ZZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tEENUlPviE_4_FUNES2_i))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = PageManager::GetLoadAnimAttr(unsigned char, PageManager::LoadAnimAttr_t*)::[lambda(void*, int) (instance 1)]::_FUN(void*, int) &rArr; lv_obj_set_x &rArr; lv_obj_set_style_x &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[5fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_x
</UL>
<BR>[Address Reference Count : 1]<UL><LI> pm_anim.o(i._ZN11PageManager15GetLoadAnimAttrEhPNS_14LoadAnimAttr_tE)
</UL>
<P><STRONG><a name="[357]"></a>[local to PM_Router_cpp]::lv_obj_move_foreground(_lv_obj_t*)</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, pm_router.o(i._ZN35_INTERNAL_13_PM_Router_cpp_987e782b22lv_obj_move_foregroundEP9_lv_obj_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to PM_Router_cpp]::lv_obj_move_foreground(_lv_obj_t*) &rArr; lv_obj_move_to_index &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[401]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to_index
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
</UL>
<BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PageManager::SwitchTo(PageBase*, bool, const PageBase::Stash_t*)
</UL>

<P><STRONG><a name="[ba]"></a>[local to HAL_cpp]::HAL_InterrputUpdate()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, hal.o(i._ZN28_INTERNAL_7_HAL_cpp_dbacc59d19HAL_InterrputUpdateEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = [local to HAL_cpp]::HAL_InterrputUpdate() &rArr; HAL::Power_Update() &rArr; HAL::Power_Shutdown() &rArr; HAL::Backlight_SetGradual(unsigned short, unsigned short) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[3e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_Update()
<LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Update()
<LI><a href="#[3ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_Update()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal.o(i._ZN3HAL8HAL_InitEv)
</UL>
<P><STRONG><a name="[b4]"></a>HAL::Audio_Init()::[lambda(unsigned, unsigned short) (instance 1)]::_FUN(unsigned, unsigned short)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, hal_audio.o(i._ZZN3HAL10Audio_InitEvENUljtE_4_FUNEjt))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = HAL::Audio_Init()::[lambda(unsigned, unsigned short) (instance 1)]::_FUN(unsigned, unsigned short) &rArr; HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_Tone(unsigned, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_audio.o(i._ZN3HAL10Audio_InitEv)
</UL>
<P><STRONG><a name="[176]"></a>__sti___13_HAL_Audio_cpp_0a059262</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_audio.o(i.__sti___13_HAL_Audio_cpp_0a059262))
<BR><BR>[Calls]<UL><LI><a href="#[619]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TonePlayer::TonePlayer()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_audio.o(.init_array)
</UL>
<P><STRONG><a name="[b8]"></a>[local to HAL_Backlight_cpp]::Backlight_AnimCallback(void*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_backlight.o(i._ZN39_INTERNAL_17_HAL_Backlight_cpp_fb36bc6522Backlight_AnimCallbackEPvi))
<BR><BR>[Calls]<UL><LI><a href="#[461]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Backlight_SetValue(short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_backlight.o(i._ZN3HAL20Backlight_SetGradualEtt)
</UL>
<P><STRONG><a name="[43c]"></a>[local to HAL_Display_cpp]::Display_SPI_DMA_Init()</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, hal_display.o(i._ZN37_INTERNAL_15_HAL_Display_cpp_6b788b1420Display_SPI_DMA_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = [local to HAL_Display_cpp]::Display_SPI_DMA_Init() &rArr; DMA_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[441]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_I2S_DMAEnable
<LI><a href="#[43d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[43e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Reset
<LI><a href="#[440]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_Init
<LI><a href="#[442]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_INTConfig
<LI><a href="#[43f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_DefaultInitParaConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[47d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_Init()
</UL>

<P><STRONG><a name="[24f]"></a>[local to HAL_Display_cpp]::Display_SPI_DMA_Send(const void*, unsigned)</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, hal_display.o(i._ZN37_INTERNAL_15_HAL_Display_cpp_6b788b1420Display_SPI_DMA_SendEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = [local to HAL_Display_cpp]::Display_SPI_DMA_Send(const void*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[443]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA_ChannelEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_SendPixels(unsigned short*, unsigned)
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DMA1_Channel3_IRQHandler
</UL>

<P><STRONG><a name="[177]"></a>__sti___15_HAL_Display_cpp_6b788b14</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, hal_display.o(i.__sti___15_HAL_Display_cpp_6b788b14))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __sti___15_HAL_Display_cpp_6b788b14 &rArr; Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char) &rArr; Adafruit_GFX::Adafruit_GFX__sub_object(short, short)
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Adafruit_ST7789::Adafruit_ST7789(unsigned char, unsigned char, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_display.o(.init_array)
</UL>
<P><STRONG><a name="[444]"></a>[local to HAL_Encoder_cpp]::Buzz_Handler(int)</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, hal_encoder.o(i._ZN37_INTERNAL_15_HAL_Encoder_cpp_1362964a12Buzz_HandlerEi))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = [local to HAL_Encoder_cpp]::Buzz_Handler(int) &rArr; HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_Tone(unsigned, int)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Encoder_EventHandler_B()
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Encoder_EventHandler_A()
</UL>

<P><STRONG><a name="[b7]"></a>[local to HAL_Encoder_cpp]::Encoder_PushHandler(ButtonEvent*, int)</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, hal_encoder.o(i._ZN37_INTERNAL_15_HAL_Encoder_cpp_1362964a19Encoder_PushHandlerEP11ButtonEventi))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = [local to HAL_Encoder_cpp]::Encoder_PushHandler(ButtonEvent*, int) &rArr; HAL::Power_Shutdown() &rArr; HAL::Backlight_SetGradual(unsigned short, unsigned short) &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_PlayMusic(const char*)
<LI><a href="#[446]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Shutdown()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_encoder.o(i._ZN3HAL12Encoder_InitEv)
</UL>
<P><STRONG><a name="[b5]"></a>[local to HAL_Encoder_cpp]::Encoder_EventHandler_A()</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, hal_encoder.o(i._ZN37_INTERNAL_15_HAL_Encoder_cpp_1362964a22Encoder_EventHandler_AEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to HAL_Encoder_cpp]::Encoder_EventHandler_A() &rArr; [local to HAL_Encoder_cpp]::Buzz_Handler(int) &rArr; HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Buzz_Handler(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_encoder.o(i._ZN3HAL12Encoder_InitEv)
</UL>
<P><STRONG><a name="[b6]"></a>[local to HAL_Encoder_cpp]::Encoder_EventHandler_B()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, hal_encoder.o(i._ZN37_INTERNAL_15_HAL_Encoder_cpp_1362964a22Encoder_EventHandler_BEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = [local to HAL_Encoder_cpp]::Encoder_EventHandler_B() &rArr; [local to HAL_Encoder_cpp]::Buzz_Handler(int) &rArr; HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[447]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;digitalRead
<LI><a href="#[444]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to HAL_Encoder_cpp]::Buzz_Handler(int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_encoder.o(i._ZN3HAL12Encoder_InitEv)
</UL>
<P><STRONG><a name="[178]"></a>__sti___15_HAL_Encoder_cpp_1362964a</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, hal_encoder.o(i.__sti___15_HAL_Encoder_cpp_1362964a))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __sti___15_HAL_Encoder_cpp_1362964a &rArr; ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short) &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ButtonEvent::ButtonEvent(unsigned short, unsigned short, unsigned short)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_encoder.o(.init_array)
</UL>
<P><STRONG><a name="[179]"></a>__sti___11_HAL_GPS_cpp_3487eba5</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_gps.o(i.__sti___11_HAL_GPS_cpp_3487eba5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __sti___11_HAL_GPS_cpp_3487eba5 &rArr; TinyGPSPlus::TinyGPSPlus()
</UL>
<BR>[Calls]<UL><LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TinyGPSPlus::TinyGPSPlus()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_gps.o(.init_array)
</UL>
<P><STRONG><a name="[17a]"></a>__sti___11_HAL_MAG_cpp_60ef128f</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, hal_mag.o(i.__sti___11_HAL_MAG_cpp_60ef128f))
<BR><BR>[Calls]<UL><LI><a href="#[618]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LIS3MDL::LIS3MDL()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_mag.o(.init_array)
</UL>
<P><STRONG><a name="[3f5]"></a>[local to HAL_Power_cpp]::Power_ADC_Init()</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, hal_power.o(i._ZN35_INTERNAL_13_HAL_Power_cpp_1cf242bb14Power_ADC_InitEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = [local to HAL_Power_cpp]::Power_ADC_Init() &rArr; ADC_Reset
</UL>
<BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[3f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
<LI><a href="#[3f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[3fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCalibration
<LI><a href="#[3fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_RstCalibration
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Reset
<LI><a href="#[3f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[3fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetResetCalibrationStatus
<LI><a href="#[3fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationStatus
<LI><a href="#[3fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Ctrl
<LI><a href="#[3f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[473]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Power_Init()
</UL>

<P><STRONG><a name="[448]"></a>[local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*)</STRONG> (Thumb, 86 bytes, Stack size 56 bytes, hal_sd_card.o(i._ZN37_INTERNAL_15_HAL_SD_CARD_cpp_8fe448c011SD_CheckDirEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 644 + Unknown Stack Size
<LI>Call Chain = [local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[44a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::printf(const char*, ...)
<LI><a href="#[44c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Print::println(const char*)
<LI><a href="#[44b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::mkdir(FatFile*, const char*, bool)
<LI><a href="#[449]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, const char*, unsigned char)
</UL>
<BR>[Called By]<UL><LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
</UL>

<P><STRONG><a name="[b9]"></a>[local to HAL_SD_CARD_cpp]::SD_GetDateTime(unsigned short*, unsigned short*)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, hal_sd_card.o(i._ZN37_INTERNAL_15_HAL_SD_CARD_cpp_8fe448c014SD_GetDateTimeEPtS0_))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = [local to HAL_SD_CARD_cpp]::SD_GetDateTime(unsigned short*, unsigned short*) &rArr; HAL::Clock_GetInfo(HAL::Clock_Info_t*) &rArr; RTC_Get &rArr; RTC_Get_Week
</UL>
<BR>[Calls]<UL><LI><a href="#[3f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Clock_GetInfo(HAL::Clock_Info_t*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sd_card.o(i._ZN3HAL7SD_InitEv)
</UL>
<P><STRONG><a name="[44d]"></a>[local to HAL_SD_CARD_cpp]::SD_Check(bool)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, hal_sd_card.o(i._ZN37_INTERNAL_15_HAL_SD_CARD_cpp_8fe448c08SD_CheckEb))
<BR><BR>[Stack]<UL><LI>Max Depth = 692 + Unknown Stack Size
<LI>Call Chain = [local to HAL_SD_CARD_cpp]::SD_Check(bool) &rArr; HAL::SD_Init() &rArr; [local to HAL_SD_CARD_cpp]::SD_CheckDir(const char*) &rArr; FatFile::mkdir(FatFile*, const char*, bool) &rArr; FatFile::mkdir(FatFile*, fname_t*) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[445]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Audio_PlayMusic(const char*)
<LI><a href="#[44e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Init()
</UL>
<BR>[Called By]<UL><LI><a href="#[46d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_Update()
</UL>

<P><STRONG><a name="[17b]"></a>__sti___15_HAL_SD_CARD_cpp_8fe448c0</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, hal_sd_card.o(i.__sti___15_HAL_SD_CARD_cpp_8fe448c0))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __sti___15_HAL_SD_CARD_cpp_8fe448c0
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hal_sd_card.o(.init_array)
</UL>
<P><STRONG><a name="[703]"></a>event_send_core</STRONG> (Thumb, 176 bytes, Stack size 24 bytes, lv_event.o(i.event_send_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + In Cycle
<LI>Call Chain = event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[704]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_event_dsc
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>
<BR>[Called By]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>

<P><STRONG><a name="[704]"></a>lv_obj_get_event_dsc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lv_event.o(i.lv_obj_get_event_dsc))
<BR><BR>[Called By]<UL><LI><a href="#[703]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;event_send_core
</UL>

<P><STRONG><a name="[711]"></a>focus_next_core</STRONG> (Thumb, 194 bytes, Stack size 32 bytes, lv_group.o(i.focus_next_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[712]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_state
<LI><a href="#[713]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_indev
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>

<P><STRONG><a name="[713]"></a>get_indev</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_group.o(i.get_indev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = get_indev
</UL>
<BR>[Calls]<UL><LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
</UL>
<BR>[Called By]<UL><LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[558]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_all_objs
<LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[711]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;focus_next_core
</UL>

<P><STRONG><a name="[767]"></a>lv_group_refocus</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, lv_group.o(i.lv_group_refocus))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = lv_group_refocus &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[522]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_add_obj
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
</UL>

<P><STRONG><a name="[71f]"></a>indev_button_proc</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, lv_indev.o(i.indev_button_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = indev_button_proc &rArr; indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[723]"></a>indev_click_focus</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lv_indev.o(i.indev_click_focus))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = indev_click_focus &rArr; lv_group_focus_obj &rArr; lv_group_set_editing &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[523]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_obj
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[725]"></a>indev_encoder_proc</STRONG> (Thumb, 782 bytes, Stack size 32 bytes, lv_indev.o(i.indev_encoder_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = indev_encoder_proc &rArr; lv_obj_clear_state &rArr; lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[729]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_obj_count
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[72c]"></a>indev_gesture</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lv_indev.o(i.indev_gesture))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = indev_gesture &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
</UL>
<BR>[Called By]<UL><LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>

<P><STRONG><a name="[72d]"></a>indev_keypad_proc</STRONG> (Thumb, 412 bytes, Stack size 24 bytes, lv_indev.o(i.indev_keypad_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = indev_keypad_proc &rArr; lv_group_focus_prev &rArr; focus_next_core &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[531]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_focused
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[726]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_send_data
<LI><a href="#[72a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_prev
<LI><a href="#[72b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_focus_next
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[72e]"></a>indev_pointer_proc</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, lv_indev.o(i.indev_pointer_proc))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = indev_pointer_proc &rArr; indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[4b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_pos
<LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[722]"></a>indev_proc_press</STRONG> (Thumb, 474 bytes, Stack size 24 bytes, lv_indev.o(i.indev_proc_press))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = indev_proc_press &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[730]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_search_obj
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[720]"></a>indev_proc_release</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lv_indev.o(i.indev_proc_release))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = indev_proc_release &rArr; _lv_indev_scroll_throw_handler &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[721]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_reset_check
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[72e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_pointer_proc
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[777]"></a>indev_proc_reset_query_handler</STRONG> (Thumb, 54 bytes, Stack size 0 bytes, lv_indev.o(i.indev_proc_reset_query_handler))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_read_timer_cb
</UL>

<P><STRONG><a name="[721]"></a>indev_reset_check</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_indev.o(i.indev_reset_check))
<BR><BR>[Called By]<UL><LI><a href="#[720]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_release
<LI><a href="#[722]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_proc_press
<LI><a href="#[72d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_keypad_proc
<LI><a href="#[72c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_gesture
<LI><a href="#[725]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_encoder_proc
<LI><a href="#[723]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_click_focus
<LI><a href="#[71f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;indev_button_proc
</UL>

<P><STRONG><a name="[658]"></a>elastic_diff</STRONG> (Thumb, 388 bytes, Stack size 56 bytes, lv_indev_scroll.o(i.elastic_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = elastic_diff &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[654]"></a>find_scroll_obj</STRONG> (Thumb, 420 bytes, Stack size 56 bytes, lv_indev_scroll.o(i.find_scroll_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = find_scroll_obj &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[662]"></a>find_snap_point_x</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, lv_indev_scroll.o(i.find_snap_point_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = find_snap_point_x &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[702]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[701]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[661]"></a>find_snap_point_y</STRONG> (Thumb, 270 bytes, Stack size 64 bytes, lv_indev_scroll.o(i.find_snap_point_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = find_snap_point_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[6ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[700]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[655]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_scroll_limits
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[655]"></a>init_scroll_limits</STRONG> (Thumb, 328 bytes, Stack size 32 bytes, lv_indev_scroll.o(i.init_scroll_limits))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = init_scroll_limits &rArr; find_snap_point_y &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
</UL>

<P><STRONG><a name="[700]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[701]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[702]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[662]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_x
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[6ff]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_indev_scroll.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[661]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_snap_point_y
<LI><a href="#[658]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;elastic_diff
</UL>

<P><STRONG><a name="[65c]"></a>scroll_limit_diff</STRONG> (Thumb, 98 bytes, Stack size 12 bytes, lv_indev_scroll.o(i.scroll_limit_diff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = scroll_limit_diff
</UL>
<BR>[Called By]<UL><LI><a href="#[653]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_handler
<LI><a href="#[65d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_indev_scroll_throw_handler
</UL>

<P><STRONG><a name="[6f8]"></a>draw_scrollbar</STRONG> (Thumb, 162 bytes, Stack size 152 bytes, lv_obj.o(i.draw_scrollbar))
<BR><BR>[Stack]<UL><LI>Max Depth = 1260<LI>Call Chain = draw_scrollbar &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[7b5]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[112]"></a>lv_obj_constructor</STRONG> (Thumb, 116 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = lv_obj_constructor &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.constdata)
</UL>
<P><STRONG><a name="[113]"></a>lv_obj_destructor</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, lv_obj.o(i.lv_obj_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = lv_obj_destructor &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[769]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_remove_obj
<LI><a href="#[7af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_event_mark_deleted
<LI><a href="#[7a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_enable_style_refresh
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.constdata)
</UL>
<P><STRONG><a name="[7b0]"></a>lv_obj_draw</STRONG> (Thumb, 672 bytes, Stack size 184 bytes, lv_obj.o(i.lv_obj_draw))
<BR><BR>[Stack]<UL><LI>Max Depth = 1444<LI>Call Chain = lv_obj_draw &rArr; draw_scrollbar &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[75e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_custom
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[7b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_clip_corner
<LI><a href="#[7b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_border_post
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
<LI><a href="#[7b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[114]"></a>lv_obj_event</STRONG> (Thumb, 768 bytes, Stack size 24 bytes, lv_obj.o(i.lv_obj_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1468<LI>Call Chain = lv_obj_event &rArr; lv_obj_draw &rArr; draw_scrollbar &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[532]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_y
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_scroll_obj
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[7bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_indev
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
<LI><a href="#[794]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_mark_layout_as_dirty
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[7be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[7bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_align
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[727]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_editable
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj.o(.constdata)
</UL>
<P><STRONG><a name="[7bd]"></a>lv_obj_get_style_align</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_align &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[7b7]"></a>lv_obj_get_style_bg_opa</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_bg_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_bg_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[7b2]"></a>lv_obj_get_style_border_post</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_border_post))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_border_post &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[7b1]"></a>lv_obj_get_style_clip_corner</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_clip_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_clip_corner &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[7be]"></a>lv_obj_get_style_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event
</UL>

<P><STRONG><a name="[7b8]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[7b6]"></a>lv_obj_get_style_radius</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_radius &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scrollbar_init_draw_dsc
<LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[7b4]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[7b3]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj.o(i.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw
</UL>

<P><STRONG><a name="[795]"></a>lv_obj_set_state</STRONG> (Thumb, 500 bytes, Stack size 72 bytes, lv_obj.o(i.lv_obj_set_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = lv_obj_set_state &rArr; _lv_obj_style_create_transition &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[7e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_state
<LI><a href="#[7ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_style_get_selector_part
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[671]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_state_compare
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>
<BR>[Called By]<UL><LI><a href="#[54d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_state
<LI><a href="#[4c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_state
</UL>

<P><STRONG><a name="[6fa]"></a>scrollbar_init_draw_dsc</STRONG> (Thumb, 252 bytes, Stack size 24 bytes, lv_obj.o(i.scrollbar_init_draw_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = scrollbar_init_draw_dsc &rArr; lv_obj_get_style_radius &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[7b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_radius
<LI><a href="#[7b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_opa
<LI><a href="#[7b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_bg_opa
</UL>
<BR>[Called By]<UL><LI><a href="#[6f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_scrollbar
</UL>

<P><STRONG><a name="[7aa]"></a>lv_obj_construct</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lv_obj_class.o(i.lv_obj_construct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = lv_obj_construct &rArr;  lv_obj_construct (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
</UL>
<BR>[Called By]<UL><LI><a href="#[7aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_construct
<LI><a href="#[76c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_class_init_obj
</UL>

<P><STRONG><a name="[7cd]"></a>lv_obj_get_style_blend_mode</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_blend_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_blend_mode &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[7cf]"></a>lv_obj_get_style_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[7a6]"></a>lv_obj_get_style_outline_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_outline_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_outline_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7a7]"></a>lv_obj_get_style_outline_pad</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_outline_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_outline_pad &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7a5]"></a>lv_obj_get_style_outline_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_outline_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_outline_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7a3]"></a>lv_obj_get_style_shadow_ofs_x</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_shadow_ofs_x))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_shadow_ofs_x &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7a4]"></a>lv_obj_get_style_shadow_ofs_y</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_shadow_ofs_y))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_shadow_ofs_y &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7a1]"></a>lv_obj_get_style_shadow_opa</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_shadow_opa))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_shadow_opa &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7a2]"></a>lv_obj_get_style_shadow_spread</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_shadow_spread))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_shadow_spread &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7a0]"></a>lv_obj_get_style_shadow_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_draw.o(i.lv_obj_get_style_shadow_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_shadow_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
</UL>

<P><STRONG><a name="[7d5]"></a>lv_obj_get_style_text_color_filtered</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_draw.o(i.lv_obj_get_style_text_color_filtered))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_get_style_text_color_filtered &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[7d6]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_draw.o(i.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
</UL>

<P><STRONG><a name="[69c]"></a>calc_auto_size</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, lv_obj_pos.o(i.calc_auto_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = calc_auto_size &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
</UL>

<P><STRONG><a name="[732]"></a>layout_update_core</STRONG> (Thumb, 102 bytes, Stack size 16 bytes, lv_obj_pos.o(i.layout_update_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 412 + In Cycle
<LI>Call Chain = layout_update_core &rArr;  layout_update_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
<LI><a href="#[734]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_layout
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>
<BR>[Called By]<UL><LI><a href="#[50d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_update_layout
<LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
</UL>

<P><STRONG><a name="[79f]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_obj_pos.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[79c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_area_is_visible
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>

<P><STRONG><a name="[79b]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[733]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_pos
</UL>

<P><STRONG><a name="[798]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[7ce]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
</UL>

<P><STRONG><a name="[734]"></a>lv_obj_get_style_layout</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_layout))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[732]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;layout_update_core
<LI><a href="#[793]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_is_layout_positioned
</UL>

<P><STRONG><a name="[7c0]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[799]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[5f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_x
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[7bf]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[79a]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[4d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_y
<LI><a href="#[412]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_align_to
<LI><a href="#[7da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_to
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
</UL>

<P><STRONG><a name="[7d9]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_pos.o(i.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
</UL>

<P><STRONG><a name="[7c7]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_readjust_scroll
<LI><a href="#[7ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_x
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[7c5]"></a>lv_obj_get_style_border_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.lv_obj_get_style_border_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_border_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[7c4]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[7c9]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[7c8]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
</UL>

<P><STRONG><a name="[7c3]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[7e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_area_into_view
<LI><a href="#[6f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scrollbar_area
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>

<P><STRONG><a name="[105]"></a>scroll_anim_ready_cb</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_obj_scroll.o(i.scroll_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = scroll_anim_ready_cb &rArr; lv_event_send &rArr; event_send_core &rArr;  event_send_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
</UL>
<P><STRONG><a name="[7e1]"></a>scroll_area_into_view</STRONG> (Thumb, 600 bytes, Stack size 96 bytes, lv_obj_scroll.o(i.scroll_area_into_view))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = scroll_area_into_view &rArr; lv_obj_scroll_by &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[660]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_y
<LI><a href="#[65f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_snap_x
<LI><a href="#[65a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_right
<LI><a href="#[65b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_left
<LI><a href="#[659]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_dir
<LI><a href="#[657]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[7bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_to_view_recursive
</UL>

<P><STRONG><a name="[7e0]"></a>scroll_by_raw</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, lv_obj_scroll.o(i.scroll_by_raw))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = scroll_by_raw &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[768]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_allocate_spec_attr
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[52e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_scroll_by
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_y_anim
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_x_anim
</UL>

<P><STRONG><a name="[104]"></a>scroll_x_anim</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.scroll_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = scroll_x_anim &rArr; scroll_by_raw &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(i.lv_obj_scroll_to_x)
<LI> lv_obj_scroll.o(i.scroll_area_into_view)
</UL>
<P><STRONG><a name="[103]"></a>scroll_y_anim</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_obj_scroll.o(i.scroll_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = scroll_y_anim &rArr; scroll_by_raw &rArr; lv_obj_allocate_spec_attr &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[7e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;scroll_by_raw
</UL>
<BR>[Address Reference Count : 3]<UL><LI> lv_obj_scroll.o(i.lv_obj_scroll_by)
<LI> lv_obj_scroll.o(i.lv_obj_scroll_to_y)
<LI> lv_obj_scroll.o(i.scroll_area_into_view)
</UL>
<P><STRONG><a name="[101]"></a>fade_anim_cb</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_obj_style.o(i.fade_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = fade_anim_cb &rArr; lv_obj_set_style_opa &rArr; lv_obj_set_local_style_prop &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[414]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_style_opa
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_obj_style.o(i.lv_obj_fade_in)
<LI> lv_obj_style.o(i.lv_obj_fade_out)
</UL>
<P><STRONG><a name="[102]"></a>fade_in_anim_ready</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_obj_style.o(i.fade_in_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = fade_in_anim_ready &rArr; lv_obj_remove_local_style_prop &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[706]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_local_style_prop
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(i.lv_obj_fade_in)
</UL>
<P><STRONG><a name="[71a]"></a>get_local_style</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, lv_obj_style.o(i.get_local_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_local_style &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[7e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_local_style_prop
</UL>

<P><STRONG><a name="[71b]"></a>get_prop_core</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, lv_obj_style.o(i.get_prop_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = get_prop_core &rArr; lv_style_get_prop
</UL>
<BR>[Calls]<UL><LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[71c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_style_get_prop_group
</UL>
<BR>[Called By]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>

<P><STRONG><a name="[66e]"></a>get_trans_style</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lv_obj_style.o(i.get_trans_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = get_trans_style &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[40b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_init
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
<LI><a href="#[66d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_style_create_transition
</UL>

<P><STRONG><a name="[803]"></a>lv_color_mix</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, lv_obj_style.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_cb
</UL>

<P><STRONG><a name="[7de]"></a>refresh_children_style</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, lv_obj_style.o(i.refresh_children_style))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[7de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;refresh_children_style
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>

<P><STRONG><a name="[de]"></a>trans_anim_cb</STRONG> (Thumb, 288 bytes, Stack size 32 bytes, lv_obj_style.o(i.trans_anim_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = trans_anim_cb &rArr; lv_obj_refresh_style &rArr; refresh_children_style &rArr;  refresh_children_style (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[672]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_get_prop
<LI><a href="#[803]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[797]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(i._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[e0]"></a>trans_anim_ready_cb</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, lv_obj_style.o(i.trans_anim_ready_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = trans_anim_ready_cb &rArr; lv_obj_remove_style &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[804]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_is_empty
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(i._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[df]"></a>trans_anim_start_cb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lv_obj_style.o(i.trans_anim_start_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = trans_anim_start_cb &rArr; trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[66f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_set_prop
<LI><a href="#[796]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_del
<LI><a href="#[66e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_trans_style
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_style.o(i._lv_obj_style_create_transition)
</UL>
<P><STRONG><a name="[796]"></a>trans_del</STRONG> (Thumb, 168 bytes, Stack size 56 bytes, lv_obj_style.o(i.trans_del))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = trans_del &rArr; lv_style_remove_prop &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[7df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_remove_prop
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_tail
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_prev
</UL>
<BR>[Called By]<UL><LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_remove_style
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_style
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;trans_anim_start_cb
</UL>

<P><STRONG><a name="[100]"></a>lv_obj_del_async_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_obj_tree.o(i.lv_obj_del_async_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 316<LI>Call Chain = lv_obj_del_async_cb &rArr; lv_obj_del &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_obj_tree.o(i.lv_obj_del_async)
</UL>
<P><STRONG><a name="[7ad]"></a>obj_del_core</STRONG> (Thumb, 282 bytes, Stack size 24 bytes, lv_obj_tree.o(i.obj_del_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + In Cycle
<LI>Call Chain = obj_del_core &rArr;  obj_del_core (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[718]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_next
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[778]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_reset
<LI><a href="#[6fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_obj_act
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[570]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_realloc
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[800]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_destruct
<LI><a href="#[7c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_index
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>
<BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_del
<LI><a href="#[7ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;obj_del_core
</UL>

<P><STRONG><a name="[6cf]"></a>call_flush_cb</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_refr.o(i.call_flush_cb))
<BR><BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>

<P><STRONG><a name="[63b]"></a>draw_buf_flush</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lv_refr.o(i.draw_buf_flush))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = draw_buf_flush &rArr; draw_buf_rotate &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_flush_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[6ce]"></a>draw_buf_rotate</STRONG> (Thumb, 558 bytes, Stack size 120 bytes, lv_refr.o(i.draw_buf_rotate))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = draw_buf_rotate &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_90_sqr
<LI><a href="#[6d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_180
<LI><a href="#[6cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;call_flush_cb
</UL>
<BR>[Called By]<UL><LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>

<P><STRONG><a name="[6d2]"></a>draw_buf_rotate4</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, lv_refr.o(i.draw_buf_rotate4))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = draw_buf_rotate4
</UL>
<BR>[Called By]<UL><LI><a href="#[6d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate_90_sqr
</UL>

<P><STRONG><a name="[6d0]"></a>draw_buf_rotate_180</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lv_refr.o(i.draw_buf_rotate_180))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = draw_buf_rotate_180
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
</UL>

<P><STRONG><a name="[6d1]"></a>draw_buf_rotate_90_sqr</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lv_refr.o(i.draw_buf_rotate_90_sqr))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = draw_buf_rotate_90_sqr &rArr; draw_buf_rotate4
</UL>
<BR>[Calls]<UL><LI><a href="#[6d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate4
</UL>
<BR>[Called By]<UL><LI><a href="#[6ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_rotate
</UL>

<P><STRONG><a name="[664]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_refr.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[663]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_inv_area
<LI><a href="#[639]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_join_area
</UL>

<P><STRONG><a name="[7ec]"></a>lv_refr_area</STRONG> (Thumb, 342 bytes, Stack size 40 bytes, lv_refr.o(i.lv_refr_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 1236<LI>Call Chain = lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_ver_res
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>
<BR>[Called By]<UL><LI><a href="#[63a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_areas
</UL>

<P><STRONG><a name="[7ed]"></a>lv_refr_area_part</STRONG> (Thumb, 282 bytes, Stack size 88 bytes, lv_refr.o(i.lv_refr_area_part))
<BR><BR>[Stack]<UL><LI>Max Depth = 1196<LI>Call Chain = lv_refr_area_part &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_top
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[731]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set
<LI><a href="#[72f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_layer_sys
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[63b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_buf_flush
</UL>
<BR>[Called By]<UL><LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>

<P><STRONG><a name="[63a]"></a>lv_refr_areas</STRONG> (Thumb, 144 bytes, Stack size 16 bytes, lv_refr.o(i.lv_refr_areas))
<BR><BR>[Stack]<UL><LI>Max Depth = 1252<LI>Call Chain = lv_refr_areas &rArr; lv_refr_area &rArr; lv_refr_area_part &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[7ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[7ee]"></a>lv_refr_get_top_obj</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_get_top_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + In Cycle
<LI>Call Chain = lv_refr_get_top_obj &rArr;  lv_refr_get_top_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[7ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_get_top_obj
<LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[639]"></a>lv_refr_join_area</STRONG> (Thumb, 188 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_join_area))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = lv_refr_join_area &rArr; _lv_area_join
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[7f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_join
<LI><a href="#[7f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_on
<LI><a href="#[664]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_disp_refr_timer
</UL>

<P><STRONG><a name="[7f2]"></a>lv_refr_obj</STRONG> (Thumb, 272 bytes, Stack size 64 bytes, lv_refr.o(i.lv_refr_obj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + In Cycle
<LI>Call Chain = lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[79e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_obj_get_ext_draw_size
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[7ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj_and_children
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>

<P><STRONG><a name="[7ef]"></a>lv_refr_obj_and_children</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lv_refr.o(i.lv_refr_obj_and_children))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = lv_refr_obj_and_children &rArr; lv_refr_obj &rArr;  lv_refr_obj (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_scr_act
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[7f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_obj
</UL>
<BR>[Called By]<UL><LI><a href="#[7ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_refr_area_part
</UL>

<P><STRONG><a name="[67e]"></a>apply_theme</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_theme.o(i.apply_theme))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + In Cycle
<LI>Call Chain = apply_theme &rArr;  apply_theme (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>
<BR>[Called By]<UL><LI><a href="#[7a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_theme_apply
<LI><a href="#[67e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;apply_theme
</UL>

<P><STRONG><a name="[e9]"></a>color_blend_true_color_additive</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lv_draw_blend.o(i.color_blend_true_color_additive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = color_blend_true_color_additive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.map_blended)
<LI> lv_draw_blend.o(i.fill_blended)
</UL>
<P><STRONG><a name="[e8]"></a>color_blend_true_color_subtractive</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lv_draw_blend.o(i.color_blend_true_color_subtractive))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = color_blend_true_color_subtractive &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_draw_blend.o(i.map_blended)
<LI> lv_draw_blend.o(i.fill_blended)
</UL>
<P><STRONG><a name="[632]"></a>fill_blended</STRONG> (Thumb, 302 bytes, Stack size 64 bytes, lv_draw_blend.o(i.fill_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = fill_blended &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[633]"></a>fill_normal</STRONG> (Thumb, 784 bytes, Stack size 72 bytes, lv_draw_blend.o(i.fill_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[708]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_fill
<LI><a href="#[709]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
<LI><a href="#[707]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[631]"></a>fill_set_px</STRONG> (Thumb, 204 bytes, Stack size 72 bytes, lv_draw_blend.o(i.fill_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = fill_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>

<P><STRONG><a name="[707]"></a>lv_color_black</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lv_draw_blend.o(i.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_color_black
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
</UL>

<P><STRONG><a name="[6b5]"></a>lv_color_mix</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, lv_draw_blend.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[637]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;map_normal
<LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
<LI><a href="#[632]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_blended
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_subtractive
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;color_blend_true_color_additive
</UL>

<P><STRONG><a name="[709]"></a>lv_color_mix_premult</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_draw_blend.o(i.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[633]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fill_normal
</UL>

<P><STRONG><a name="[636]"></a>map_blended</STRONG> (Thumb, 344 bytes, Stack size 88 bytes, lv_draw_blend.o(i.map_blended))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = map_blended
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[637]"></a>map_normal</STRONG> (Thumb, 824 bytes, Stack size 64 bytes, lv_draw_blend.o(i.map_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = map_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[635]"></a>map_set_px</STRONG> (Thumb, 274 bytes, Stack size 72 bytes, lv_draw_blend.o(i.map_set_px))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = map_set_px
</UL>
<BR>[Calls]<UL><LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
</UL>
<BR>[Called By]<UL><LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
</UL>

<P><STRONG><a name="[75a]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[75b]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_img.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[74f]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_draw_img.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[75c]"></a>lv_color_mix_premult</STRONG> (Thumb, 118 bytes, Stack size 16 bytes, lv_draw_img.o(i.lv_color_mix_premult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_color_mix_premult
</UL>
<BR>[Called By]<UL><LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
</UL>

<P><STRONG><a name="[759]"></a>lv_draw_map</STRONG> (Thumb, 1320 bytes, Stack size 256 bytes, lv_draw_img.o(i.lv_draw_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 424<LI>Call Chain = lv_draw_map &rArr; _lv_blend_map &rArr; map_blended
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[75c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix_premult
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
<LI><a href="#[64b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_init
<LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
</UL>
<BR>[Called By]<UL><LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[74d]"></a>lv_img_draw_core</STRONG> (Thumb, 440 bytes, Stack size 88 bytes, lv_draw_img.o(i.lv_img_draw_core))
<BR><BR>[Stack]<UL><LI>Max Depth = 996<LI>Call Chain = lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[74e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;show_error
<LI><a href="#[759]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_map
<LI><a href="#[75b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[75a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[773]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_read_line
<LI><a href="#[772]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_close
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[64e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_cache_open
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[64c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_is_chroma_keyed
<LI><a href="#[64d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_has_alpha
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
</UL>

<P><STRONG><a name="[74e]"></a>show_error</STRONG> (Thumb, 78 bytes, Stack size 112 bytes, lv_draw_img.o(i.show_error))
<BR><BR>[Stack]<UL><LI>Max Depth = 908 + In Cycle
<LI>Call Chain = show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[74f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[74d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_draw_core
</UL>

<P><STRONG><a name="[6ec]"></a>draw_letter_normal</STRONG> (Thumb, 612 bytes, Stack size 136 bytes, lv_draw_label.o(i.draw_letter_normal))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = draw_letter_normal &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[754]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_letter
</UL>

<P><STRONG><a name="[753]"></a>hex_char_to_num</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, lv_draw_label.o(i.hex_char_to_num))
<BR><BR>[Called By]<UL><LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[6ed]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_label.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_letter_normal
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[743]"></a>lv_color_black</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_draw_label.o(i.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_black &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[744]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
</UL>

<P><STRONG><a name="[744]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_draw_label.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[743]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>

<P><STRONG><a name="[6ee]"></a>draw_line_hor</STRONG> (Thumb, 482 bytes, Stack size 96 bytes, lv_draw_line.o(i.draw_line_hor))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = draw_line_hor &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[6ef]"></a>draw_line_skew</STRONG> (Thumb, 972 bytes, Stack size 304 bytes, lv_draw_line.o(i.draw_line_skew))
<BR><BR>[Stack]<UL><LI>Max Depth = 476<LI>Call Chain = draw_line_skew &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_hor_res
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_size
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[6f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line_points_init
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[6f2]"></a>draw_line_ver</STRONG> (Thumb, 442 bytes, Stack size 72 bytes, lv_draw_line.o(i.draw_line_ver))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = draw_line_ver &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[62e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_draw_buf
<LI><a href="#[62d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_refr_get_disp_refreshing
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
</UL>

<P><STRONG><a name="[6ad]"></a>circ_calc_aa4</STRONG> (Thumb, 698 bytes, Stack size 104 bytes, lv_draw_mask.o(i.circ_calc_aa4))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_cont
</UL>
<BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
</UL>

<P><STRONG><a name="[6ae]"></a>circ_cont</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_draw_mask.o(i.circ_cont))
<BR><BR>[Called By]<UL><LI><a href="#[6ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;circ_calc_aa4
</UL>

<P><STRONG><a name="[735]"></a>line_mask_flat</STRONG> (Thumb, 340 bytes, Stack size 32 bytes, lv_draw_mask.o(i.line_mask_flat))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = line_mask_flat
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[737]"></a>line_mask_steep</STRONG> (Thumb, 474 bytes, Stack size 40 bytes, lv_draw_mask.o(i.line_mask_steep))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = line_mask_steep
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_line
</UL>

<P><STRONG><a name="[75d]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_mask.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
</UL>

<P><STRONG><a name="[f4]"></a>lv_draw_mask_line</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, lv_draw_mask.o(i.lv_draw_mask_line))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = lv_draw_mask_line &rArr; line_mask_steep
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_line_points_init)
</UL>
<P><STRONG><a name="[f5]"></a>lv_draw_mask_radius</STRONG> (Thumb, 630 bytes, Stack size 48 bytes, lv_draw_mask.o(i.lv_draw_mask_radius))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = lv_draw_mask_radius
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[736]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mask_mix
<LI><a href="#[75d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_draw_mask.o(i.lv_draw_mask_radius_init)
</UL>
<P><STRONG><a name="[736]"></a>mask_mix</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, lv_draw_mask.o(i.mask_mix))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius
<LI><a href="#[737]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_steep
<LI><a href="#[735]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;line_mask_flat
</UL>

<P><STRONG><a name="[6b6]"></a>draw_bg</STRONG> (Thumb, 1064 bytes, Stack size 160 bytes, lv_draw_rect.o(i.draw_bg))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = draw_bg &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[634]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_map
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[6c0]"></a>draw_bg_img</STRONG> (Thumb, 452 bytes, Stack size 80 bytes, lv_draw_rect.o(i.draw_bg_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1092<LI>Call Chain = draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_src_get_type
<LI><a href="#[6c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_get_info
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[6ca]"></a>draw_border</STRONG> (Thumb, 226 bytes, Stack size 48 bytes, lv_draw_rect.o(i.draw_border))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = draw_border &rArr; draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[6cc]"></a>draw_border_simple</STRONG> (Thumb, 306 bytes, Stack size 80 bytes, lv_draw_rect.o(i.draw_border_simple))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = draw_border_simple &rArr; _lv_blend_fill &rArr; fill_normal &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
</UL>

<P><STRONG><a name="[6f7]"></a>draw_outline</STRONG> (Thumb, 218 bytes, Stack size 48 bytes, lv_draw_rect.o(i.draw_outline))
<BR><BR>[Stack]<UL><LI>Max Depth = 528<LI>Call Chain = draw_outline &rArr; draw_border_generic &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border_generic
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[6fb]"></a>draw_shadow</STRONG> (Thumb, 2960 bytes, Stack size 208 bytes, lv_draw_rect.o(i.draw_shadow))
<BR><BR>[Stack]<UL><LI>Max Depth = 568<LI>Call Chain = draw_shadow &rArr; shadow_draw_corner_buf &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_increase
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[62c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_blend_fill
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[6bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[62a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_out
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
<LI><a href="#[6b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_is_any
<LI><a href="#[6bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_apply
</UL>
<BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
</UL>

<P><STRONG><a name="[6bb]"></a>grad_get</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, lv_draw_rect.o(i.grad_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = grad_get &rArr; lv_color_mix
</UL>
<BR>[Calls]<UL><LI><a href="#[71d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[6b7]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_outline
<LI><a href="#[6ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_border
<LI><a href="#[6b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg
</UL>

<P><STRONG><a name="[6c6]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_height))
<BR><BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[6c5]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_draw_rect.o(i.lv_area_get_width))
<BR><BR>[Called By]<UL><LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
<LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
<LI><a href="#[6c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_bg_img
</UL>

<P><STRONG><a name="[745]"></a>lv_color_black</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_draw_rect.o(i.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_black &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[746]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
</UL>

<P><STRONG><a name="[746]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_draw_rect.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[745]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[71d]"></a>lv_color_mix</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, lv_draw_rect.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[6bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grad_get
</UL>

<P><STRONG><a name="[802]"></a>shadow_blur_corner</STRONG> (Thumb, 304 bytes, Stack size 40 bytes, lv_draw_rect.o(i.shadow_blur_corner))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = shadow_blur_corner &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[6fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_draw_corner_buf
</UL>

<P><STRONG><a name="[6fd]"></a>shadow_draw_corner_buf</STRONG> (Thumb, 382 bytes, Stack size 72 bytes, lv_draw_rect.o(i.shadow_draw_corner_buf))
<BR><BR>[Stack]<UL><LI>Max Depth = 360<LI>Call Chain = shadow_draw_corner_buf &rArr; lv_draw_mask_radius_init &rArr; circ_calc_aa4 &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[802]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;shadow_blur_corner
<LI><a href="#[6c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_width
<LI><a href="#[6c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_get_height
<LI><a href="#[6b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
<LI><a href="#[6cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_ff
</UL>
<BR>[Called By]<UL><LI><a href="#[6fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_shadow
</UL>

<P><STRONG><a name="[646]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_img_buf.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
</UL>

<P><STRONG><a name="[64a]"></a>lv_color_mix</STRONG> (Thumb, 146 bytes, Stack size 20 bytes, lv_img_buf.o(i.lv_color_mix))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_mix
</UL>
<BR>[Called By]<UL><LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[645]"></a>lv_memcpy_small</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_img_buf.o(i.lv_memcpy_small))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_memcpy_small
</UL>
<BR>[Called By]<UL><LI><a href="#[644]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform
<LI><a href="#[647]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_buf_get_px_color
<LI><a href="#[649]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_transform_anti_alias
</UL>

<P><STRONG><a name="[771]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_img_decoder.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_open
</UL>

<P><STRONG><a name="[76e]"></a>lv_img_decoder_built_in_line_alpha</STRONG> (Thumb, 374 bytes, Stack size 80 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_alpha))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_img_decoder_built_in_line_alpha &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[770]"></a>lv_img_decoder_built_in_line_indexed</STRONG> (Thumb, 318 bytes, Stack size 56 bytes, lv_img_decoder.o(i.lv_img_decoder_built_in_line_indexed))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = lv_img_decoder_built_in_line_indexed &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[76d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_read
<LI><a href="#[76a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_cf_get_px_size
<LI><a href="#[76f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_decoder_built_in_read_line
</UL>

<P><STRONG><a name="[6a6]"></a>children_repos</STRONG> (Thumb, 982 bytes, Stack size 80 bytes, lv_flex.o(i.children_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = children_repos &rArr; lv_obj_get_content_width &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[70a]"></a>find_track_end</STRONG> (Thumb, 574 bytes, Stack size 64 bytes, lv_flex.o(i.find_track_end))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = find_track_end &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[65e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[6a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_flex_grow
<LI><a href="#[6ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_item
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[f6]"></a>flex_update</STRONG> (Thumb, 720 bytes, Stack size 112 bytes, lv_flex.o(i.flex_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 508<LI>Call Chain = flex_update &rArr; lv_obj_refr_size &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[6a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;place_content
<LI><a href="#[70b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[70d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[70e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[70c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[6a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.lv_flex_init)
</UL>
<P><STRONG><a name="[6ac]"></a>get_next_item</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, lv_flex.o(i.get_next_item))
<BR><BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[e5]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.children_repos)
</UL>
<P><STRONG><a name="[e4]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_flex.o(i.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_flex.o(i.children_repos)
</UL>
<P><STRONG><a name="[6a7]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[6a9]"></a>lv_obj_get_style_flex_grow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_get_style_flex_grow))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_flex_grow &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[70c]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[70e]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[70d]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
</UL>

<P><STRONG><a name="[70b]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_flex.o(i.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[70a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;find_track_end
</UL>

<P><STRONG><a name="[6a8]"></a>place_content</STRONG> (Thumb, 124 bytes, Stack size 20 bytes, lv_flex.o(i.place_content))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = place_content
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flex_update
<LI><a href="#[6a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;children_repos
</UL>

<P><STRONG><a name="[690]"></a>calc</STRONG> (Thumb, 250 bytes, Stack size 64 bytes, lv_grid.o(i.calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = calc &rArr; calc_cols &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[69a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_align
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[693]"></a>calc_cols</STRONG> (Thumb, 352 bytes, Stack size 48 bytes, lv_grid.o(i.calc_cols))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = calc_cols &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[694]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_column
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tracks
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[692]"></a>calc_rows</STRONG> (Thumb, 320 bytes, Stack size 40 bytes, lv_grid.o(i.calc_rows))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = calc_rows &rArr; lv_mem_buf_get &rArr; lv_mem_realloc &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[400]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child_cnt
<LI><a href="#[69b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_height
<LI><a href="#[69f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_get
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[691]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_child
<LI><a href="#[695]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_row
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[69e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;count_tracks
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[69e]"></a>count_tracks</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_grid.o(i.count_tracks))
<BR><BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[69d]"></a>get_col_dsc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_grid.o(i.get_col_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_col_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[6a2]"></a>get_col_pos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(i.get_col_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_col_pos &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[6a1]"></a>get_col_span</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(i.get_col_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_col_span &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
</UL>

<P><STRONG><a name="[6a3]"></a>get_row_dsc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_grid.o(i.get_row_dsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = get_row_dsc &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
</UL>

<P><STRONG><a name="[6a5]"></a>get_row_pos</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(i.get_row_pos))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_row_pos &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
</UL>

<P><STRONG><a name="[6a4]"></a>get_row_span</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lv_grid.o(i.get_row_span))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = get_row_span &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
</UL>

<P><STRONG><a name="[69a]"></a>grid_align</STRONG> (Thumb, 260 bytes, Stack size 32 bytes, lv_grid.o(i.grid_align))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = grid_align
</UL>
<BR>[Called By]<UL><LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[f7]"></a>grid_update</STRONG> (Thumb, 218 bytes, Stack size 56 bytes, lv_grid.o(i.grid_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 452<LI>Call Chain = grid_update &rArr; lv_obj_refr_size &rArr; lv_obj_scrollbar_invalidate &rArr; lv_obj_get_scrollbar_area &rArr; lv_obj_get_scroll_left &rArr; lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[63c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memset_00
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[710]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refr_size
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[6af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_buf_release
<LI><a href="#[697]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[698]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_height
<LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[6a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_dsc
<LI><a href="#[69d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_dsc
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_grid.o(i.lv_grid_init)
</UL>
<P><STRONG><a name="[71e]"></a>item_repos</STRONG> (Thumb, 718 bytes, Stack size 56 bytes, lv_grid.o(i.item_repos))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = item_repos &rArr; lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[3ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_parent
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_move_children_by
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[6a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_has_flag_any
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_height
<LI><a href="#[696]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[6a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_span
<LI><a href="#[6a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_row_pos
<LI><a href="#[6a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_span
<LI><a href="#[6a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_col_pos
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_set_width
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
</UL>

<P><STRONG><a name="[696]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(i.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[71e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;item_repos
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[698]"></a>lv_obj_get_style_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(i.lv_obj_get_style_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[694]"></a>lv_obj_get_style_pad_column</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(i.lv_obj_get_style_pad_column))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_column &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[693]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_cols
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[695]"></a>lv_obj_get_style_pad_row</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(i.lv_obj_get_style_pad_row))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_row &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[692]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc_rows
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[697]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_grid.o(i.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;grid_update
<LI><a href="#[690]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calc
</UL>

<P><STRONG><a name="[715]"></a>get_glyph_dsc_id</STRONG> (Thumb, 284 bytes, Stack size 40 bytes, lv_font_fmt_txt.o(i.get_glyph_dsc_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = get_glyph_dsc_id &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_bitmap_fmt_txt
</UL>

<P><STRONG><a name="[719]"></a>get_kern_value</STRONG> (Thumb, 134 bytes, Stack size 24 bytes, lv_font_fmt_txt.o(i.get_kern_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = get_kern_value &rArr; _lv_utils_bsearch
</UL>
<BR>[Calls]<UL><LI><a href="#[716]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_utils_bsearch
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_dsc_fmt_txt
</UL>

<P><STRONG><a name="[ed]"></a>kern_pair_16_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_16_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[ee]"></a>kern_pair_8_compare</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.kern_pair_8_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_kern_value)
</UL>
<P><STRONG><a name="[ec]"></a>unicode_list_compare</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_font_fmt_txt.o(i.unicode_list_compare))
<BR>[Address Reference Count : 1]<UL><LI> lv_font_fmt_txt.o(i.get_glyph_dsc_id)
</UL>
<P><STRONG><a name="[749]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_hal_disp.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_register
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_drv_init
</UL>

<P><STRONG><a name="[627]"></a>anim_mark_list_change</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lv_anim.o(i.anim_mark_list_change))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = anim_mark_list_change
</UL>
<BR>[Calls]<UL><LI><a href="#[665]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_resume
<LI><a href="#[638]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_pause
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
</UL>
<BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[625]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_anim_core_init
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>

<P><STRONG><a name="[67c]"></a>anim_ready_handler</STRONG> (Thumb, 136 bytes, Stack size 80 bytes, lv_anim.o(i.anim_ready_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = anim_ready_handler &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[627]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_mark_list_change
</UL>
<BR>[Called By]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_timer
</UL>

<P><STRONG><a name="[d9]"></a>anim_timer</STRONG> (Thumb, 194 bytes, Stack size 16 bytes, lv_anim.o(i.anim_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = anim_timer &rArr; anim_ready_handler &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_next
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_get_head
<LI><a href="#[67c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;anim_ready_handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_anim.o(i._lv_anim_core_init)
</UL>
<P><STRONG><a name="[62b]"></a>lv_point_within_circle</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lv_area.o(i.lv_point_within_circle))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_point_within_circle
</UL>
<BR>[Called By]<UL><LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
</UL>

<P><STRONG><a name="[f0]"></a>lv_async_timer_cb</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_async.o(i.lv_async_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_async_timer_cb &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_async.o(i.lv_async_call)
</UL>
<P><STRONG><a name="[747]"></a>lv_color_black</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lv_color.o(i.lv_color_black))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_color_black &rArr; lv_color_make
</UL>
<BR>[Calls]<UL><LI><a href="#[748]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[756]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_palette_main
</UL>

<P><STRONG><a name="[748]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_color.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[747]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_color_black
</UL>

<P><STRONG><a name="[765]"></a>lv_fs_get_real_path</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_fs.o(i.lv_fs_get_real_path))
<BR><BR>[Called By]<UL><LI><a href="#[41e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_dir_open
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_fs_open
</UL>

<P><STRONG><a name="[66b]"></a>node_set_next</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_ll.o(i.node_set_next))
<BR><BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>

<P><STRONG><a name="[66a]"></a>node_set_prev</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, lv_ll.o(i.node_set_prev))
<BR><BR>[Called By]<UL><LI><a href="#[667]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_remove
<LI><a href="#[66c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_tail
<LI><a href="#[669]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_ll_ins_head
</UL>

<P><STRONG><a name="[ff]"></a>lv_mem_walker</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, lv_mem.o(i.lv_mem_walker))
<BR>[Address Reference Count : 1]<UL><LI> lv_mem.o(i.lv_mem_monitor)
</UL>
<P><STRONG><a name="[61e]"></a>_atoi</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, lv_printf.o(i._atoi))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _atoi
</UL>
<BR>[Calls]<UL><LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[620]"></a>_etoa</STRONG> (Thumb, 862 bytes, Stack size 128 bytes, lv_printf.o(i._etoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + In Cycle
<LI>Call Chain = _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[621]"></a>_ftoa</STRONG> (Thumb, 672 bytes, Stack size 136 bytes, lv_printf.o(i._ftoa))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_rev
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[475]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[623]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[602]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmpeq
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dneg
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[61f]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_printf.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>

<P><STRONG><a name="[678]"></a>_ntoa_format</STRONG> (Thumb, 228 bytes, Stack size 56 bytes, lv_printf.o(i._ntoa_format))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[624]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_out_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
</UL>

<P><STRONG><a name="[622]"></a>_ntoa_long</STRONG> (Thumb, 128 bytes, Stack size 96 bytes, lv_printf.o(i._ntoa_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = _ntoa_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
</UL>

<P><STRONG><a name="[679]"></a>_ntoa_long_long</STRONG> (Thumb, 128 bytes, Stack size 112 bytes, lv_printf.o(i._ntoa_long_long))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = _ntoa_long_long &rArr; _ntoa_format &rArr; _out_rev
</UL>
<BR>[Calls]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[67a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_vsnprintf
</UL>

<P><STRONG><a name="[106]"></a>_out_buffer</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_printf.o(i._out_buffer))
<BR>[Address Reference Count : 2]<UL><LI> lv_printf.o(i.lv_snprintf)
<LI> lv_printf.o(i.lv_vsnprintf)
</UL>
<P><STRONG><a name="[e1]"></a>_out_null</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_printf.o(i._out_null))
<BR>[Address Reference Count : 1]<UL><LI> lv_printf.o(i._vsnprintf)
</UL>
<P><STRONG><a name="[624]"></a>_out_rev</STRONG> (Thumb, 108 bytes, Stack size 56 bytes, lv_printf.o(i._out_rev))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _out_rev
</UL>
<BR>[Called By]<UL><LI><a href="#[678]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_format
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
</UL>

<P><STRONG><a name="[67a]"></a>_vsnprintf</STRONG> (Thumb, 1194 bytes, Stack size 88 bytes, lv_printf.o(i._vsnprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = _vsnprintf &rArr; _ftoa &rArr; _etoa &rArr;  _ftoa (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[679]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long_long
<LI><a href="#[622]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ntoa_long
<LI><a href="#[61f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
<LI><a href="#[621]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftoa
<LI><a href="#[620]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_etoa
<LI><a href="#[61e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_atoi
</UL>
<BR>[Called By]<UL><LI><a href="#[5bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_snprintf
<LI><a href="#[677]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_vsnprintf
</UL>

<P><STRONG><a name="[7f6]"></a>lv_color_make</STRONG> (Thumb, 50 bytes, Stack size 12 bytes, lv_style.o(i.lv_color_make))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = lv_color_make
</UL>
<BR>[Called By]<UL><LI><a href="#[7d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_style_prop_get_default
</UL>

<P><STRONG><a name="[7f8]"></a>lv_timer_exec</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, lv_timer.o(i.lv_timer_exec))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = lv_timer_exec &rArr; lv_timer_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[4f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_get
<LI><a href="#[4e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_del
<LI><a href="#[7f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_time_remaining
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
</UL>

<P><STRONG><a name="[7f9]"></a>lv_timer_time_remaining</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lv_timer.o(i.lv_timer_time_remaining))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = lv_timer_time_remaining &rArr; lv_tick_elaps
</UL>
<BR>[Calls]<UL><LI><a href="#[54c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tick_elaps
</UL>
<BR>[Called By]<UL><LI><a href="#[7fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_handler
<LI><a href="#[7f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_timer_exec
</UL>

<P><STRONG><a name="[7fd]"></a>adjust_request_size</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_tlsf.o(i.adjust_request_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = adjust_request_size
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[683]"></a>align_ptr</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_tlsf.o(i.align_ptr))
<BR><BR>[Called By]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[67f]"></a>block_absorb</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lv_tlsf.o(i.block_absorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_absorb &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[68e]"></a>block_can_split</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lv_tlsf.o(i.block_can_split))
<BR><BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[681]"></a>block_insert</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lv_tlsf.o(i.block_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[680]"></a>block_link_next</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lv_tlsf.o(i.block_link_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[7fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_add_pool
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
<LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>

<P><STRONG><a name="[685]"></a>block_locate_free</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lv_tlsf.o(i.block_locate_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_locate_free &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_fls
<LI><a href="#[687]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_ffs
<LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[689]"></a>block_mark_as_free</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_tlsf.o(i.block_mark_as_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
</UL>

<P><STRONG><a name="[68a]"></a>block_mark_as_used</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lv_tlsf.o(i.block_mark_as_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = block_mark_as_used
</UL>
<BR>[Calls]<UL><LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[68b]"></a>block_merge_next</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, lv_tlsf.o(i.block_merge_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[684]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_next
<LI><a href="#[67f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_absorb
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
</UL>

<P><STRONG><a name="[684]"></a>block_next</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lv_tlsf.o(i.block_next))
<BR><BR>[Called By]<UL><LI><a href="#[791]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_walk_pool
<LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
</UL>

<P><STRONG><a name="[68d]"></a>block_prepare_used</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lv_tlsf.o(i.block_prepare_used))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[68f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_split
<LI><a href="#[68a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_used
<LI><a href="#[680]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_link_next
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
<LI><a href="#[68e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_can_split
</UL>
<BR>[Called By]<UL><LI><a href="#[78c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_malloc
</UL>

<P><STRONG><a name="[68c]"></a>block_remove</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_tlsf.o(i.block_remove))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[688]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;remove_free_block
<LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
</UL>
<BR>[Called By]<UL><LI><a href="#[78e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_free
<LI><a href="#[68b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_merge_next
</UL>

<P><STRONG><a name="[68f]"></a>block_split</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lv_tlsf.o(i.block_split))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = block_split &rArr; block_mark_as_free &rArr; block_link_next
</UL>
<BR>[Calls]<UL><LI><a href="#[689]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_mark_as_free
<LI><a href="#[683]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_ptr
</UL>
<BR>[Called By]<UL><LI><a href="#[792]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_tlsf_realloc
<LI><a href="#[68d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_prepare_used
</UL>

<P><STRONG><a name="[107]"></a>default_walker</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lv_tlsf.o(i.default_walker))
<BR>[Address Reference Count : 1]<UL><LI> lv_tlsf.o(i.lv_tlsf_walk_pool)
</UL>
<P><STRONG><a name="[682]"></a>mapping_insert</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, lv_tlsf.o(i.mapping_insert))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[686]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tlsf_fls
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
<LI><a href="#[681]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_insert
</UL>

<P><STRONG><a name="[688]"></a>remove_free_block</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, lv_tlsf.o(i.remove_free_block))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = remove_free_block
</UL>
<BR>[Called By]<UL><LI><a href="#[68c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_remove
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[687]"></a>tlsf_ffs</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lv_tlsf.o(i.tlsf_ffs))
<BR><BR>[Called By]<UL><LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[686]"></a>tlsf_fls</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_tlsf.o(i.tlsf_fls))
<BR><BR>[Called By]<UL><LI><a href="#[682]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mapping_insert
<LI><a href="#[685]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;block_locate_free
</UL>

<P><STRONG><a name="[675]"></a>lv_txt_get_next_word</STRONG> (Thumb, 294 bytes, Stack size 64 bytes, lv_txt.o(i.lv_txt_get_next_word))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_txt_get_next_word &rArr; lv_font_get_glyph_width &rArr; lv_font_get_glyph_dsc
</UL>
<BR>[Calls]<UL><LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[785]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_is_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[674]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_txt_get_next_line
</UL>

<P><STRONG><a name="[20]"></a>lv_txt_utf8_get_byte_id</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_byte_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_byte_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>lv_txt_utf8_get_char_id</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_char_id))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_char_id
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>lv_txt_utf8_get_length</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_get_length))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_get_length
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1f]"></a>lv_txt_utf8_next</STRONG> (Thumb, 138 bytes, Stack size 20 bytes, lv_txt.o(i.lv_txt_utf8_next))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = lv_txt_utf8_next
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>lv_txt_utf8_prev</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, lv_txt.o(i.lv_txt_utf8_prev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = lv_txt_utf8_prev
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>lv_txt_utf8_size</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, lv_txt.o(i.lv_txt_utf8_size))
<BR>[Address Reference Count : 1]<UL><LI> lv_txt.o(.data)
</UL>
<P><STRONG><a name="[6dd]"></a>draw_indic</STRONG> (Thumb, 1218 bytes, Stack size 352 bytes, lv_bar.o(i.draw_indic))
<BR><BR>[Stack]<UL><LI>Max Depth = 1460<LI>Call Chain = draw_indic &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[6b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_radius_init
<LI><a href="#[6bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_free_param
<LI><a href="#[6ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_add
<LI><a href="#[6be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_mask_remove_id
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
</UL>

<P><STRONG><a name="[6e2]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_bar.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[e7]"></a>lv_area_get_height</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(i.lv_area_get_height))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.draw_indic)
</UL>
<P><STRONG><a name="[e6]"></a>lv_area_get_width</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lv_bar.o(i.lv_area_get_width))
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.draw_indic)
</UL>
<P><STRONG><a name="[f1]"></a>lv_bar_anim</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_bar_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[f2]"></a>lv_bar_anim_ready</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_anim_ready))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = lv_bar_anim_ready &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(i.lv_bar_set_value_with_anim)
</UL>
<P><STRONG><a name="[115]"></a>lv_bar_constructor</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lv_bar.o(i.lv_bar_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = lv_bar_constructor &rArr; lv_bar_set_value &rArr; lv_bar_set_value_with_anim &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[73e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_init_anim
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.constdata)
</UL>
<P><STRONG><a name="[116]"></a>lv_bar_destructor</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lv_bar.o(i.lv_bar_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_bar_destructor &rArr; lv_anim_del &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.constdata)
</UL>
<P><STRONG><a name="[117]"></a>lv_bar_event</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lv_bar.o(i.lv_bar_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1484<LI>Call Chain = lv_bar_event &rArr; draw_indic &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[740]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate_area
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[6e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[6df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[6de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[6e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_bar.o(.constdata)
</UL>
<P><STRONG><a name="[73e]"></a>lv_bar_init_anim</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, lv_bar.o(i.lv_bar_init_anim))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_constructor
</UL>

<P><STRONG><a name="[742]"></a>lv_bar_set_value_with_anim</STRONG> (Thumb, 102 bytes, Stack size 80 bytes, lv_bar.o(i.lv_bar_set_value_with_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = lv_bar_set_value_with_anim &rArr; lv_anim_start &rArr; _lv_ll_ins_head &rArr; lv_mem_alloc &rArr; lv_tlsf_malloc &rArr; block_prepare_used &rArr; block_insert &rArr; mapping_insert
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Called By]<UL><LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
</UL>

<P><STRONG><a name="[6e1]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6de]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6df]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6e0]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_bar.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_event
<LI><a href="#[6dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_indic
</UL>

<P><STRONG><a name="[6d3]"></a>draw_img</STRONG> (Thumb, 1110 bytes, Stack size 160 bytes, lv_img.o(i.draw_img))
<BR><BR>[Stack]<UL><LI>Max Depth = 1172<LI>Call Chain = draw_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[6db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_img_dsc
<LI><a href="#[628]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_in
<LI><a href="#[6c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img_dsc_init
<LI><a href="#[6c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_img
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[6d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
</UL>

<P><STRONG><a name="[6d6]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_img.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[118]"></a>lv_img_constructor</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, lv_img.o(i.lv_img_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_img_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_add_flag
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.constdata)
</UL>
<P><STRONG><a name="[119]"></a>lv_img_destructor</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lv_img.o(i.lv_img_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_img_destructor &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.constdata)
</UL>
<P><STRONG><a name="[11a]"></a>lv_img_event</STRONG> (Thumb, 544 bytes, Stack size 48 bytes, lv_img.o(i.lv_img_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1220<LI>Call Chain = lv_img_event &rArr; draw_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[40f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_src
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[775]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_click_area
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_img.o(.constdata)
</UL>
<P><STRONG><a name="[6d9]"></a>lv_img_get_transformed_size</STRONG> (Thumb, 92 bytes, Stack size 32 bytes, lv_img.o(i.lv_img_get_transformed_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = lv_img_get_transformed_size &rArr; lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[642]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_img_buf_get_transformed_area
<LI><a href="#[6d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_zoom
<LI><a href="#[6d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_angle
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6d5]"></a>lv_obj_get_style_transform_angle</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(i.lv_obj_get_style_transform_angle))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_transform_angle &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6d4]"></a>lv_obj_get_style_transform_zoom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_img.o(i.lv_obj_get_style_transform_zoom))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_transform_zoom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[548]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_set_angle
<LI><a href="#[6d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_get_transformed_size
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_img_event
<LI><a href="#[6d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_img
</UL>

<P><STRONG><a name="[6f3]"></a>draw_main</STRONG> (Thumb, 440 bytes, Stack size 120 bytes, lv_label.o(i.draw_main))
<BR><BR>[Stack]<UL><LI>Max Depth = 916<LI>Call Chain = draw_main &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[62f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_intersect
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_label_dsc
<LI><a href="#[656]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_top
<LI><a href="#[630]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_move
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[6c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label_dsc_init
<LI><a href="#[6c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_label
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
</UL>
<BR>[Called By]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[11b]"></a>lv_label_constructor</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 436<LI>Call Chain = lv_label_constructor &rArr; lv_label_set_text &rArr; lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.constdata)
</UL>
<P><STRONG><a name="[11c]"></a>lv_label_destructor</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_destructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = lv_label_destructor &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.constdata)
</UL>
<P><STRONG><a name="[77d]"></a>lv_label_dot_tmp_free</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lv_label.o(i.lv_label_dot_tmp_free))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_free
</UL>
<BR>[Called By]<UL><LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_destructor
</UL>

<P><STRONG><a name="[11d]"></a>lv_label_event</STRONG> (Thumb, 224 bytes, Stack size 48 bytes, lv_label.o(i.lv_label_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 964<LI>Call Chain = lv_label_event &rArr; draw_main &rArr; lv_draw_label &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[699]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_width
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[77e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_revert_dots
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_label.o(.constdata)
</UL>
<P><STRONG><a name="[77f]"></a>lv_label_refr_text</STRONG> (Thumb, 1122 bytes, Stack size 144 bytes, lv_label.o(i.lv_label_refr_text))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = lv_label_refr_text &rArr; lv_label_get_letter_on &rArr; lv_obj_get_content_coords &rArr; lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_start
<LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_init
<LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_del
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_mem_alloc
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[789]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_speed_to_time
<LI><a href="#[738]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_anim_get
<LI><a href="#[6f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_content_coords
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[787]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_disp
<LI><a href="#[776]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_self_size
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_txt_get_size
<LI><a href="#[6f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_font_get_glyph_width
<LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[6f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_width
<LI><a href="#[782]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_line_space
<LI><a href="#[781]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_letter_space
<LI><a href="#[780]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_text_font
<LI><a href="#[786]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_anim_speed
<LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
<LI><a href="#[43b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[41a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text_fmt
<LI><a href="#[413]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_text
<LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[77e]"></a>lv_label_revert_dots</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lv_label.o(i.lv_label_revert_dots))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = lv_label_revert_dots &rArr; lv_label_dot_tmp_free &rArr; lv_mem_free &rArr; lv_tlsf_free &rArr; block_merge_next &rArr; block_remove &rArr; remove_free_block
</UL>
<BR>[Calls]<UL><LI><a href="#[77d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_dot_tmp_free
</UL>
<BR>[Called By]<UL><LI><a href="#[77c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_set_long_mode
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[786]"></a>lv_obj_get_style_anim_speed</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_anim_speed))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_get_style_anim_speed &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
</UL>

<P><STRONG><a name="[780]"></a>lv_obj_get_style_text_font</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_label.o(i.lv_obj_get_style_text_font))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = lv_obj_get_style_text_font &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[781]"></a>lv_obj_get_style_text_letter_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_obj_get_style_text_letter_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_text_letter_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[782]"></a>lv_obj_get_style_text_line_space</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_obj_get_style_text_line_space))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_text_line_space &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
</UL>

<P><STRONG><a name="[6f5]"></a>lv_obj_get_style_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_label.o(i.lv_obj_get_style_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[783]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_get_letter_on
<LI><a href="#[77f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_refr_text
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_label_event
<LI><a href="#[6f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_main
</UL>

<P><STRONG><a name="[fd]"></a>set_ofs_x_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.set_ofs_x_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_ofs_x_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[fe]"></a>set_ofs_y_anim</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, lv_label.o(i.set_ofs_y_anim))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = set_ofs_y_anim &rArr; lv_obj_invalidate &rArr; lv_obj_invalidate_area &rArr; _lv_inv_area &rArr; _lv_area_is_in &rArr; _lv_area_is_point_on &rArr;  _lv_area_is_point_on (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lv_label.o(i.lv_label_refr_text)
<LI> lv_label.o(i.lv_label_set_long_mode)
</UL>
<P><STRONG><a name="[11e]"></a>lv_line_constructor</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_line.o(i.lv_line_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = lv_line_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.constdata)
</UL>
<P><STRONG><a name="[11f]"></a>lv_line_event</STRONG> (Thumb, 370 bytes, Stack size 64 bytes, lv_line.o(i.lv_line_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 636<LI>Call Chain = lv_line_event &rArr; lv_draw_line &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[52d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_y
<LI><a href="#[6da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_coords
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[78a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_line_dsc
<LI><a href="#[70f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_scroll_x
<LI><a href="#[751]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line_dsc_init
<LI><a href="#[755]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_line
<LI><a href="#[78b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_line_width
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_line.o(.constdata)
</UL>
<P><STRONG><a name="[78b]"></a>lv_obj_get_style_line_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_line.o(i.lv_obj_get_style_line_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_line_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_line_event
</UL>

<P><STRONG><a name="[6e7]"></a>draw_knob</STRONG> (Thumb, 390 bytes, Stack size 216 bytes, lv_slider.o(i.draw_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 1324<LI>Call Chain = draw_knob &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_init_draw_rect_dsc
<LI><a href="#[6e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_draw_dsc_init
<LI><a href="#[6e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect_dsc_init
<LI><a href="#[6e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_draw_rect
<LI><a href="#[67d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_memcpy
<LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[6ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_area_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[6ea]"></a>lv_area_copy</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, lv_slider.o(i.lv_area_copy))
<BR><BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[6e8]"></a>lv_obj_get_style_base_dir</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(i.lv_obj_get_style_base_dir))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_base_dir &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[7d0]"></a>lv_obj_get_style_pad_bottom</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(i.lv_obj_get_style_pad_bottom))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_bottom &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7d1]"></a>lv_obj_get_style_pad_left</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(i.lv_obj_get_style_pad_left))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_left &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7d2]"></a>lv_obj_get_style_pad_right</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(i.lv_obj_get_style_pad_right))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_right &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7d3]"></a>lv_obj_get_style_pad_top</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(i.lv_obj_get_style_pad_top))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_pad_top &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7d7]"></a>lv_obj_get_style_transform_height</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(i.lv_obj_get_style_transform_height))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_transform_height &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[7d8]"></a>lv_obj_get_style_transform_width</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lv_slider.o(i.lv_obj_get_style_transform_width))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
</UL>
<BR>[Called By]<UL><LI><a href="#[6e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;position_knob
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
</UL>

<P><STRONG><a name="[120]"></a>lv_slider_constructor</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lv_slider.o(i.lv_slider_constructor))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = lv_slider_constructor &rArr; lv_obj_clear_flag &rArr; lv_obj_is_layout_positioned &rArr; lv_obj_get_style_layout &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_clear_flag
<LI><a href="#[788]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_get_dpi
<LI><a href="#[7e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_set_ext_click_area
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.constdata)
</UL>
<P><STRONG><a name="[121]"></a>lv_slider_event</STRONG> (Thumb, 1166 bytes, Stack size 48 bytes, lv_slider.o(i.lv_slider_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 1372<LI>Call Chain = lv_slider_event &rArr; draw_knob &rArr; lv_draw_rect &rArr; draw_bg_img &rArr; lv_draw_img &rArr; lv_img_draw_core &rArr; show_error &rArr;  lv_draw_rect (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_target
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_code
<LI><a href="#[416]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_prop
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_width
<LI><a href="#[543]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_set_editing
<LI><a href="#[4c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_value
<LI><a href="#[53a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_value
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_height
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_act
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_send
<LI><a href="#[629]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lv_area_is_point_on
<LI><a href="#[7f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_point
<LI><a href="#[724]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_group
<LI><a href="#[717]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_indev_get_type
<LI><a href="#[728]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_group_get_editing
<LI><a href="#[6d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_event_base
<LI><a href="#[6d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_event_get_param
<LI><a href="#[6aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_invalidate
<LI><a href="#[774]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_refresh_ext_draw_size
<LI><a href="#[73f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_calculate_ext_draw_size
<LI><a href="#[741]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_set_start_value
<LI><a href="#[7f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_start_value
<LI><a href="#[6eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_get_mode
<LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
<LI><a href="#[6e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_base_dir
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_slider.o(.constdata)
</UL>
<P><STRONG><a name="[6eb]"></a>lv_slider_get_mode</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lv_slider.o(i.lv_slider_get_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lv_slider_get_mode
</UL>
<BR>[Calls]<UL><LI><a href="#[7f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_bar_get_mode
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_slider_event
<LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[6e9]"></a>position_knob</STRONG> (Thumb, 160 bytes, Stack size 40 bytes, lv_slider.o(i.position_knob))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = position_knob &rArr; lv_obj_get_style_transform_width &rArr; lv_obj_get_style_prop &rArr;  lv_obj_get_style_prop (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[7d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_width
<LI><a href="#[7d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_transform_height
<LI><a href="#[7d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_top
<LI><a href="#[7d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_right
<LI><a href="#[7d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_left
<LI><a href="#[7d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_obj_get_style_pad_bottom
</UL>
<BR>[Called By]<UL><LI><a href="#[6e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;draw_knob
</UL>

<P><STRONG><a name="[93]"></a>fs_dir_open(_lv_fs_drv_t*, const char*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, lv_port_fs_sdfat.o(i._Z11fs_dir_openP12_lv_fs_drv_tPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = fs_dir_open(_lv_fs_drv_t*, const char*) &rArr; FatFile::open(const char*, unsigned char) &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(const char*, unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[94]"></a>fs_dir_read(_lv_fs_drv_t*, void*, char*)</STRONG> (Thumb, 112 bytes, Stack size 200 bytes, lv_port_fs_sdfat.o(i._Z11fs_dir_readP12_lv_fs_drv_tPvPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 572<LI>Call Chain = fs_dir_read(_lv_fs_drv_t*, void*, char*) &rArr; FatFile::getName(char*, unsigned) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::openNext(FatFile*, unsigned char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getName(char*, unsigned)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[92]"></a>fs_dir_close(_lv_fs_drv_t*, void*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lv_port_fs_sdfat.o(i._Z12fs_dir_closeP12_lv_fs_drv_tPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = fs_dir_close(_lv_fs_drv_t*, void*) &rArr; FatFile::close() &rArr; FatFile::sync() &rArr; FatFile::cacheDirEntry(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[8c]"></a>fs_open(_lv_fs_drv_t*, const char*, unsigned char)</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lv_port_fs_sdfat.o(i._Z7fs_openP12_lv_fs_drv_tPKch))
<BR><BR>[Stack]<UL><LI>Max Depth = 548<LI>Call Chain = fs_open(_lv_fs_drv_t*, const char*, unsigned char) &rArr; FatFile::open(const char*, unsigned char) &rArr; FatFile::open(FatFile*, const char*, unsigned char) &rArr; FatFile::open(FatFile*, fname_t*, unsigned char) &rArr; FatFile::lfnUniqueSfn(fname_t*) &rArr; FatFile::readDirCache(bool) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(const char*, unsigned char)
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdFile::SdFile()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[8e]"></a>fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lv_port_fs_sdfat.o(i._Z7fs_readP12_lv_fs_drv_tPvS1_jPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 300<LI>Call Chain = fs_read(_lv_fs_drv_t*, void*, void*, unsigned, unsigned*) &rArr; FatFile::read(void*, unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::read(void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[90]"></a>fs_seek(_lv_fs_drv_t*, void*, unsigned, lv_fs_whence_t)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, lv_port_fs_sdfat.o(i._Z7fs_seekP12_lv_fs_drv_tPvj14lv_fs_whence_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 276<LI>Call Chain = fs_seek(_lv_fs_drv_t*, void*, unsigned, lv_fs_whence_t) &rArr; FatFile::seekSet(unsigned) &rArr; FatVolume::fatGet(unsigned, unsigned*) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::seekSet(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[91]"></a>fs_tell(_lv_fs_drv_t*, void*, unsigned*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_port_fs_sdfat.o(i._Z7fs_tellP12_lv_fs_drv_tPvPj))
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[8d]"></a>fs_close(_lv_fs_drv_t*, void*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lv_port_fs_sdfat.o(i._Z8fs_closeP12_lv_fs_drv_tPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 268<LI>Call Chain = fs_close(_lv_fs_drv_t*, void*) &rArr; FatFile::close() &rArr; FatFile::sync() &rArr; FatFile::cacheDirEntry(unsigned char) &rArr; FatVolume::cacheFetchData(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::close()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[8b]"></a>fs_ready(_lv_fs_drv_t*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_port_fs_sdfat.o(i._Z8fs_readyP12_lv_fs_drv_t))
<BR><BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::SD_GetReady()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[8f]"></a>fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*)</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, lv_port_fs_sdfat.o(i._Z8fs_writeP12_lv_fs_drv_tPvPKvjPj))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = fs_write(_lv_fs_drv_t*, void*, const void*, unsigned, unsigned*) &rArr; FatFile::write(const void*, unsigned) &rArr; FatFile::addCluster() &rArr; FatVolume::allocateCluster(unsigned, unsigned*) &rArr; FatVolume::fatPut(unsigned, unsigned) &rArr; FatVolume::cacheFetchFat(unsigned, unsigned char) &rArr; FatCache::read(unsigned, unsigned char) &rArr; FatCache::sync() &rArr; FatVolume::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::writeBlock(unsigned, const unsigned char*) &rArr; SdSpiCard::cardCommand(unsigned char, unsigned) &rArr; SdSpiCard::spiStart() &rArr; SPIClass::beginTransaction(SPISettings) &rArr; SPIClass::setDataMode(unsigned char) &rArr; SPI_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::write(const void*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_fs_sdfat.o(i._Z15lv_port_fs_initv)
</UL>
<P><STRONG><a name="[9b]"></a>disp_wait_cb(_lv_disp_drv_t*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lv_port_disp.o(i._Z12disp_wait_cbP14_lv_disp_drv_t))
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(i._Z17lv_port_disp_initv)
</UL>
<P><STRONG><a name="[9a]"></a>disp_flush_cb(_lv_disp_drv_t*, const lv_area_t*, lv_color16_t*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lv_port_disp.o(i._Z13disp_flush_cbP14_lv_disp_drv_tPK9lv_area_tP12lv_color16_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = disp_flush_cb(_lv_disp_drv_t*, const lv_area_t*, lv_color16_t*) &rArr; HAL::Display_SetAddrWindow(short, short, short, short) &rArr; Adafruit_ST7789::setAddrWindow(short, short, short, short) &rArr; Adafruit_ST7789::writeData16(unsigned short) &rArr; SPIClass::transfer(unsigned char) const
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_SetAddrWindow(short, short, short, short)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Display_SendPixels(unsigned short*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(i._Z17lv_port_disp_initv)
</UL>
<P><STRONG><a name="[99]"></a>disp_send_finish_callback()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, lv_port_disp.o(i._Z25disp_send_finish_callbackv))
<BR><BR>[Calls]<UL><LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lv_disp_flush_ready
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_disp.o(i._Z17lv_port_disp_initv)
</UL>
<P><STRONG><a name="[9e]"></a>encoder_read(_lv_indev_drv_t*, lv_indev_data_t*)</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lv_port_indev.o(i._Z12encoder_readP15_lv_indev_drv_tP15lv_indev_data_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = encoder_read(_lv_indev_drv_t*, lv_indev_data_t*) &rArr; HAL::Buzz_Tone(unsigned, int) &rArr; tone(unsigned char, unsigned, unsigned) &rArr; tone(unsigned char, unsigned) &rArr; Timer_SetInterruptBase &rArr; NVIC_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Buzz_Tone(unsigned, int)
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_GetIsPush()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL::Encoder_GetDiff()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lv_port_indev.o(i._Z18lv_port_indev_initv)
</UL>
<P><STRONG><a name="[594]"></a>lfnGetChar(longDirectoryEntry*, unsigned char)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, fatfilelfn.o(i._Z10lfnGetCharP18longDirectoryEntryh))
<BR><BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::getName(char*, unsigned)
<LI><a href="#[593]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FatFile::open(FatFile*, fname_t*, unsigned char)
</UL>

<P><STRONG><a name="[6b2]"></a>dump_stack</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, cm_backtrace.o(i.dump_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 432 + Unknown Stack Size
<LI>Call Chain = dump_stack &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[6b3]"></a>fault_diagnosis</STRONG> (Thumb, 564 bytes, Stack size 16 bytes, cm_backtrace.o(i.fault_diagnosis))
<BR><BR>[Stack]<UL><LI>Max Depth = 424 + Unknown Stack Size
<LI>Call Chain = fault_diagnosis &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[6b4]"></a>print_call_stack</STRONG> (Thumb, 114 bytes, Stack size 96 bytes, cm_backtrace.o(i.print_call_stack))
<BR><BR>[Stack]<UL><LI>Max Depth = 504 + Unknown Stack Size
<LI>Call Chain = print_call_stack &rArr; cmb_printf &rArr; __c89vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cmb_printf
<LI><a href="#[801]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_call_stack
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2sprintf
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cm_backtrace_fault
</UL>

<P><STRONG><a name="[17c]"></a>__sti___18_HardwareSerial_cpp_5d0e368d</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, hardwareserial.o(i.__sti___18_HardwareSerial_cpp_5d0e368d))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __sti___18_HardwareSerial_cpp_5d0e368d
</UL>
<BR>[Calls]<UL><LI><a href="#[61c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardwareSerial::HardwareSerial(USART_Type*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> hardwareserial.o(.init_array)
</UL>
<P><STRONG><a name="[17d]"></a>__sti___7_SPI_cpp_8bca9eee</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, spi.o(i.__sti___7_SPI_cpp_8bca9eee))
<BR>[Address Reference Count : 1]<UL><LI> spi.o(.init_array)
</UL>
<P><STRONG><a name="[a2]"></a>tone_TimerHandler()</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, tone.o(i._Z17tone_TimerHandlerv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = tone_TimerHandler() &rArr; noTone(unsigned char)
</UL>
<BR>[Calls]<UL><LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;millis
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;noTone(unsigned char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tone.o(i._Z4tonehj)
</UL>
<P><STRONG><a name="[17e]"></a>__sti___8_Wire_cpp_928ee5ff</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, wire.o(i.__sti___8_Wire_cpp_928ee5ff))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = __sti___8_Wire_cpp_928ee5ff &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[61d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TwoWire::TwoWire(unsigned char, unsigned char, unsigned char)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> wire.o(.init_array)
</UL>
<P><STRONG><a name="[248]"></a>ADC_DMA_SearchChannel</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, adc.o(i.ADC_DMA_SearchChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DMA_SearchChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DMA_Register
</UL>

<P><STRONG><a name="[252]"></a>__NVIC_SetPriority</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, delay.o(i.__NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_Init
</UL>

<P><STRONG><a name="[255]"></a>EXTI_GetIRQn</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, exti.o(i.EXTI_GetIRQn))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EXTI_GetIRQn
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetPinNum
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTIx_Init
</UL>

<P><STRONG><a name="[29e]"></a>Timer_TimeToArrPsc</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, timer.o(i.Timer_TimeToArrPsc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Timer_TimeToArrPsc
</UL>
<BR>[Called By]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterrupt
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_SetInterruptTimeUpdate
</UL>

<P><STRONG><a name="[28c]"></a>SetSysClockTo240MHSI</STRONG> (Thumb, 168 bytes, Stack size 16 bytes, system_at32f4xx.o(i.SetSysClockTo240MHSI))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SetSysClockTo240MHSI
</UL>
<BR>[Calls]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_StepModeCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[862]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[863]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
</UL>

<P><STRONG><a name="[854]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[861]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_drsb
<LI><a href="#[853]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[1eb]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7d]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[7e]"></a>_scanf_char_input</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, scanf_char.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> scanf_char.o(.text)
</UL>
<P><STRONG><a name="[455]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list) &rArr; vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
<LI><a href="#[457]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)
</UL>

<P><STRONG><a name="[457]"></a>[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list)</STRONG> (Thumb, 296 bytes, Stack size 88 bytes, rwstdexcept.o(i._ZN37_INTERNAL_15_rwstdexcept_cpp_8697b68a4__rw13__rw_vfmatstrEPcjiSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 596 + Unknown Stack Size
<LI>Call Chain = [local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, int, std::__va_list) &rArr; sscanf &rArr; __vfscanf_char &rArr; __vfscanf &rArr; _scanf_real &rArr; _scanf_really_real &rArr; _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[458]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strrchr
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sscanf
<LI><a href="#[45b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::locale()
<LI><a href="#[455]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to rwstdexcept_cpp]::__rw::__rw_vfmatstr(char*, unsigned, const char*, std::__va_list)
<LI><a href="#[459]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const char*, const std::allocator&lang;char&rang;&)
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::locale::~locale()
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::~basic_string()
<LI><a href="#[45a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;&)
</UL>
<BR>[Called By]<UL><LI><a href="#[55d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::__rw_exception::_C_vformat(int, std::__va_list)
</UL>

<P><STRONG><a name="[17f]"></a>__sti___8_char_cpp_a3dc957a</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, char.o(i.__sti___8_char_cpp_a3dc957a))
<BR>[Address Reference Count : 1]<UL><LI> char.o(.init_array)
</UL>
<P><STRONG><a name="[cd]"></a>&lang;Func5&rang;</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, locale.o(i.<Func5>))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = &lang;Func5&rang; &rArr; std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::basic_string&lang;char, std::char_traits&lang;char&rang;, std::allocator&lang;char&rang;&rang;::basic_string(const std::allocator&lang;char&rang;&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> locale.o(i._ZN4__rw15__rw_locale_impC1EPKcjj)
</UL>
<P><STRONG><a name="[180]"></a>__sti___10_locale_cpp_ff99fc7b</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, locale.o(i.__sti___10_locale_cpp_ff99fc7b))
<BR>[Address Reference Count : 1]<UL><LI> locale.o(.init_array)
</UL>
<P><STRONG><a name="[82]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[217]"></a>_fp_value</STRONG> (Thumb, 588 bytes, Stack size 96 bytes, scanf_fp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_value &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emuld
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_edivd
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ieee_status
</UL>
<BR>[Called By]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_scanf_really_real
</UL>

<P><STRONG><a name="[181]"></a>__sti___10_rwcats_cpp_64e8068e</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, rwcats.o(i.__sti___10_rwcats_cpp_64e8068e))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___10_rwcats_cpp_64e8068e &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[456]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned)
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rwcats.o(.init_array)
</UL>
<P><STRONG><a name="[230]"></a>_locale_name</STRONG> (Thumb, 154 bytes, Stack size 16 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_byname
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_set_locale_mixed
</UL>

<P><STRONG><a name="[232]"></a>_set_locale_mixed</STRONG> (Thumb, 98 bytes, Stack size 24 bytes, locale_r.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
</UL>

<P><STRONG><a name="[231]"></a>_set_locale_byname</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, locale_r.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _set_locale_byname &rArr; _locale_name
</UL>
<BR>[Calls]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_locale_name
</UL>
<BR>[Called By]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_setlocale_r
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
